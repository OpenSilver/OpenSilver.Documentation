### YamlMime:ManagedReference
items:
- uid: TypeScriptDefToCSharp.Tool
  commentId: T:TypeScriptDefToCSharp.Tool
  id: Tool
  parent: TypeScriptDefToCSharp
  children:
  - TypeScriptDefToCSharp.Tool.ClearKeyWord(System.String)
  - TypeScriptDefToCSharp.Tool.Deserialize``1(System.String)
  - TypeScriptDefToCSharp.Tool.FirstMismatchIndex``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IReadOnlyList{``0})
  - TypeScriptDefToCSharp.Tool.GenerateUnionType(System.Int32)
  - TypeScriptDefToCSharp.Tool.GetHash(System.String)
  - TypeScriptDefToCSharp.Tool.GetHashString(System.String)
  - TypeScriptDefToCSharp.Tool.GetIdent(System.Xml.Linq.XElement)
  - TypeScriptDefToCSharp.Tool.IsBasicType(TypeScriptDefToCSharp.Model.TSType)
  - TypeScriptDefToCSharp.Tool.IsDomType(TypeScriptDefToCSharp.Model.BasicType)
  - TypeScriptDefToCSharp.Tool.IsKeyWord(System.String)
  - TypeScriptDefToCSharp.Tool.IsPrimitiveType(TypeScriptDefToCSharp.Model.BasicType)
  - TypeScriptDefToCSharp.Tool.JSArrayDimensionName(System.String,System.Int32)
  - TypeScriptDefToCSharp.Tool.NewType(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  - TypeScriptDefToCSharp.Tool.ReIndent(System.String)
  - TypeScriptDefToCSharp.Tool.RemoveDotIdentAdditionalChars(System.String)
  - TypeScriptDefToCSharp.Tool.Serialize``1(``0)
  - TypeScriptDefToCSharp.Tool.Tab(System.Int32)
  langs:
  - csharp
  - vb
  name: Tool
  nameWithType: Tool
  fullName: TypeScriptDefToCSharp.Tool
  type: Class
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Tool
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
    startLine: 32
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp
  syntax:
    content: public static class Tool
    content.vb: Public Module Tool
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: TypeScriptDefToCSharp.Tool.GetIdent(System.Xml.Linq.XElement)
  commentId: M:TypeScriptDefToCSharp.Tool.GetIdent(System.Xml.Linq.XElement)
  id: GetIdent(System.Xml.Linq.XElement)
  parent: TypeScriptDefToCSharp.Tool
  langs:
  - csharp
  - vb
  name: GetIdent(XElement)
  nameWithType: Tool.GetIdent(XElement)
  fullName: TypeScriptDefToCSharp.Tool.GetIdent(System.Xml.Linq.XElement)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetIdent
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
    startLine: 35
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp
  syntax:
    content: public static string GetIdent(XElement elem)
    parameters:
    - id: elem
      type: System.Xml.Linq.XElement
    return:
      type: System.String
    content.vb: Public Shared Function GetIdent(elem As XElement) As String
  overload: TypeScriptDefToCSharp.Tool.GetIdent*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TypeScriptDefToCSharp.Tool.RemoveDotIdentAdditionalChars(System.String)
  commentId: M:TypeScriptDefToCSharp.Tool.RemoveDotIdentAdditionalChars(System.String)
  id: RemoveDotIdentAdditionalChars(System.String)
  parent: TypeScriptDefToCSharp.Tool
  langs:
  - csharp
  - vb
  name: RemoveDotIdentAdditionalChars(String)
  nameWithType: Tool.RemoveDotIdentAdditionalChars(String)
  fullName: TypeScriptDefToCSharp.Tool.RemoveDotIdentAdditionalChars(System.String)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: RemoveDotIdentAdditionalChars
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
    startLine: 52
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp
  syntax:
    content: public static string RemoveDotIdentAdditionalChars(string nameThatCanContainAdditionalChars)
    parameters:
    - id: nameThatCanContainAdditionalChars
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function RemoveDotIdentAdditionalChars(nameThatCanContainAdditionalChars As String) As String
  overload: TypeScriptDefToCSharp.Tool.RemoveDotIdentAdditionalChars*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TypeScriptDefToCSharp.Tool.NewType(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Tool.NewType(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  id: NewType(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  parent: TypeScriptDefToCSharp.Tool
  langs:
  - csharp
  - vb
  name: NewType(XElement, TypeScriptDefContext)
  nameWithType: Tool.NewType(XElement, TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Tool.NewType(System.Xml.Linq.XElement, TypeScriptDefToCSharp.TypeScriptDefContext)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: NewType
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
    startLine: 62
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp
  syntax:
    content: public static TSType NewType(XElement elem, TypeScriptDefContext context)
    parameters:
    - id: elem
      type: System.Xml.Linq.XElement
    - id: context
      type: TypeScriptDefToCSharp.TypeScriptDefContext
    return:
      type: TypeScriptDefToCSharp.Model.TSType
    content.vb: Public Shared Function NewType(elem As XElement, context As TypeScriptDefContext) As TSType
  overload: TypeScriptDefToCSharp.Tool.NewType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TypeScriptDefToCSharp.Tool.FirstMismatchIndex``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IReadOnlyList{``0})
  commentId: M:TypeScriptDefToCSharp.Tool.FirstMismatchIndex``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IReadOnlyList{``0})
  id: FirstMismatchIndex``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IReadOnlyList{``0})
  isExtensionMethod: true
  parent: TypeScriptDefToCSharp.Tool
  langs:
  - csharp
  - vb
  name: FirstMismatchIndex<T>(IReadOnlyList<T>, IReadOnlyList<T>)
  nameWithType: Tool.FirstMismatchIndex<T>(IReadOnlyList<T>, IReadOnlyList<T>)
  fullName: TypeScriptDefToCSharp.Tool.FirstMismatchIndex<T>(System.Collections.Generic.IReadOnlyList<T>, System.Collections.Generic.IReadOnlyList<T>)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: FirstMismatchIndex
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
    startLine: 110
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp
  syntax:
    content: public static int FirstMismatchIndex<T>(this IReadOnlyList<T> l1, IReadOnlyList<T> l2)
    parameters:
    - id: l1
      type: System.Collections.Generic.IReadOnlyList{{T}}
    - id: l2
      type: System.Collections.Generic.IReadOnlyList{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstMismatchIndex(Of T)(l1 As IReadOnlyList(Of T), l2 As IReadOnlyList(Of T)) As Integer
  overload: TypeScriptDefToCSharp.Tool.FirstMismatchIndex*
  nameWithType.vb: Tool.FirstMismatchIndex(Of T)(IReadOnlyList(Of T), IReadOnlyList(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TypeScriptDefToCSharp.Tool.FirstMismatchIndex(Of T)(System.Collections.Generic.IReadOnlyList(Of T), System.Collections.Generic.IReadOnlyList(Of T))
  name.vb: FirstMismatchIndex(Of T)(IReadOnlyList(Of T), IReadOnlyList(Of T))
- uid: TypeScriptDefToCSharp.Tool.Tab(System.Int32)
  commentId: M:TypeScriptDefToCSharp.Tool.Tab(System.Int32)
  id: Tab(System.Int32)
  parent: TypeScriptDefToCSharp.Tool
  langs:
  - csharp
  - vb
  name: Tab(Int32)
  nameWithType: Tool.Tab(Int32)
  fullName: TypeScriptDefToCSharp.Tool.Tab(System.Int32)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Tab
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
    startLine: 127
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp
  syntax:
    content: public static string Tab(int t)
    parameters:
    - id: t
      type: System.Int32
    return:
      type: System.String
    content.vb: Public Shared Function Tab(t As Integer) As String
  overload: TypeScriptDefToCSharp.Tool.Tab*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TypeScriptDefToCSharp.Tool.ReIndent(System.String)
  commentId: M:TypeScriptDefToCSharp.Tool.ReIndent(System.String)
  id: ReIndent(System.String)
  parent: TypeScriptDefToCSharp.Tool
  langs:
  - csharp
  - vb
  name: ReIndent(String)
  nameWithType: Tool.ReIndent(String)
  fullName: TypeScriptDefToCSharp.Tool.ReIndent(System.String)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ReIndent
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
    startLine: 135
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp
  syntax:
    content: public static string ReIndent(string Text)
    parameters:
    - id: Text
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function ReIndent(Text As String) As String
  overload: TypeScriptDefToCSharp.Tool.ReIndent*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TypeScriptDefToCSharp.Tool.IsPrimitiveType(TypeScriptDefToCSharp.Model.BasicType)
  commentId: M:TypeScriptDefToCSharp.Tool.IsPrimitiveType(TypeScriptDefToCSharp.Model.BasicType)
  id: IsPrimitiveType(TypeScriptDefToCSharp.Model.BasicType)
  parent: TypeScriptDefToCSharp.Tool
  langs:
  - csharp
  - vb
  name: IsPrimitiveType(BasicType)
  nameWithType: Tool.IsPrimitiveType(BasicType)
  fullName: TypeScriptDefToCSharp.Tool.IsPrimitiveType(TypeScriptDefToCSharp.Model.BasicType)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IsPrimitiveType
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
    startLine: 166
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp
  syntax:
    content: public static bool IsPrimitiveType(BasicType type)
    parameters:
    - id: type
      type: TypeScriptDefToCSharp.Model.BasicType
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsPrimitiveType(type As BasicType) As Boolean
  overload: TypeScriptDefToCSharp.Tool.IsPrimitiveType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TypeScriptDefToCSharp.Tool.IsDomType(TypeScriptDefToCSharp.Model.BasicType)
  commentId: M:TypeScriptDefToCSharp.Tool.IsDomType(TypeScriptDefToCSharp.Model.BasicType)
  id: IsDomType(TypeScriptDefToCSharp.Model.BasicType)
  parent: TypeScriptDefToCSharp.Tool
  langs:
  - csharp
  - vb
  name: IsDomType(BasicType)
  nameWithType: Tool.IsDomType(BasicType)
  fullName: TypeScriptDefToCSharp.Tool.IsDomType(TypeScriptDefToCSharp.Model.BasicType)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IsDomType
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
    startLine: 185
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp
  syntax:
    content: public static bool IsDomType(BasicType type)
    parameters:
    - id: type
      type: TypeScriptDefToCSharp.Model.BasicType
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsDomType(type As BasicType) As Boolean
  overload: TypeScriptDefToCSharp.Tool.IsDomType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TypeScriptDefToCSharp.Tool.IsBasicType(TypeScriptDefToCSharp.Model.TSType)
  commentId: M:TypeScriptDefToCSharp.Tool.IsBasicType(TypeScriptDefToCSharp.Model.TSType)
  id: IsBasicType(TypeScriptDefToCSharp.Model.TSType)
  parent: TypeScriptDefToCSharp.Tool
  langs:
  - csharp
  - vb
  name: IsBasicType(TSType)
  nameWithType: Tool.IsBasicType(TSType)
  fullName: TypeScriptDefToCSharp.Tool.IsBasicType(TypeScriptDefToCSharp.Model.TSType)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IsBasicType
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
    startLine: 970
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp
  syntax:
    content: public static bool IsBasicType(TSType type)
    parameters:
    - id: type
      type: TypeScriptDefToCSharp.Model.TSType
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsBasicType(type As TSType) As Boolean
  overload: TypeScriptDefToCSharp.Tool.IsBasicType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TypeScriptDefToCSharp.Tool.IsKeyWord(System.String)
  commentId: M:TypeScriptDefToCSharp.Tool.IsKeyWord(System.String)
  id: IsKeyWord(System.String)
  parent: TypeScriptDefToCSharp.Tool
  langs:
  - csharp
  - vb
  name: IsKeyWord(String)
  nameWithType: Tool.IsKeyWord(String)
  fullName: TypeScriptDefToCSharp.Tool.IsKeyWord(System.String)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IsKeyWord
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
    startLine: 993
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp
  syntax:
    content: public static bool IsKeyWord(string Word)
    parameters:
    - id: Word
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsKeyWord(Word As String) As Boolean
  overload: TypeScriptDefToCSharp.Tool.IsKeyWord*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TypeScriptDefToCSharp.Tool.ClearKeyWord(System.String)
  commentId: M:TypeScriptDefToCSharp.Tool.ClearKeyWord(System.String)
  id: ClearKeyWord(System.String)
  parent: TypeScriptDefToCSharp.Tool
  langs:
  - csharp
  - vb
  name: ClearKeyWord(String)
  nameWithType: Tool.ClearKeyWord(String)
  fullName: TypeScriptDefToCSharp.Tool.ClearKeyWord(System.String)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ClearKeyWord
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
    startLine: 1083
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp
  syntax:
    content: public static string ClearKeyWord(string Name)
    parameters:
    - id: Name
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function ClearKeyWord(Name As String) As String
  overload: TypeScriptDefToCSharp.Tool.ClearKeyWord*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TypeScriptDefToCSharp.Tool.GenerateUnionType(System.Int32)
  commentId: M:TypeScriptDefToCSharp.Tool.GenerateUnionType(System.Int32)
  id: GenerateUnionType(System.Int32)
  parent: TypeScriptDefToCSharp.Tool
  langs:
  - csharp
  - vb
  name: GenerateUnionType(Int32)
  nameWithType: Tool.GenerateUnionType(Int32)
  fullName: TypeScriptDefToCSharp.Tool.GenerateUnionType(System.Int32)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GenerateUnionType
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
    startLine: 1094
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp
  syntax:
    content: public static string GenerateUnionType(int n)
    parameters:
    - id: n
      type: System.Int32
    return:
      type: System.String
    content.vb: Public Shared Function GenerateUnionType(n As Integer) As String
  overload: TypeScriptDefToCSharp.Tool.GenerateUnionType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TypeScriptDefToCSharp.Tool.Deserialize``1(System.String)
  commentId: M:TypeScriptDefToCSharp.Tool.Deserialize``1(System.String)
  id: Deserialize``1(System.String)
  parent: TypeScriptDefToCSharp.Tool
  langs:
  - csharp
  - vb
  name: Deserialize<T>(String)
  nameWithType: Tool.Deserialize<T>(String)
  fullName: TypeScriptDefToCSharp.Tool.Deserialize<T>(System.String)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Deserialize
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
    startLine: 1212
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp
  syntax:
    content: public static T Deserialize<T>(string toDeserialize)
    parameters:
    - id: toDeserialize
      type: System.String
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function Deserialize(Of T)(toDeserialize As String) As T
  overload: TypeScriptDefToCSharp.Tool.Deserialize*
  nameWithType.vb: Tool.Deserialize(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TypeScriptDefToCSharp.Tool.Deserialize(Of T)(System.String)
  name.vb: Deserialize(Of T)(String)
- uid: TypeScriptDefToCSharp.Tool.Serialize``1(``0)
  commentId: M:TypeScriptDefToCSharp.Tool.Serialize``1(``0)
  id: Serialize``1(``0)
  parent: TypeScriptDefToCSharp.Tool
  langs:
  - csharp
  - vb
  name: Serialize<T>(T)
  nameWithType: Tool.Serialize<T>(T)
  fullName: TypeScriptDefToCSharp.Tool.Serialize<T>(T)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Serialize
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
    startLine: 1233
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp
  syntax:
    content: public static string Serialize<T>(T toSerialize)
    parameters:
    - id: toSerialize
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.String
    content.vb: Public Shared Function Serialize(Of T)(toSerialize As T) As String
  overload: TypeScriptDefToCSharp.Tool.Serialize*
  nameWithType.vb: Tool.Serialize(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TypeScriptDefToCSharp.Tool.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
- uid: TypeScriptDefToCSharp.Tool.GetHash(System.String)
  commentId: M:TypeScriptDefToCSharp.Tool.GetHash(System.String)
  id: GetHash(System.String)
  parent: TypeScriptDefToCSharp.Tool
  langs:
  - csharp
  - vb
  name: GetHash(String)
  nameWithType: Tool.GetHash(String)
  fullName: TypeScriptDefToCSharp.Tool.GetHash(System.String)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetHash
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
    startLine: 1245
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp
  syntax:
    content: public static byte[] GetHash(string inputString)
    parameters:
    - id: inputString
      type: System.String
    return:
      type: System.Byte[]
    content.vb: Public Shared Function GetHash(inputString As String) As Byte()
  overload: TypeScriptDefToCSharp.Tool.GetHash*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TypeScriptDefToCSharp.Tool.GetHashString(System.String)
  commentId: M:TypeScriptDefToCSharp.Tool.GetHashString(System.String)
  id: GetHashString(System.String)
  parent: TypeScriptDefToCSharp.Tool
  langs:
  - csharp
  - vb
  name: GetHashString(String)
  nameWithType: Tool.GetHashString(String)
  fullName: TypeScriptDefToCSharp.Tool.GetHashString(System.String)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetHashString
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
    startLine: 1251
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp
  syntax:
    content: public static string GetHashString(string inputString)
    parameters:
    - id: inputString
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function GetHashString(inputString As String) As String
  overload: TypeScriptDefToCSharp.Tool.GetHashString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TypeScriptDefToCSharp.Tool.JSArrayDimensionName(System.String,System.Int32)
  commentId: M:TypeScriptDefToCSharp.Tool.JSArrayDimensionName(System.String,System.Int32)
  id: JSArrayDimensionName(System.String,System.Int32)
  parent: TypeScriptDefToCSharp.Tool
  langs:
  - csharp
  - vb
  name: JSArrayDimensionName(String, Int32)
  nameWithType: Tool.JSArrayDimensionName(String, Int32)
  fullName: TypeScriptDefToCSharp.Tool.JSArrayDimensionName(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: JSArrayDimensionName
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Tool.cs
    startLine: 1260
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp
  syntax:
    content: public static string JSArrayDimensionName(string name, int arrayLevel)
    parameters:
    - id: name
      type: System.String
    - id: arrayLevel
      type: System.Int32
    return:
      type: System.String
    content.vb: Public Shared Function JSArrayDimensionName(name As String, arrayLevel As Integer) As String
  overload: TypeScriptDefToCSharp.Tool.JSArrayDimensionName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TypeScriptDefToCSharp
  commentId: N:TypeScriptDefToCSharp
  name: TypeScriptDefToCSharp
  nameWithType: TypeScriptDefToCSharp
  fullName: TypeScriptDefToCSharp
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: TypeScriptDefToCSharp.Tool.GetIdent*
  commentId: Overload:TypeScriptDefToCSharp.Tool.GetIdent
  name: GetIdent
  nameWithType: Tool.GetIdent
  fullName: TypeScriptDefToCSharp.Tool.GetIdent
- uid: System.Xml.Linq.XElement
  commentId: T:System.Xml.Linq.XElement
  parent: System.Xml.Linq
  isExternal: true
  name: XElement
  nameWithType: XElement
  fullName: System.Xml.Linq.XElement
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.Linq
  commentId: N:System.Xml.Linq
  isExternal: true
  name: System.Xml.Linq
  nameWithType: System.Xml.Linq
  fullName: System.Xml.Linq
- uid: TypeScriptDefToCSharp.Tool.RemoveDotIdentAdditionalChars*
  commentId: Overload:TypeScriptDefToCSharp.Tool.RemoveDotIdentAdditionalChars
  name: RemoveDotIdentAdditionalChars
  nameWithType: Tool.RemoveDotIdentAdditionalChars
  fullName: TypeScriptDefToCSharp.Tool.RemoveDotIdentAdditionalChars
- uid: TypeScriptDefToCSharp.Tool.NewType*
  commentId: Overload:TypeScriptDefToCSharp.Tool.NewType
  name: NewType
  nameWithType: Tool.NewType
  fullName: TypeScriptDefToCSharp.Tool.NewType
- uid: TypeScriptDefToCSharp.TypeScriptDefContext
  commentId: T:TypeScriptDefToCSharp.TypeScriptDefContext
  parent: TypeScriptDefToCSharp
  name: TypeScriptDefContext
  nameWithType: TypeScriptDefContext
  fullName: TypeScriptDefToCSharp.TypeScriptDefContext
- uid: TypeScriptDefToCSharp.Model.TSType
  commentId: T:TypeScriptDefToCSharp.Model.TSType
  parent: TypeScriptDefToCSharp.Model
  name: TSType
  nameWithType: TSType
  fullName: TypeScriptDefToCSharp.Model.TSType
- uid: TypeScriptDefToCSharp.Model
  commentId: N:TypeScriptDefToCSharp.Model
  name: TypeScriptDefToCSharp.Model
  nameWithType: TypeScriptDefToCSharp.Model
  fullName: TypeScriptDefToCSharp.Model
- uid: TypeScriptDefToCSharp.Tool.FirstMismatchIndex*
  commentId: Overload:TypeScriptDefToCSharp.Tool.FirstMismatchIndex
  name: FirstMismatchIndex
  nameWithType: Tool.FirstMismatchIndex
  fullName: TypeScriptDefToCSharp.Tool.FirstMismatchIndex
- uid: System.Collections.Generic.IReadOnlyList{{T}}
  commentId: T:System.Collections.Generic.IReadOnlyList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TypeScriptDefToCSharp.Tool.Tab*
  commentId: Overload:TypeScriptDefToCSharp.Tool.Tab
  name: Tab
  nameWithType: Tool.Tab
  fullName: TypeScriptDefToCSharp.Tool.Tab
- uid: TypeScriptDefToCSharp.Tool.ReIndent*
  commentId: Overload:TypeScriptDefToCSharp.Tool.ReIndent
  name: ReIndent
  nameWithType: Tool.ReIndent
  fullName: TypeScriptDefToCSharp.Tool.ReIndent
- uid: TypeScriptDefToCSharp.Tool.IsPrimitiveType*
  commentId: Overload:TypeScriptDefToCSharp.Tool.IsPrimitiveType
  name: IsPrimitiveType
  nameWithType: Tool.IsPrimitiveType
  fullName: TypeScriptDefToCSharp.Tool.IsPrimitiveType
- uid: TypeScriptDefToCSharp.Model.BasicType
  commentId: T:TypeScriptDefToCSharp.Model.BasicType
  parent: TypeScriptDefToCSharp.Model
  name: BasicType
  nameWithType: BasicType
  fullName: TypeScriptDefToCSharp.Model.BasicType
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TypeScriptDefToCSharp.Tool.IsDomType*
  commentId: Overload:TypeScriptDefToCSharp.Tool.IsDomType
  name: IsDomType
  nameWithType: Tool.IsDomType
  fullName: TypeScriptDefToCSharp.Tool.IsDomType
- uid: TypeScriptDefToCSharp.Tool.IsBasicType*
  commentId: Overload:TypeScriptDefToCSharp.Tool.IsBasicType
  name: IsBasicType
  nameWithType: Tool.IsBasicType
  fullName: TypeScriptDefToCSharp.Tool.IsBasicType
- uid: TypeScriptDefToCSharp.Tool.IsKeyWord*
  commentId: Overload:TypeScriptDefToCSharp.Tool.IsKeyWord
  name: IsKeyWord
  nameWithType: Tool.IsKeyWord
  fullName: TypeScriptDefToCSharp.Tool.IsKeyWord
- uid: TypeScriptDefToCSharp.Tool.ClearKeyWord*
  commentId: Overload:TypeScriptDefToCSharp.Tool.ClearKeyWord
  name: ClearKeyWord
  nameWithType: Tool.ClearKeyWord
  fullName: TypeScriptDefToCSharp.Tool.ClearKeyWord
- uid: TypeScriptDefToCSharp.Tool.GenerateUnionType*
  commentId: Overload:TypeScriptDefToCSharp.Tool.GenerateUnionType
  name: GenerateUnionType
  nameWithType: Tool.GenerateUnionType
  fullName: TypeScriptDefToCSharp.Tool.GenerateUnionType
- uid: TypeScriptDefToCSharp.Tool.Deserialize*
  commentId: Overload:TypeScriptDefToCSharp.Tool.Deserialize
  name: Deserialize
  nameWithType: Tool.Deserialize
  fullName: TypeScriptDefToCSharp.Tool.Deserialize
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TypeScriptDefToCSharp.Tool.Serialize*
  commentId: Overload:TypeScriptDefToCSharp.Tool.Serialize
  name: Serialize
  nameWithType: Tool.Serialize
  fullName: TypeScriptDefToCSharp.Tool.Serialize
- uid: TypeScriptDefToCSharp.Tool.GetHash*
  commentId: Overload:TypeScriptDefToCSharp.Tool.GetHash
  name: GetHash
  nameWithType: Tool.GetHash
  fullName: TypeScriptDefToCSharp.Tool.GetHash
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TypeScriptDefToCSharp.Tool.GetHashString*
  commentId: Overload:TypeScriptDefToCSharp.Tool.GetHashString
  name: GetHashString
  nameWithType: Tool.GetHashString
  fullName: TypeScriptDefToCSharp.Tool.GetHashString
- uid: TypeScriptDefToCSharp.Tool.JSArrayDimensionName*
  commentId: Overload:TypeScriptDefToCSharp.Tool.JSArrayDimensionName
  name: JSArrayDimensionName
  nameWithType: Tool.JSArrayDimensionName
  fullName: TypeScriptDefToCSharp.Tool.JSArrayDimensionName
