### YamlMime:ManagedReference
items:
- uid: TinyPG.Scanner
  commentId: T:TinyPG.Scanner
  id: Scanner
  parent: TinyPG
  children:
  - TinyPG.Scanner.#ctor(System.Action{System.String})
  - TinyPG.Scanner.CurrentColumn
  - TinyPG.Scanner.CurrentLine
  - TinyPG.Scanner.CurrentPosition
  - TinyPG.Scanner.EndPos
  - TinyPG.Scanner.GetToken(TinyPG.TokenType)
  - TinyPG.Scanner.Init(System.String)
  - TinyPG.Scanner.Input
  - TinyPG.Scanner.LookAhead(TinyPG.TokenType[])
  - TinyPG.Scanner.Patterns
  - TinyPG.Scanner.Scan(TinyPG.TokenType[])
  - TinyPG.Scanner.Skipped
  - TinyPG.Scanner.StartPos
  langs:
  - csharp
  - vb
  name: Scanner
  nameWithType: Scanner
  fullName: TinyPG.Scanner
  type: Class
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Scanner
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
    startLine: 28
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: public class Scanner
    content.vb: Public Class Scanner
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyPG.Scanner.Input
  commentId: F:TinyPG.Scanner.Input
  id: Input
  parent: TinyPG.Scanner
  langs:
  - csharp
  - vb
  name: Input
  nameWithType: Scanner.Input
  fullName: TinyPG.Scanner.Input
  type: Field
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Input
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
    startLine: 30
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: public string Input
    return:
      type: System.String
    content.vb: Public Input As String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyPG.Scanner.StartPos
  commentId: F:TinyPG.Scanner.StartPos
  id: StartPos
  parent: TinyPG.Scanner
  langs:
  - csharp
  - vb
  name: StartPos
  nameWithType: Scanner.StartPos
  fullName: TinyPG.Scanner.StartPos
  type: Field
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: StartPos
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
    startLine: 31
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: public int StartPos
    return:
      type: System.Int32
    content.vb: Public StartPos As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyPG.Scanner.EndPos
  commentId: F:TinyPG.Scanner.EndPos
  id: EndPos
  parent: TinyPG.Scanner
  langs:
  - csharp
  - vb
  name: EndPos
  nameWithType: Scanner.EndPos
  fullName: TinyPG.Scanner.EndPos
  type: Field
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EndPos
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
    startLine: 32
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: public int EndPos
    return:
      type: System.Int32
    content.vb: Public EndPos As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyPG.Scanner.CurrentLine
  commentId: F:TinyPG.Scanner.CurrentLine
  id: CurrentLine
  parent: TinyPG.Scanner
  langs:
  - csharp
  - vb
  name: CurrentLine
  nameWithType: Scanner.CurrentLine
  fullName: TinyPG.Scanner.CurrentLine
  type: Field
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CurrentLine
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
    startLine: 33
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: public int CurrentLine
    return:
      type: System.Int32
    content.vb: Public CurrentLine As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyPG.Scanner.CurrentColumn
  commentId: F:TinyPG.Scanner.CurrentColumn
  id: CurrentColumn
  parent: TinyPG.Scanner
  langs:
  - csharp
  - vb
  name: CurrentColumn
  nameWithType: Scanner.CurrentColumn
  fullName: TinyPG.Scanner.CurrentColumn
  type: Field
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CurrentColumn
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
    startLine: 34
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: public int CurrentColumn
    return:
      type: System.Int32
    content.vb: Public CurrentColumn As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyPG.Scanner.CurrentPosition
  commentId: F:TinyPG.Scanner.CurrentPosition
  id: CurrentPosition
  parent: TinyPG.Scanner
  langs:
  - csharp
  - vb
  name: CurrentPosition
  nameWithType: Scanner.CurrentPosition
  fullName: TinyPG.Scanner.CurrentPosition
  type: Field
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CurrentPosition
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
    startLine: 35
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: public int CurrentPosition
    return:
      type: System.Int32
    content.vb: Public CurrentPosition As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyPG.Scanner.Skipped
  commentId: F:TinyPG.Scanner.Skipped
  id: Skipped
  parent: TinyPG.Scanner
  langs:
  - csharp
  - vb
  name: Skipped
  nameWithType: Scanner.Skipped
  fullName: TinyPG.Scanner.Skipped
  type: Field
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Skipped
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
    startLine: 36
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: public List<Token> Skipped
    return:
      type: System.Collections.Generic.List{TinyPG.Token}
    content.vb: Public Skipped As List(Of Token)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyPG.Scanner.Patterns
  commentId: F:TinyPG.Scanner.Patterns
  id: Patterns
  parent: TinyPG.Scanner
  langs:
  - csharp
  - vb
  name: Patterns
  nameWithType: Scanner.Patterns
  fullName: TinyPG.Scanner.Patterns
  type: Field
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Patterns
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
    startLine: 37
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: public Dictionary<TokenType, Regex> Patterns
    return:
      type: System.Collections.Generic.Dictionary{TinyPG.TokenType,System.Text.RegularExpressions.Regex}
    content.vb: Public Patterns As Dictionary(Of TokenType, Regex)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyPG.Scanner.#ctor(System.Action{System.String})
  commentId: M:TinyPG.Scanner.#ctor(System.Action{System.String})
  id: '#ctor(System.Action{System.String})'
  parent: TinyPG.Scanner
  langs:
  - csharp
  - vb
  name: Scanner(Action<String>)
  nameWithType: Scanner.Scanner(Action<String>)
  fullName: TinyPG.Scanner.Scanner(System.Action<System.String>)
  type: Constructor
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
    startLine: 45
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: public Scanner(Action<string> methodToUpdateProgress)
    parameters:
    - id: methodToUpdateProgress
      type: System.Action{System.String}
    content.vb: Public Sub New(methodToUpdateProgress As Action(Of String))
  overload: TinyPG.Scanner.#ctor*
  nameWithType.vb: Scanner.Scanner(Action(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyPG.Scanner.Scanner(System.Action(Of System.String))
  name.vb: Scanner(Action(Of String))
- uid: TinyPG.Scanner.Init(System.String)
  commentId: M:TinyPG.Scanner.Init(System.String)
  id: Init(System.String)
  parent: TinyPG.Scanner
  langs:
  - csharp
  - vb
  name: Init(String)
  nameWithType: Scanner.Init(String)
  fullName: TinyPG.Scanner.Init(System.String)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Init
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
    startLine: 273
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: public void Init(string input)
    parameters:
    - id: input
      type: System.String
    content.vb: Public Sub Init(input As String)
  overload: TinyPG.Scanner.Init*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyPG.Scanner.GetToken(TinyPG.TokenType)
  commentId: M:TinyPG.Scanner.GetToken(TinyPG.TokenType)
  id: GetToken(TinyPG.TokenType)
  parent: TinyPG.Scanner
  langs:
  - csharp
  - vb
  name: GetToken(TokenType)
  nameWithType: Scanner.GetToken(TokenType)
  fullName: TinyPG.Scanner.GetToken(TinyPG.TokenType)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetToken
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
    startLine: 284
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: public Token GetToken(TokenType type)
    parameters:
    - id: type
      type: TinyPG.TokenType
    return:
      type: TinyPG.Token
    content.vb: Public Function GetToken(type As TokenType) As Token
  overload: TinyPG.Scanner.GetToken*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyPG.Scanner.Scan(TinyPG.TokenType[])
  commentId: M:TinyPG.Scanner.Scan(TinyPG.TokenType[])
  id: Scan(TinyPG.TokenType[])
  parent: TinyPG.Scanner
  langs:
  - csharp
  - vb
  name: Scan(TokenType[])
  nameWithType: Scanner.Scan(TokenType[])
  fullName: TinyPG.Scanner.Scan(TinyPG.TokenType[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Scan
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
    startLine: 296
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  summary: "\nexecutes a lookahead of the next token\nand will advance the scan on the input string\n"
  example: []
  syntax:
    content: public Token Scan(params TokenType[] expectedtokens)
    parameters:
    - id: expectedtokens
      type: TinyPG.TokenType[]
    return:
      type: TinyPG.Token
      description: ''
    content.vb: Public Function Scan(ParamArray expectedtokens As TokenType()) As Token
  overload: TinyPG.Scanner.Scan*
  nameWithType.vb: Scanner.Scan(TokenType())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyPG.Scanner.Scan(TinyPG.TokenType())
  name.vb: Scan(TokenType())
- uid: TinyPG.Scanner.LookAhead(TinyPG.TokenType[])
  commentId: M:TinyPG.Scanner.LookAhead(TinyPG.TokenType[])
  id: LookAhead(TinyPG.TokenType[])
  parent: TinyPG.Scanner
  langs:
  - csharp
  - vb
  name: LookAhead(TokenType[])
  nameWithType: Scanner.LookAhead(TokenType[])
  fullName: TinyPG.Scanner.LookAhead(TinyPG.TokenType[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: LookAhead
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Scanner.cs
    startLine: 309
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  summary: "\nreturns token with longest best match\n"
  example: []
  syntax:
    content: public Token LookAhead(params TokenType[] expectedtokens)
    parameters:
    - id: expectedtokens
      type: TinyPG.TokenType[]
    return:
      type: TinyPG.Token
      description: ''
    content.vb: Public Function LookAhead(ParamArray expectedtokens As TokenType()) As Token
  overload: TinyPG.Scanner.LookAhead*
  nameWithType.vb: Scanner.LookAhead(TokenType())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyPG.Scanner.LookAhead(TinyPG.TokenType())
  name.vb: LookAhead(TokenType())
references:
- uid: TinyPG
  commentId: N:TinyPG
  name: TinyPG
  nameWithType: TinyPG
  fullName: TinyPG
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.List{TinyPG.Token}
  commentId: T:System.Collections.Generic.List{TinyPG.Token}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Token>
  nameWithType: List<Token>
  fullName: System.Collections.Generic.List<TinyPG.Token>
  nameWithType.vb: List(Of Token)
  fullName.vb: System.Collections.Generic.List(Of TinyPG.Token)
  name.vb: List(Of Token)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyPG.Token
    name: Token
    nameWithType: Token
    fullName: TinyPG.Token
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyPG.Token
    name: Token
    nameWithType: Token
    fullName: TinyPG.Token
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.Dictionary{TinyPG.TokenType,System.Text.RegularExpressions.Regex}
  commentId: T:System.Collections.Generic.Dictionary{TinyPG.TokenType,System.Text.RegularExpressions.Regex}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TokenType, Regex>
  nameWithType: Dictionary<TokenType, Regex>
  fullName: System.Collections.Generic.Dictionary<TinyPG.TokenType, System.Text.RegularExpressions.Regex>
  nameWithType.vb: Dictionary(Of TokenType, Regex)
  fullName.vb: System.Collections.Generic.Dictionary(Of TinyPG.TokenType, System.Text.RegularExpressions.Regex)
  name.vb: Dictionary(Of TokenType, Regex)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyPG.TokenType
    name: TokenType
    nameWithType: TokenType
    fullName: TinyPG.TokenType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.RegularExpressions.Regex
    name: Regex
    nameWithType: Regex
    fullName: System.Text.RegularExpressions.Regex
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyPG.TokenType
    name: TokenType
    nameWithType: TokenType
    fullName: TinyPG.TokenType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.RegularExpressions.Regex
    name: Regex
    nameWithType: Regex
    fullName: System.Text.RegularExpressions.Regex
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.Scanner.#ctor*
  commentId: Overload:TinyPG.Scanner.#ctor
  name: Scanner
  nameWithType: Scanner.Scanner
  fullName: TinyPG.Scanner.Scanner
- uid: System.Action{System.String}
  commentId: T:System.Action{System.String}
  parent: System
  definition: System.Action`1
  name: Action<String>
  nameWithType: Action<String>
  fullName: System.Action<System.String>
  nameWithType.vb: Action(Of String)
  fullName.vb: System.Action(Of System.String)
  name.vb: Action(Of String)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.Scanner.Init*
  commentId: Overload:TinyPG.Scanner.Init
  name: Init
  nameWithType: Scanner.Init
  fullName: TinyPG.Scanner.Init
- uid: TinyPG.Scanner.GetToken*
  commentId: Overload:TinyPG.Scanner.GetToken
  name: GetToken
  nameWithType: Scanner.GetToken
  fullName: TinyPG.Scanner.GetToken
- uid: TinyPG.TokenType
  commentId: T:TinyPG.TokenType
  parent: TinyPG
  name: TokenType
  nameWithType: TokenType
  fullName: TinyPG.TokenType
- uid: TinyPG.Token
  commentId: T:TinyPG.Token
  parent: TinyPG
  name: Token
  nameWithType: Token
  fullName: TinyPG.Token
- uid: TinyPG.Scanner.Scan*
  commentId: Overload:TinyPG.Scanner.Scan
  name: Scan
  nameWithType: Scanner.Scan
  fullName: TinyPG.Scanner.Scan
- uid: TinyPG.TokenType[]
  isExternal: true
  name: TokenType[]
  nameWithType: TokenType[]
  fullName: TinyPG.TokenType[]
  nameWithType.vb: TokenType()
  fullName.vb: TinyPG.TokenType()
  name.vb: TokenType()
  spec.csharp:
  - uid: TinyPG.TokenType
    name: TokenType
    nameWithType: TokenType
    fullName: TinyPG.TokenType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyPG.TokenType
    name: TokenType
    nameWithType: TokenType
    fullName: TinyPG.TokenType
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyPG.Scanner.LookAhead*
  commentId: Overload:TinyPG.Scanner.LookAhead
  name: LookAhead
  nameWithType: Scanner.LookAhead
  fullName: TinyPG.Scanner.LookAhead
