### YamlMime:ManagedReference
items:
- uid: TypeScriptDefToCSharp.Model.AnonymousType
  commentId: T:TypeScriptDefToCSharp.Model.AnonymousType
  id: AnonymousType
  parent: TypeScriptDefToCSharp.Model
  children:
  - TypeScriptDefToCSharp.Model.AnonymousType.#ctor
  - TypeScriptDefToCSharp.Model.AnonymousType.#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  - TypeScriptDefToCSharp.Model.AnonymousType.AnonID
  - TypeScriptDefToCSharp.Model.AnonymousType.Anons
  - TypeScriptDefToCSharp.Model.AnonymousType.Class
  - TypeScriptDefToCSharp.Model.AnonymousType.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  - TypeScriptDefToCSharp.Model.AnonymousType.Name
  - TypeScriptDefToCSharp.Model.AnonymousType.New(System.String)
  - TypeScriptDefToCSharp.Model.AnonymousType.ToString
  langs:
  - csharp
  - vb
  name: AnonymousType
  nameWithType: AnonymousType
  fullName: TypeScriptDefToCSharp.Model.AnonymousType
  type: Class
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/AnonymousType.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: AnonymousType
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/AnonymousType.cs
    startLine: 27
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: 'public class AnonymousType : TSType'
    content.vb: >-
      Public Class AnonymousType
          Implements TSType
  inheritance:
  - System.Object
  implements:
  - TypeScriptDefToCSharp.Model.TSType
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TypeScriptDefToCSharp.Model.AnonymousType.Name
  commentId: P:TypeScriptDefToCSharp.Model.AnonymousType.Name
  id: Name
  parent: TypeScriptDefToCSharp.Model.AnonymousType
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: AnonymousType.Name
  fullName: TypeScriptDefToCSharp.Model.AnonymousType.Name
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/AnonymousType.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Name
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/AnonymousType.cs
    startLine: 29
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: TypeScriptDefToCSharp.Model.AnonymousType.Name*
  implements:
  - TypeScriptDefToCSharp.Model.TSType.Name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.AnonymousType.Class
  commentId: P:TypeScriptDefToCSharp.Model.AnonymousType.Class
  id: Class
  parent: TypeScriptDefToCSharp.Model.AnonymousType
  langs:
  - csharp
  - vb
  name: Class
  nameWithType: AnonymousType.Class
  fullName: TypeScriptDefToCSharp.Model.AnonymousType.Class
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/AnonymousType.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Class
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/AnonymousType.cs
    startLine: 34
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public Class Class { get; set; }
    parameters: []
    return:
      type: TypeScriptDefToCSharp.Model.Class
    content.vb: 'Public Property Class As '
  overload: TypeScriptDefToCSharp.Model.AnonymousType.Class*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.AnonymousType.AnonID
  commentId: F:TypeScriptDefToCSharp.Model.AnonymousType.AnonID
  id: AnonID
  parent: TypeScriptDefToCSharp.Model.AnonymousType
  langs:
  - csharp
  - vb
  name: AnonID
  nameWithType: AnonymousType.AnonID
  fullName: TypeScriptDefToCSharp.Model.AnonymousType.AnonID
  type: Field
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/AnonymousType.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: AnonID
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/AnonymousType.cs
    startLine: 36
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public static int AnonID
    return:
      type: System.Int32
    content.vb: Public Shared AnonID As Integer
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TypeScriptDefToCSharp.Model.AnonymousType.Anons
  commentId: F:TypeScriptDefToCSharp.Model.AnonymousType.Anons
  id: Anons
  parent: TypeScriptDefToCSharp.Model.AnonymousType
  langs:
  - csharp
  - vb
  name: Anons
  nameWithType: AnonymousType.Anons
  fullName: TypeScriptDefToCSharp.Model.AnonymousType.Anons
  type: Field
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/AnonymousType.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Anons
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/AnonymousType.cs
    startLine: 37
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public static List<AnonymousType> Anons
    return:
      type: System.Collections.Generic.List{TypeScriptDefToCSharp.Model.AnonymousType}
    content.vb: Public Shared Anons As List(Of AnonymousType)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TypeScriptDefToCSharp.Model.AnonymousType.#ctor
  commentId: M:TypeScriptDefToCSharp.Model.AnonymousType.#ctor
  id: '#ctor'
  parent: TypeScriptDefToCSharp.Model.AnonymousType
  langs:
  - csharp
  - vb
  name: AnonymousType()
  nameWithType: AnonymousType.AnonymousType()
  fullName: TypeScriptDefToCSharp.Model.AnonymousType.AnonymousType()
  type: Constructor
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/AnonymousType.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/AnonymousType.cs
    startLine: 39
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public AnonymousType()
    content.vb: Public Sub New
  overload: TypeScriptDefToCSharp.Model.AnonymousType.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.AnonymousType.#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.AnonymousType.#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  id: '#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)'
  parent: TypeScriptDefToCSharp.Model.AnonymousType
  langs:
  - csharp
  - vb
  name: AnonymousType(XElement, TypeScriptDefContext)
  nameWithType: AnonymousType.AnonymousType(XElement, TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.AnonymousType.AnonymousType(System.Xml.Linq.XElement, TypeScriptDefToCSharp.TypeScriptDefContext)
  type: Constructor
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/AnonymousType.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/AnonymousType.cs
    startLine: 44
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public AnonymousType(XElement elem, TypeScriptDefContext context)
    parameters:
    - id: elem
      type: System.Xml.Linq.XElement
    - id: context
      type: TypeScriptDefToCSharp.TypeScriptDefContext
    content.vb: Public Sub New(elem As XElement, context As TypeScriptDefContext)
  overload: TypeScriptDefToCSharp.Model.AnonymousType.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.AnonymousType.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.AnonymousType.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  id: Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  parent: TypeScriptDefToCSharp.Model.AnonymousType
  langs:
  - csharp
  - vb
  name: Export(TypeScriptDefContext)
  nameWithType: AnonymousType.Export(TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.AnonymousType.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/AnonymousType.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Export
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/AnonymousType.cs
    startLine: 55
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public void Export(TypeScriptDefContext context)
    parameters:
    - id: context
      type: TypeScriptDefToCSharp.TypeScriptDefContext
    content.vb: Public Sub Export(context As TypeScriptDefContext)
  overload: TypeScriptDefToCSharp.Model.AnonymousType.Export*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.AnonymousType.ToString
  commentId: M:TypeScriptDefToCSharp.Model.AnonymousType.ToString
  id: ToString
  parent: TypeScriptDefToCSharp.Model.AnonymousType
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: AnonymousType.ToString()
  fullName: TypeScriptDefToCSharp.Model.AnonymousType.ToString()
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/AnonymousType.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ToString
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/AnonymousType.cs
    startLine: 60
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: TypeScriptDefToCSharp.Model.AnonymousType.ToString*
  implements:
  - TypeScriptDefToCSharp.Model.TSType.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TypeScriptDefToCSharp.Model.AnonymousType.New(System.String)
  commentId: M:TypeScriptDefToCSharp.Model.AnonymousType.New(System.String)
  id: New(System.String)
  parent: TypeScriptDefToCSharp.Model.AnonymousType
  langs:
  - csharp
  - vb
  name: New(String)
  nameWithType: AnonymousType.New(String)
  fullName: TypeScriptDefToCSharp.Model.AnonymousType.New(System.String)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/AnonymousType.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: New
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/AnonymousType.cs
    startLine: 65
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public string New(string jsObj)
    parameters:
    - id: jsObj
      type: System.String
    return:
      type: System.String
    content.vb: Public Function New(jsObj As String) As String
  overload: TypeScriptDefToCSharp.Model.AnonymousType.New*
  implements:
  - TypeScriptDefToCSharp.Model.TSType.New(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TypeScriptDefToCSharp.Model
  commentId: N:TypeScriptDefToCSharp.Model
  name: TypeScriptDefToCSharp.Model
  nameWithType: TypeScriptDefToCSharp.Model
  fullName: TypeScriptDefToCSharp.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TypeScriptDefToCSharp.Model.TSType
  commentId: T:TypeScriptDefToCSharp.Model.TSType
  parent: TypeScriptDefToCSharp.Model
  name: TSType
  nameWithType: TSType
  fullName: TypeScriptDefToCSharp.Model.TSType
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: TypeScriptDefToCSharp.Model.AnonymousType.Name*
  commentId: Overload:TypeScriptDefToCSharp.Model.AnonymousType.Name
  name: Name
  nameWithType: AnonymousType.Name
  fullName: TypeScriptDefToCSharp.Model.AnonymousType.Name
- uid: TypeScriptDefToCSharp.Model.TSType.Name
  commentId: P:TypeScriptDefToCSharp.Model.TSType.Name
  parent: TypeScriptDefToCSharp.Model.TSType
  name: Name
  nameWithType: TSType.Name
  fullName: TypeScriptDefToCSharp.Model.TSType.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TypeScriptDefToCSharp.Model.AnonymousType.Class*
  commentId: Overload:TypeScriptDefToCSharp.Model.AnonymousType.Class
  name: Class
  nameWithType: AnonymousType.Class
  fullName: TypeScriptDefToCSharp.Model.AnonymousType.Class
- uid: TypeScriptDefToCSharp.Model.Class
  commentId: T:TypeScriptDefToCSharp.Model.Class
  parent: TypeScriptDefToCSharp.Model
  name: Class
  nameWithType: Class
  fullName: TypeScriptDefToCSharp.Model.Class
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.List{TypeScriptDefToCSharp.Model.AnonymousType}
  commentId: T:System.Collections.Generic.List{TypeScriptDefToCSharp.Model.AnonymousType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<AnonymousType>
  nameWithType: List<AnonymousType>
  fullName: System.Collections.Generic.List<TypeScriptDefToCSharp.Model.AnonymousType>
  nameWithType.vb: List(Of AnonymousType)
  fullName.vb: System.Collections.Generic.List(Of TypeScriptDefToCSharp.Model.AnonymousType)
  name.vb: List(Of AnonymousType)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.AnonymousType
    name: AnonymousType
    nameWithType: AnonymousType
    fullName: TypeScriptDefToCSharp.Model.AnonymousType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.AnonymousType
    name: AnonymousType
    nameWithType: AnonymousType
    fullName: TypeScriptDefToCSharp.Model.AnonymousType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TypeScriptDefToCSharp.Model.AnonymousType.#ctor*
  commentId: Overload:TypeScriptDefToCSharp.Model.AnonymousType.#ctor
  name: AnonymousType
  nameWithType: AnonymousType.AnonymousType
  fullName: TypeScriptDefToCSharp.Model.AnonymousType.AnonymousType
- uid: System.Xml.Linq.XElement
  commentId: T:System.Xml.Linq.XElement
  parent: System.Xml.Linq
  isExternal: true
  name: XElement
  nameWithType: XElement
  fullName: System.Xml.Linq.XElement
- uid: TypeScriptDefToCSharp.TypeScriptDefContext
  commentId: T:TypeScriptDefToCSharp.TypeScriptDefContext
  parent: TypeScriptDefToCSharp
  name: TypeScriptDefContext
  nameWithType: TypeScriptDefContext
  fullName: TypeScriptDefToCSharp.TypeScriptDefContext
- uid: System.Xml.Linq
  commentId: N:System.Xml.Linq
  isExternal: true
  name: System.Xml.Linq
  nameWithType: System.Xml.Linq
  fullName: System.Xml.Linq
- uid: TypeScriptDefToCSharp
  commentId: N:TypeScriptDefToCSharp
  name: TypeScriptDefToCSharp
  nameWithType: TypeScriptDefToCSharp
  fullName: TypeScriptDefToCSharp
- uid: TypeScriptDefToCSharp.Model.AnonymousType.Export*
  commentId: Overload:TypeScriptDefToCSharp.Model.AnonymousType.Export
  name: Export
  nameWithType: AnonymousType.Export
  fullName: TypeScriptDefToCSharp.Model.AnonymousType.Export
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.AnonymousType.ToString*
  commentId: Overload:TypeScriptDefToCSharp.Model.AnonymousType.ToString
  name: ToString
  nameWithType: AnonymousType.ToString
  fullName: TypeScriptDefToCSharp.Model.AnonymousType.ToString
- uid: TypeScriptDefToCSharp.Model.TSType.ToString
  commentId: M:TypeScriptDefToCSharp.Model.TSType.ToString
  parent: TypeScriptDefToCSharp.Model.TSType
  name: ToString()
  nameWithType: TSType.ToString()
  fullName: TypeScriptDefToCSharp.Model.TSType.ToString()
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.TSType.ToString
    name: ToString
    nameWithType: TSType.ToString
    fullName: TypeScriptDefToCSharp.Model.TSType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.TSType.ToString
    name: ToString
    nameWithType: TSType.ToString
    fullName: TypeScriptDefToCSharp.Model.TSType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.AnonymousType.New*
  commentId: Overload:TypeScriptDefToCSharp.Model.AnonymousType.New
  name: New
  nameWithType: AnonymousType.New
  fullName: TypeScriptDefToCSharp.Model.AnonymousType.New
- uid: TypeScriptDefToCSharp.Model.TSType.New(System.String)
  commentId: M:TypeScriptDefToCSharp.Model.TSType.New(System.String)
  parent: TypeScriptDefToCSharp.Model.TSType
  isExternal: true
  name: New(String)
  nameWithType: TSType.New(String)
  fullName: TypeScriptDefToCSharp.Model.TSType.New(System.String)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.TSType.New(System.String)
    name: New
    nameWithType: TSType.New
    fullName: TypeScriptDefToCSharp.Model.TSType.New
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.TSType.New(System.String)
    name: New
    nameWithType: TSType.New
    fullName: TypeScriptDefToCSharp.Model.TSType.New
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
