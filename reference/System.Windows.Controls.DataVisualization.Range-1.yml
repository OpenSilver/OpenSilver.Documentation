### YamlMime:ManagedReference
items:
- uid: System.Windows.Controls.DataVisualization.Range`1
  commentId: T:System.Windows.Controls.DataVisualization.Range`1
  id: Range`1
  parent: System.Windows.Controls.DataVisualization
  children:
  - System.Windows.Controls.DataVisualization.Range`1.#ctor(`0,`0)
  - System.Windows.Controls.DataVisualization.Range`1.Add(System.Windows.Controls.DataVisualization.Range{`0})
  - System.Windows.Controls.DataVisualization.Range`1.Contains(`0)
  - System.Windows.Controls.DataVisualization.Range`1.Equals(System.Object)
  - System.Windows.Controls.DataVisualization.Range`1.Equals(System.Windows.Controls.DataVisualization.Range{`0})
  - System.Windows.Controls.DataVisualization.Range`1.GetHashCode
  - System.Windows.Controls.DataVisualization.Range`1.HasData
  - System.Windows.Controls.DataVisualization.Range`1.IntersectsWith(System.Windows.Controls.DataVisualization.Range{`0})
  - System.Windows.Controls.DataVisualization.Range`1.Maximum
  - System.Windows.Controls.DataVisualization.Range`1.Minimum
  - System.Windows.Controls.DataVisualization.Range`1.op_Equality(System.Windows.Controls.DataVisualization.Range{`0},System.Windows.Controls.DataVisualization.Range{`0})
  - System.Windows.Controls.DataVisualization.Range`1.op_Inequality(System.Windows.Controls.DataVisualization.Range{`0},System.Windows.Controls.DataVisualization.Range{`0})
  - System.Windows.Controls.DataVisualization.Range`1.ToString
  langs:
  - csharp
  - vb
  name: Range<T>
  nameWithType: Range<T>
  fullName: System.Windows.Controls.DataVisualization.Range<T>
  type: Struct
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/Range.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Range
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/Range.cs
    startLine: 15
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nA range of values.\n"
  example: []
  syntax:
    content: >-
      public struct Range<T>
          where T : IComparable
    typeParameters:
    - id: T
      description: The type of the values.
    content.vb: Public Structure Range(Of T As IComparable)
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType.vb: Range(Of T)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T)
  name.vb: Range(Of T)
- uid: System.Windows.Controls.DataVisualization.Range`1.HasData
  commentId: P:System.Windows.Controls.DataVisualization.Range`1.HasData
  id: HasData
  parent: System.Windows.Controls.DataVisualization.Range`1
  langs:
  - csharp
  - vb
  name: HasData
  nameWithType: Range<T>.HasData
  fullName: System.Windows.Controls.DataVisualization.Range<T>.HasData
  type: Property
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/Range.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: HasData
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/Range.cs
    startLine: 26
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nGets a value indicating whether the range is empty or not.\n"
  example: []
  syntax:
    content: public readonly bool HasData { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasData As Boolean
  overload: System.Windows.Controls.DataVisualization.Range`1.HasData*
  nameWithType.vb: Range(Of T).HasData
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).HasData
- uid: System.Windows.Controls.DataVisualization.Range`1.Maximum
  commentId: P:System.Windows.Controls.DataVisualization.Range`1.Maximum
  id: Maximum
  parent: System.Windows.Controls.DataVisualization.Range`1
  langs:
  - csharp
  - vb
  name: Maximum
  nameWithType: Range<T>.Maximum
  fullName: System.Windows.Controls.DataVisualization.Range<T>.Maximum
  type: Property
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/Range.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Maximum
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/Range.cs
    startLine: 42
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nGets the maximum value in the range.\n"
  example: []
  syntax:
    content: public readonly T Maximum { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public ReadOnly Property Maximum As T
  overload: System.Windows.Controls.DataVisualization.Range`1.Maximum*
  nameWithType.vb: Range(Of T).Maximum
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).Maximum
- uid: System.Windows.Controls.DataVisualization.Range`1.Minimum
  commentId: P:System.Windows.Controls.DataVisualization.Range`1.Minimum
  id: Minimum
  parent: System.Windows.Controls.DataVisualization.Range`1
  langs:
  - csharp
  - vb
  name: Minimum
  nameWithType: Range<T>.Minimum
  fullName: System.Windows.Controls.DataVisualization.Range<T>.Minimum
  type: Property
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/Range.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Minimum
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/Range.cs
    startLine: 62
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nGets the minimum value in the range.\n"
  example: []
  syntax:
    content: public readonly T Minimum { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public ReadOnly Property Minimum As T
  overload: System.Windows.Controls.DataVisualization.Range`1.Minimum*
  nameWithType.vb: Range(Of T).Minimum
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).Minimum
- uid: System.Windows.Controls.DataVisualization.Range`1.#ctor(`0,`0)
  commentId: M:System.Windows.Controls.DataVisualization.Range`1.#ctor(`0,`0)
  id: '#ctor(`0,`0)'
  parent: System.Windows.Controls.DataVisualization.Range`1
  langs:
  - csharp
  - vb
  name: Range(T, T)
  nameWithType: Range<T>.Range(T, T)
  fullName: System.Windows.Controls.DataVisualization.Range<T>.Range(T, T)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/Range.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/Range.cs
    startLine: 79
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nInitializes a new instance of the Range class.\n"
  example: []
  syntax:
    content: public Range(T minimum, T maximum)
    parameters:
    - id: minimum
      type: '{T}'
      description: The minimum value.
    - id: maximum
      type: '{T}'
      description: The maximum value.
    content.vb: Public Sub New(minimum As T, maximum As T)
  overload: System.Windows.Controls.DataVisualization.Range`1.#ctor*
  nameWithType.vb: Range(Of T).Range(T, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).Range(T, T)
- uid: System.Windows.Controls.DataVisualization.Range`1.op_Equality(System.Windows.Controls.DataVisualization.Range{`0},System.Windows.Controls.DataVisualization.Range{`0})
  commentId: M:System.Windows.Controls.DataVisualization.Range`1.op_Equality(System.Windows.Controls.DataVisualization.Range{`0},System.Windows.Controls.DataVisualization.Range{`0})
  id: op_Equality(System.Windows.Controls.DataVisualization.Range{`0},System.Windows.Controls.DataVisualization.Range{`0})
  parent: System.Windows.Controls.DataVisualization.Range`1
  langs:
  - csharp
  - vb
  name: Equality(Range<T>, Range<T>)
  nameWithType: Range<T>.Equality(Range<T>, Range<T>)
  fullName: System.Windows.Controls.DataVisualization.Range<T>.Equality(System.Windows.Controls.DataVisualization.Range<T>, System.Windows.Controls.DataVisualization.Range<T>)
  type: Operator
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/Range.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Equality
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/Range.cs
    startLine: 108
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nCompare two ranges and return a value indicating whether they are\nequal.\n"
  example: []
  syntax:
    content: public static bool operator ==(Range<T> leftRange, Range<T> rightRange)
    parameters:
    - id: leftRange
      type: System.Windows.Controls.DataVisualization.Range`1
      description: Left-hand side range.
    - id: rightRange
      type: System.Windows.Controls.DataVisualization.Range`1
      description: Right-hand side range.
    return:
      type: System.Boolean
      description: A value indicating whether the ranges are equal.
    content.vb: Public Shared Operator =(leftRange As Range(Of T), rightRange As Range(Of T)) As Boolean
  overload: System.Windows.Controls.DataVisualization.Range`1.op_Equality*
  nameWithType.vb: Range(Of T).Equality(Range(Of T), Range(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).Equality(System.Windows.Controls.DataVisualization.Range(Of T), System.Windows.Controls.DataVisualization.Range(Of T))
  name.vb: Equality(Range(Of T), Range(Of T))
- uid: System.Windows.Controls.DataVisualization.Range`1.op_Inequality(System.Windows.Controls.DataVisualization.Range{`0},System.Windows.Controls.DataVisualization.Range{`0})
  commentId: M:System.Windows.Controls.DataVisualization.Range`1.op_Inequality(System.Windows.Controls.DataVisualization.Range{`0},System.Windows.Controls.DataVisualization.Range{`0})
  id: op_Inequality(System.Windows.Controls.DataVisualization.Range{`0},System.Windows.Controls.DataVisualization.Range{`0})
  parent: System.Windows.Controls.DataVisualization.Range`1
  langs:
  - csharp
  - vb
  name: Inequality(Range<T>, Range<T>)
  nameWithType: Range<T>.Inequality(Range<T>, Range<T>)
  fullName: System.Windows.Controls.DataVisualization.Range<T>.Inequality(System.Windows.Controls.DataVisualization.Range<T>, System.Windows.Controls.DataVisualization.Range<T>)
  type: Operator
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/Range.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Inequality
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/Range.cs
    startLine: 130
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nCompare two ranges and return a value indicating whether they are\nnot equal.\n"
  example: []
  syntax:
    content: public static bool operator !=(Range<T> leftRange, Range<T> rightRange)
    parameters:
    - id: leftRange
      type: System.Windows.Controls.DataVisualization.Range`1
      description: Left-hand side range.
    - id: rightRange
      type: System.Windows.Controls.DataVisualization.Range`1
      description: Right-hand side range.
    return:
      type: System.Boolean
      description: >
        A value indicating whether the ranges are not equal.
    content.vb: Public Shared Operator <>(leftRange As Range(Of T), rightRange As Range(Of T)) As Boolean
  overload: System.Windows.Controls.DataVisualization.Range`1.op_Inequality*
  nameWithType.vb: Range(Of T).Inequality(Range(Of T), Range(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).Inequality(System.Windows.Controls.DataVisualization.Range(Of T), System.Windows.Controls.DataVisualization.Range(Of T))
  name.vb: Inequality(Range(Of T), Range(Of T))
- uid: System.Windows.Controls.DataVisualization.Range`1.Add(System.Windows.Controls.DataVisualization.Range{`0})
  commentId: M:System.Windows.Controls.DataVisualization.Range`1.Add(System.Windows.Controls.DataVisualization.Range{`0})
  id: Add(System.Windows.Controls.DataVisualization.Range{`0})
  parent: System.Windows.Controls.DataVisualization.Range`1
  langs:
  - csharp
  - vb
  name: Add(Range<T>)
  nameWithType: Range<T>.Add(Range<T>)
  fullName: System.Windows.Controls.DataVisualization.Range<T>.Add(System.Windows.Controls.DataVisualization.Range<T>)
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/Range.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Add
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/Range.cs
    startLine: 141
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nAdds a range to the current range.\n"
  example: []
  syntax:
    content: public Range<T> Add(Range<T> range)
    parameters:
    - id: range
      type: System.Windows.Controls.DataVisualization.Range`1
      description: A range to add to the current range.
    return:
      type: System.Windows.Controls.DataVisualization.Range`1
      description: >-
        A new range that encompasses the instance range and the

        range parameter.
    content.vb: Public Function Add(range As Range(Of T)) As Range(Of T)
  overload: System.Windows.Controls.DataVisualization.Range`1.Add*
  nameWithType.vb: Range(Of T).Add(Range(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).Add(System.Windows.Controls.DataVisualization.Range(Of T))
  name.vb: Add(Range(Of T))
- uid: System.Windows.Controls.DataVisualization.Range`1.Equals(System.Windows.Controls.DataVisualization.Range{`0})
  commentId: M:System.Windows.Controls.DataVisualization.Range`1.Equals(System.Windows.Controls.DataVisualization.Range{`0})
  id: Equals(System.Windows.Controls.DataVisualization.Range{`0})
  parent: System.Windows.Controls.DataVisualization.Range`1
  langs:
  - csharp
  - vb
  name: Equals(Range<T>)
  nameWithType: Range<T>.Equals(Range<T>)
  fullName: System.Windows.Controls.DataVisualization.Range<T>.Equals(System.Windows.Controls.DataVisualization.Range<T>)
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/Range.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Equals
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/Range.cs
    startLine: 161
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nCompares the range to another range.\n"
  example: []
  syntax:
    content: public bool Equals(Range<T> range)
    parameters:
    - id: range
      type: System.Windows.Controls.DataVisualization.Range`1
      description: A different range.
    return:
      type: System.Boolean
      description: A value indicating whether the ranges are equal.
    content.vb: Public Function Equals(range As Range(Of T)) As Boolean
  overload: System.Windows.Controls.DataVisualization.Range`1.Equals*
  nameWithType.vb: Range(Of T).Equals(Range(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).Equals(System.Windows.Controls.DataVisualization.Range(Of T))
  name.vb: Equals(Range(Of T))
- uid: System.Windows.Controls.DataVisualization.Range`1.Equals(System.Object)
  commentId: M:System.Windows.Controls.DataVisualization.Range`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.Controls.DataVisualization.Range`1
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Range<T>.Equals(Object)
  fullName: System.Windows.Controls.DataVisualization.Range<T>.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/Range.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Equals
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/Range.cs
    startLine: 173
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nCompares the range to an object.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: Another object.
    return:
      type: System.Boolean
      description: >
        A value indicating whether the other object is a range,

        and if so, whether that range is equal to the instance range.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: System.Windows.Controls.DataVisualization.Range`1.Equals*
  nameWithType.vb: Range(Of T).Equals(Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).Equals(System.Object)
- uid: System.Windows.Controls.DataVisualization.Range`1.Contains(`0)
  commentId: M:System.Windows.Controls.DataVisualization.Range`1.Contains(`0)
  id: Contains(`0)
  parent: System.Windows.Controls.DataVisualization.Range`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: Range<T>.Contains(T)
  fullName: System.Windows.Controls.DataVisualization.Range<T>.Contains(T)
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/Range.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Contains
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/Range.cs
    startLine: 188
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nReturns a value indicating whether a value is within a range.\n"
  example: []
  syntax:
    content: public bool Contains(T value)
    parameters:
    - id: value
      type: '{T}'
      description: The value.
    return:
      type: System.Boolean
      description: Whether the value is within the range.
    content.vb: Public Function Contains(value As T) As Boolean
  overload: System.Windows.Controls.DataVisualization.Range`1.Contains*
  nameWithType.vb: Range(Of T).Contains(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).Contains(T)
- uid: System.Windows.Controls.DataVisualization.Range`1.IntersectsWith(System.Windows.Controls.DataVisualization.Range{`0})
  commentId: M:System.Windows.Controls.DataVisualization.Range`1.IntersectsWith(System.Windows.Controls.DataVisualization.Range{`0})
  id: IntersectsWith(System.Windows.Controls.DataVisualization.Range{`0})
  parent: System.Windows.Controls.DataVisualization.Range`1
  langs:
  - csharp
  - vb
  name: IntersectsWith(Range<T>)
  nameWithType: Range<T>.IntersectsWith(Range<T>)
  fullName: System.Windows.Controls.DataVisualization.Range<T>.IntersectsWith(System.Windows.Controls.DataVisualization.Range<T>)
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/Range.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IntersectsWith
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/Range.cs
    startLine: 222
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nReturns a value indicating whether two ranges intersect.\n"
  example: []
  syntax:
    content: public bool IntersectsWith(Range<T> range)
    parameters:
    - id: range
      type: System.Windows.Controls.DataVisualization.Range`1
      description: The range to compare against this range.
    return:
      type: System.Boolean
      description: A value indicating whether the ranges intersect.
    content.vb: Public Function IntersectsWith(range As Range(Of T)) As Boolean
  overload: System.Windows.Controls.DataVisualization.Range`1.IntersectsWith*
  nameWithType.vb: Range(Of T).IntersectsWith(Range(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).IntersectsWith(System.Windows.Controls.DataVisualization.Range(Of T))
  name.vb: IntersectsWith(Range(Of T))
- uid: System.Windows.Controls.DataVisualization.Range`1.GetHashCode
  commentId: M:System.Windows.Controls.DataVisualization.Range`1.GetHashCode
  id: GetHashCode
  parent: System.Windows.Controls.DataVisualization.Range`1
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Range<T>.GetHashCode()
  fullName: System.Windows.Controls.DataVisualization.Range<T>.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/Range.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetHashCode
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/Range.cs
    startLine: 241
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nComputes a hash code value.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code value.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: System.Windows.Controls.DataVisualization.Range`1.GetHashCode*
  nameWithType.vb: Range(Of T).GetHashCode()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).GetHashCode()
- uid: System.Windows.Controls.DataVisualization.Range`1.ToString
  commentId: M:System.Windows.Controls.DataVisualization.Range`1.ToString
  id: ToString
  parent: System.Windows.Controls.DataVisualization.Range`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Range<T>.ToString()
  fullName: System.Windows.Controls.DataVisualization.Range<T>.ToString()
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/Range.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ToString
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/Range.cs
    startLine: 257
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nReturns the string representation of the range.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: The string representation of the range.
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: System.Windows.Controls.DataVisualization.Range`1.ToString*
  nameWithType.vb: Range(Of T).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).ToString()
references:
- uid: System.Windows.Controls.DataVisualization
  commentId: N:System.Windows.Controls.DataVisualization
  name: System.Windows.Controls.DataVisualization
  nameWithType: System.Windows.Controls.DataVisualization
  fullName: System.Windows.Controls.DataVisualization
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.Windows.Controls.DataVisualization.Range`1.HasData*
  commentId: Overload:System.Windows.Controls.DataVisualization.Range`1.HasData
  name: HasData
  nameWithType: Range<T>.HasData
  fullName: System.Windows.Controls.DataVisualization.Range<T>.HasData
  nameWithType.vb: Range(Of T).HasData
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).HasData
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Controls.DataVisualization.Range`1.Maximum*
  commentId: Overload:System.Windows.Controls.DataVisualization.Range`1.Maximum
  name: Maximum
  nameWithType: Range<T>.Maximum
  fullName: System.Windows.Controls.DataVisualization.Range<T>.Maximum
  nameWithType.vb: Range(Of T).Maximum
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).Maximum
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Windows.Controls.DataVisualization.Range`1.Minimum*
  commentId: Overload:System.Windows.Controls.DataVisualization.Range`1.Minimum
  name: Minimum
  nameWithType: Range<T>.Minimum
  fullName: System.Windows.Controls.DataVisualization.Range<T>.Minimum
  nameWithType.vb: Range(Of T).Minimum
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).Minimum
- uid: System.Windows.Controls.DataVisualization.Range`1.#ctor*
  commentId: Overload:System.Windows.Controls.DataVisualization.Range`1.#ctor
  name: Range
  nameWithType: Range<T>.Range
  fullName: System.Windows.Controls.DataVisualization.Range<T>.Range
  nameWithType.vb: Range(Of T).Range
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).Range
- uid: System.Windows.Controls.DataVisualization.Range`1.op_Equality*
  commentId: Overload:System.Windows.Controls.DataVisualization.Range`1.op_Equality
  name: Equality
  nameWithType: Range<T>.Equality
  fullName: System.Windows.Controls.DataVisualization.Range<T>.Equality
  nameWithType.vb: Range(Of T).Equality
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).Equality
- uid: System.Windows.Controls.DataVisualization.Range`1
  commentId: T:System.Windows.Controls.DataVisualization.Range`1
  parent: System.Windows.Controls.DataVisualization
  name: Range<T>
  nameWithType: Range<T>
  fullName: System.Windows.Controls.DataVisualization.Range<T>
  nameWithType.vb: Range(Of T)
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T)
  name.vb: Range(Of T)
  spec.csharp:
  - uid: System.Windows.Controls.DataVisualization.Range`1
    name: Range
    nameWithType: Range
    fullName: System.Windows.Controls.DataVisualization.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Windows.Controls.DataVisualization.Range`1
    name: Range
    nameWithType: Range
    fullName: System.Windows.Controls.DataVisualization.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Controls.DataVisualization.Range`1.op_Inequality*
  commentId: Overload:System.Windows.Controls.DataVisualization.Range`1.op_Inequality
  name: Inequality
  nameWithType: Range<T>.Inequality
  fullName: System.Windows.Controls.DataVisualization.Range<T>.Inequality
  nameWithType.vb: Range(Of T).Inequality
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).Inequality
- uid: System.Windows.Controls.DataVisualization.Range`1.Add*
  commentId: Overload:System.Windows.Controls.DataVisualization.Range`1.Add
  name: Add
  nameWithType: Range<T>.Add
  fullName: System.Windows.Controls.DataVisualization.Range<T>.Add
  nameWithType.vb: Range(Of T).Add
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).Add
- uid: System.Windows.Controls.DataVisualization.Range`1.Equals*
  commentId: Overload:System.Windows.Controls.DataVisualization.Range`1.Equals
  name: Equals
  nameWithType: Range<T>.Equals
  fullName: System.Windows.Controls.DataVisualization.Range<T>.Equals
  nameWithType.vb: Range(Of T).Equals
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).Equals
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Windows.Controls.DataVisualization.Range`1.Contains*
  commentId: Overload:System.Windows.Controls.DataVisualization.Range`1.Contains
  name: Contains
  nameWithType: Range<T>.Contains
  fullName: System.Windows.Controls.DataVisualization.Range<T>.Contains
  nameWithType.vb: Range(Of T).Contains
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).Contains
- uid: System.Windows.Controls.DataVisualization.Range`1.IntersectsWith*
  commentId: Overload:System.Windows.Controls.DataVisualization.Range`1.IntersectsWith
  name: IntersectsWith
  nameWithType: Range<T>.IntersectsWith
  fullName: System.Windows.Controls.DataVisualization.Range<T>.IntersectsWith
  nameWithType.vb: Range(Of T).IntersectsWith
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).IntersectsWith
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Controls.DataVisualization.Range`1.GetHashCode*
  commentId: Overload:System.Windows.Controls.DataVisualization.Range`1.GetHashCode
  name: GetHashCode
  nameWithType: Range<T>.GetHashCode
  fullName: System.Windows.Controls.DataVisualization.Range<T>.GetHashCode
  nameWithType.vb: Range(Of T).GetHashCode
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Controls.DataVisualization.Range`1.ToString*
  commentId: Overload:System.Windows.Controls.DataVisualization.Range`1.ToString
  name: ToString
  nameWithType: Range<T>.ToString
  fullName: System.Windows.Controls.DataVisualization.Range<T>.ToString
  nameWithType.vb: Range(Of T).ToString
  fullName.vb: System.Windows.Controls.DataVisualization.Range(Of T).ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
