### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.ICollectionView
  commentId: T:System.ComponentModel.ICollectionView
  id: ICollectionView
  parent: System.ComponentModel
  children:
  - System.ComponentModel.ICollectionView.CanFilter
  - System.ComponentModel.ICollectionView.CanGroup
  - System.ComponentModel.ICollectionView.CanSort
  - System.ComponentModel.ICollectionView.Contains(System.Object)
  - System.ComponentModel.ICollectionView.Culture
  - System.ComponentModel.ICollectionView.CurrentChanged
  - System.ComponentModel.ICollectionView.CurrentChanging
  - System.ComponentModel.ICollectionView.CurrentItem
  - System.ComponentModel.ICollectionView.CurrentPosition
  - System.ComponentModel.ICollectionView.DeferRefresh
  - System.ComponentModel.ICollectionView.Filter
  - System.ComponentModel.ICollectionView.GroupDescriptions
  - System.ComponentModel.ICollectionView.Groups
  - System.ComponentModel.ICollectionView.IsCurrentAfterLast
  - System.ComponentModel.ICollectionView.IsCurrentBeforeFirst
  - System.ComponentModel.ICollectionView.IsEmpty
  - System.ComponentModel.ICollectionView.MoveCurrentTo(System.Object)
  - System.ComponentModel.ICollectionView.MoveCurrentToFirst
  - System.ComponentModel.ICollectionView.MoveCurrentToLast
  - System.ComponentModel.ICollectionView.MoveCurrentToNext
  - System.ComponentModel.ICollectionView.MoveCurrentToPosition(System.Int32)
  - System.ComponentModel.ICollectionView.MoveCurrentToPrevious
  - System.ComponentModel.ICollectionView.Refresh
  - System.ComponentModel.ICollectionView.SortDescriptions
  - System.ComponentModel.ICollectionView.SourceCollection
  langs:
  - csharp
  - vb
  name: ICollectionView
  nameWithType: ICollectionView
  fullName: System.ComponentModel.ICollectionView
  type: Interface
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ICollectionView
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 28
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nICollectionView is an interface that applications writing their own\ncollections can implement to enable current record management, sorting,\nfiltering, grouping etc in a custom way.\n"
  example: []
  syntax:
    content: 'public interface ICollectionView : IEnumerable, INotifyCollectionChanged'
    content.vb: >-
      Public Interface ICollectionView

          Inherits IEnumerable, INotifyCollectionChanged
  inheritedMembers:
  - System.Collections.IEnumerable.GetEnumerator
  - System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.ComponentModel.ICollectionView.Culture
  commentId: P:System.ComponentModel.ICollectionView.Culture
  id: Culture
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: Culture
  nameWithType: ICollectionView.Culture
  fullName: System.ComponentModel.ICollectionView.Culture
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Culture
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 34
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nCulture contains the CultureInfo used in any operations of the\nICollectionView that may differ by Culture, such as sorting.\n"
  example: []
  syntax:
    content: CultureInfo Culture { get; set; }
    parameters: []
    return:
      type: System.Globalization.CultureInfo
    content.vb: Property Culture As CultureInfo
  overload: System.ComponentModel.ICollectionView.Culture*
  modifiers.csharp:
  - get
  - set
- uid: System.ComponentModel.ICollectionView.Contains(System.Object)
  commentId: M:System.ComponentModel.ICollectionView.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: Contains(Object)
  nameWithType: ICollectionView.Contains(Object)
  fullName: System.ComponentModel.ICollectionView.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Contains
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 42
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nReturn true if the item belongs to this view.  No assumptions are\nmade about the item. This method will behave similarly to IList.Contains().\nIf the caller knows that the item belongs to the\nunderlying collection, it is more efficient to call <xref href=\"System.ComponentModel.ICollectionView.Filter\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: bool Contains(object item)
    parameters:
    - id: item
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Function Contains(item As Object) As Boolean
  overload: System.ComponentModel.ICollectionView.Contains*
- uid: System.ComponentModel.ICollectionView.SourceCollection
  commentId: P:System.ComponentModel.ICollectionView.SourceCollection
  id: SourceCollection
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: SourceCollection
  nameWithType: ICollectionView.SourceCollection
  fullName: System.ComponentModel.ICollectionView.SourceCollection
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: SourceCollection
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 48
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nSourceCollection is the original un-filtered collection of which\nthis ICollectionView is a view.\n"
  example: []
  syntax:
    content: IEnumerable SourceCollection { get; }
    parameters: []
    return:
      type: System.Collections.IEnumerable
    content.vb: ReadOnly Property SourceCollection As IEnumerable
  overload: System.ComponentModel.ICollectionView.SourceCollection*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.ComponentModel.ICollectionView.Filter
  commentId: P:System.ComponentModel.ICollectionView.Filter
  id: Filter
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: Filter
  nameWithType: ICollectionView.Filter
  fullName: System.ComponentModel.ICollectionView.Filter
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Filter
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 55
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nFilter is a callback set by the consumer of the ICollectionView\nand used by the implementation of the ICollectionView to determine if an\nitem is suitable for inclusion in the view.\n"
  example: []
  syntax:
    content: Predicate<object> Filter { get; set; }
    parameters: []
    return:
      type: System.Predicate{System.Object}
    content.vb: Property Filter As Predicate(Of Object)
  overload: System.ComponentModel.ICollectionView.Filter*
  modifiers.csharp:
  - get
  - set
- uid: System.ComponentModel.ICollectionView.CanFilter
  commentId: P:System.ComponentModel.ICollectionView.CanFilter
  id: CanFilter
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: CanFilter
  nameWithType: ICollectionView.CanFilter
  fullName: System.ComponentModel.ICollectionView.CanFilter
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CanFilter
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 60
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nIndicates whether or not this ICollectionView can do any filtering.\n"
  example: []
  syntax:
    content: bool CanFilter { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property CanFilter As Boolean
  overload: System.ComponentModel.ICollectionView.CanFilter*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.ComponentModel.ICollectionView.SortDescriptions
  commentId: P:System.ComponentModel.ICollectionView.SortDescriptions
  id: SortDescriptions
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: SortDescriptions
  nameWithType: ICollectionView.SortDescriptions
  fullName: System.ComponentModel.ICollectionView.SortDescriptions
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: SortDescriptions
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 78
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nCollection of Sort criteria to sort items in this view over the SourceCollection.\n"
  remarks: "\n<p>\nSimpler implementations do not support sorting and will return an empty\nand immutable / read-only SortDescription collection.\nAttempting to modify such a collection will cause NotSupportedException.\nUse <xref href=\"System.ComponentModel.ICollectionView.CanSort\" data-throw-if-not-resolved=\"false\"></xref> property on CollectionView to test if sorting is supported\nbefore modifying the returned collection.\n</p>\n<p>\nOne or more sort criteria in form of <xref href=\"System.ComponentModel.SortDescription\" data-throw-if-not-resolved=\"false\"></xref>\ncan be added, each specifying a property and direction to sort by.\n</p>\n"
  example: []
  syntax:
    content: SortDescriptionCollection SortDescriptions { get; }
    parameters: []
    return:
      type: System.ComponentModel.SortDescriptionCollection
    content.vb: ReadOnly Property SortDescriptions As SortDescriptionCollection
  overload: System.ComponentModel.ICollectionView.SortDescriptions*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.ComponentModel.ICollectionView.CanSort
  commentId: P:System.ComponentModel.ICollectionView.CanSort
  id: CanSort
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: CanSort
  nameWithType: ICollectionView.CanSort
  fullName: System.ComponentModel.ICollectionView.CanSort
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CanSort
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 83
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nWhether or not this ICollectionView does any sorting.\n"
  example: []
  syntax:
    content: bool CanSort { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property CanSort As Boolean
  overload: System.ComponentModel.ICollectionView.CanSort*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.ComponentModel.ICollectionView.CanGroup
  commentId: P:System.ComponentModel.ICollectionView.CanGroup
  id: CanGroup
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: CanGroup
  nameWithType: ICollectionView.CanGroup
  fullName: System.ComponentModel.ICollectionView.CanGroup
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CanGroup
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 89
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nReturns true if this view really supports grouping.\nWhen this returns false, the rest of the interface is ignored.\n"
  example: []
  syntax:
    content: bool CanGroup { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property CanGroup As Boolean
  overload: System.ComponentModel.ICollectionView.CanGroup*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.ComponentModel.ICollectionView.GroupDescriptions
  commentId: P:System.ComponentModel.ICollectionView.GroupDescriptions
  id: GroupDescriptions
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: GroupDescriptions
  nameWithType: ICollectionView.GroupDescriptions
  fullName: System.ComponentModel.ICollectionView.GroupDescriptions
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GroupDescriptions
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 94
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nThe description of grouping, indexed by level.\n"
  example: []
  syntax:
    content: ObservableCollection<GroupDescription> GroupDescriptions { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.ObservableCollection{System.ComponentModel.GroupDescription}
    content.vb: ReadOnly Property GroupDescriptions As ObservableCollection(Of GroupDescription)
  overload: System.ComponentModel.ICollectionView.GroupDescriptions*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.ComponentModel.ICollectionView.Groups
  commentId: P:System.ComponentModel.ICollectionView.Groups
  id: Groups
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: Groups
  nameWithType: ICollectionView.Groups
  fullName: System.ComponentModel.ICollectionView.Groups
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Groups
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 100
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nThe top-level groups, constructed according to the descriptions\ngiven in GroupDescriptions.\n"
  example: []
  syntax:
    content: ReadOnlyObservableCollection<object> Groups { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyObservableCollection{System.Object}
    content.vb: ReadOnly Property Groups As ReadOnlyObservableCollection(Of Object)
  overload: System.ComponentModel.ICollectionView.Groups*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.ComponentModel.ICollectionView.IsEmpty
  commentId: P:System.ComponentModel.ICollectionView.IsEmpty
  id: IsEmpty
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: ICollectionView.IsEmpty
  fullName: System.ComponentModel.ICollectionView.IsEmpty
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IsEmpty
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 105
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nReturns true if the resulting (filtered) view is emtpy.\n"
  example: []
  syntax:
    content: bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsEmpty As Boolean
  overload: System.ComponentModel.ICollectionView.IsEmpty*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.ComponentModel.ICollectionView.Refresh
  commentId: M:System.ComponentModel.ICollectionView.Refresh
  id: Refresh
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: Refresh()
  nameWithType: ICollectionView.Refresh()
  fullName: System.ComponentModel.ICollectionView.Refresh()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Refresh
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 110
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nRe-create the view, using any <xref href=\"System.ComponentModel.ICollectionView.SortDescriptions\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: void Refresh()
    content.vb: Sub Refresh
  overload: System.ComponentModel.ICollectionView.Refresh*
- uid: System.ComponentModel.ICollectionView.DeferRefresh
  commentId: M:System.ComponentModel.ICollectionView.DeferRefresh
  id: DeferRefresh
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: DeferRefresh()
  nameWithType: ICollectionView.DeferRefresh()
  fullName: System.ComponentModel.ICollectionView.DeferRefresh()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: DeferRefresh
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 116
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nEnter a Defer Cycle.\nDefer cycles are used to coalesce changes to the ICollectionView.\n"
  example: []
  syntax:
    content: IDisposable DeferRefresh()
    return:
      type: System.IDisposable
    content.vb: Function DeferRefresh As IDisposable
  overload: System.ComponentModel.ICollectionView.DeferRefresh*
- uid: System.ComponentModel.ICollectionView.CurrentItem
  commentId: P:System.ComponentModel.ICollectionView.CurrentItem
  id: CurrentItem
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: CurrentItem
  nameWithType: ICollectionView.CurrentItem
  fullName: System.ComponentModel.ICollectionView.CurrentItem
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CurrentItem
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 123
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nReturn current item.\n"
  example: []
  syntax:
    content: object CurrentItem { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: ReadOnly Property CurrentItem As Object
  overload: System.ComponentModel.ICollectionView.CurrentItem*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.ComponentModel.ICollectionView.CurrentPosition
  commentId: P:System.ComponentModel.ICollectionView.CurrentPosition
  id: CurrentPosition
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: CurrentPosition
  nameWithType: ICollectionView.CurrentPosition
  fullName: System.ComponentModel.ICollectionView.CurrentPosition
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CurrentPosition
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 129
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nThe ordinal position of the <xref href=\"System.ComponentModel.ICollectionView.CurrentItem\" data-throw-if-not-resolved=\"false\"></xref> within the (optionally\nsorted and filtered) view.\n"
  example: []
  syntax:
    content: int CurrentPosition { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property CurrentPosition As Integer
  overload: System.ComponentModel.ICollectionView.CurrentPosition*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.ComponentModel.ICollectionView.IsCurrentAfterLast
  commentId: P:System.ComponentModel.ICollectionView.IsCurrentAfterLast
  id: IsCurrentAfterLast
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: IsCurrentAfterLast
  nameWithType: ICollectionView.IsCurrentAfterLast
  fullName: System.ComponentModel.ICollectionView.IsCurrentAfterLast
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IsCurrentAfterLast
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 134
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nReturn true if <xref href=\"System.ComponentModel.ICollectionView.CurrentItem\" data-throw-if-not-resolved=\"false\"></xref> is beyond the end (End-Of-File).\n"
  example: []
  syntax:
    content: bool IsCurrentAfterLast { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsCurrentAfterLast As Boolean
  overload: System.ComponentModel.ICollectionView.IsCurrentAfterLast*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.ComponentModel.ICollectionView.IsCurrentBeforeFirst
  commentId: P:System.ComponentModel.ICollectionView.IsCurrentBeforeFirst
  id: IsCurrentBeforeFirst
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: IsCurrentBeforeFirst
  nameWithType: ICollectionView.IsCurrentBeforeFirst
  fullName: System.ComponentModel.ICollectionView.IsCurrentBeforeFirst
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IsCurrentBeforeFirst
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 139
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nReturn true if <xref href=\"System.ComponentModel.ICollectionView.CurrentItem\" data-throw-if-not-resolved=\"false\"></xref> is before the beginning (Beginning-Of-File).\n"
  example: []
  syntax:
    content: bool IsCurrentBeforeFirst { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsCurrentBeforeFirst As Boolean
  overload: System.ComponentModel.ICollectionView.IsCurrentBeforeFirst*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.ComponentModel.ICollectionView.MoveCurrentToFirst
  commentId: M:System.ComponentModel.ICollectionView.MoveCurrentToFirst
  id: MoveCurrentToFirst
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: MoveCurrentToFirst()
  nameWithType: ICollectionView.MoveCurrentToFirst()
  fullName: System.ComponentModel.ICollectionView.MoveCurrentToFirst()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MoveCurrentToFirst
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 145
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nMove <xref href=\"System.ComponentModel.ICollectionView.CurrentItem\" data-throw-if-not-resolved=\"false\"></xref> to the first item.\n"
  example: []
  syntax:
    content: bool MoveCurrentToFirst()
    return:
      type: System.Boolean
      description: true if <xref href="System.ComponentModel.ICollectionView.CurrentItem" data-throw-if-not-resolved="false"></xref> points to an item within the view.
    content.vb: Function MoveCurrentToFirst As Boolean
  overload: System.ComponentModel.ICollectionView.MoveCurrentToFirst*
- uid: System.ComponentModel.ICollectionView.MoveCurrentToLast
  commentId: M:System.ComponentModel.ICollectionView.MoveCurrentToLast
  id: MoveCurrentToLast
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: MoveCurrentToLast()
  nameWithType: ICollectionView.MoveCurrentToLast()
  fullName: System.ComponentModel.ICollectionView.MoveCurrentToLast()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MoveCurrentToLast
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 151
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nMove <xref href=\"System.ComponentModel.ICollectionView.CurrentItem\" data-throw-if-not-resolved=\"false\"></xref> to the last item.\n"
  example: []
  syntax:
    content: bool MoveCurrentToLast()
    return:
      type: System.Boolean
      description: true if <xref href="System.ComponentModel.ICollectionView.CurrentItem" data-throw-if-not-resolved="false"></xref> points to an item within the view.
    content.vb: Function MoveCurrentToLast As Boolean
  overload: System.ComponentModel.ICollectionView.MoveCurrentToLast*
- uid: System.ComponentModel.ICollectionView.MoveCurrentToNext
  commentId: M:System.ComponentModel.ICollectionView.MoveCurrentToNext
  id: MoveCurrentToNext
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: MoveCurrentToNext()
  nameWithType: ICollectionView.MoveCurrentToNext()
  fullName: System.ComponentModel.ICollectionView.MoveCurrentToNext()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MoveCurrentToNext
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 157
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nMove <xref href=\"System.ComponentModel.ICollectionView.CurrentItem\" data-throw-if-not-resolved=\"false\"></xref> to the next item.\n"
  example: []
  syntax:
    content: bool MoveCurrentToNext()
    return:
      type: System.Boolean
      description: true if <xref href="System.ComponentModel.ICollectionView.CurrentItem" data-throw-if-not-resolved="false"></xref> points to an item within the view.
    content.vb: Function MoveCurrentToNext As Boolean
  overload: System.ComponentModel.ICollectionView.MoveCurrentToNext*
- uid: System.ComponentModel.ICollectionView.MoveCurrentToPrevious
  commentId: M:System.ComponentModel.ICollectionView.MoveCurrentToPrevious
  id: MoveCurrentToPrevious
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: MoveCurrentToPrevious()
  nameWithType: ICollectionView.MoveCurrentToPrevious()
  fullName: System.ComponentModel.ICollectionView.MoveCurrentToPrevious()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MoveCurrentToPrevious
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 163
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nMove <xref href=\"System.ComponentModel.ICollectionView.CurrentItem\" data-throw-if-not-resolved=\"false\"></xref> to the previous item.\n"
  example: []
  syntax:
    content: bool MoveCurrentToPrevious()
    return:
      type: System.Boolean
      description: true if <xref href="System.ComponentModel.ICollectionView.CurrentItem" data-throw-if-not-resolved="false"></xref> points to an item within the view.
    content.vb: Function MoveCurrentToPrevious As Boolean
  overload: System.ComponentModel.ICollectionView.MoveCurrentToPrevious*
- uid: System.ComponentModel.ICollectionView.MoveCurrentTo(System.Object)
  commentId: M:System.ComponentModel.ICollectionView.MoveCurrentTo(System.Object)
  id: MoveCurrentTo(System.Object)
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: MoveCurrentTo(Object)
  nameWithType: ICollectionView.MoveCurrentTo(Object)
  fullName: System.ComponentModel.ICollectionView.MoveCurrentTo(System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MoveCurrentTo
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 170
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nMove <xref href=\"System.ComponentModel.ICollectionView.CurrentItem\" data-throw-if-not-resolved=\"false\"></xref> to the given item.\n"
  example: []
  syntax:
    content: bool MoveCurrentTo(object item)
    parameters:
    - id: item
      type: System.Object
      description: Move CurrentItem to this item.
    return:
      type: System.Boolean
      description: true if <xref href="System.ComponentModel.ICollectionView.CurrentItem" data-throw-if-not-resolved="false"></xref> points to an item within the view.
    content.vb: Function MoveCurrentTo(item As Object) As Boolean
  overload: System.ComponentModel.ICollectionView.MoveCurrentTo*
- uid: System.ComponentModel.ICollectionView.MoveCurrentToPosition(System.Int32)
  commentId: M:System.ComponentModel.ICollectionView.MoveCurrentToPosition(System.Int32)
  id: MoveCurrentToPosition(System.Int32)
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: MoveCurrentToPosition(Int32)
  nameWithType: ICollectionView.MoveCurrentToPosition(Int32)
  fullName: System.ComponentModel.ICollectionView.MoveCurrentToPosition(System.Int32)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MoveCurrentToPosition
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 177
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nMove <xref href=\"System.ComponentModel.ICollectionView.CurrentItem\" data-throw-if-not-resolved=\"false\"></xref> to the item at the given index.\n"
  example: []
  syntax:
    content: bool MoveCurrentToPosition(int position)
    parameters:
    - id: position
      type: System.Int32
      description: Move CurrentItem to this index
    return:
      type: System.Boolean
      description: true if <xref href="System.ComponentModel.ICollectionView.CurrentItem" data-throw-if-not-resolved="false"></xref> points to an item within the view.
    content.vb: Function MoveCurrentToPosition(position As Integer) As Boolean
  overload: System.ComponentModel.ICollectionView.MoveCurrentToPosition*
- uid: System.ComponentModel.ICollectionView.CurrentChanging
  commentId: E:System.ComponentModel.ICollectionView.CurrentChanging
  id: CurrentChanging
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: CurrentChanging
  nameWithType: ICollectionView.CurrentChanging
  fullName: System.ComponentModel.ICollectionView.CurrentChanging
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CurrentChanging
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 203
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nRaise this event before change of current item pointer.  Handlers can cancel the change.\n"
  remarks: "\n<p>Classes implementing ICollectionView should use the following pattern:</p>\n<p>\nRaise the CurrentChanging event before any change of currency and check the\nreturn value before proceeding and raising CurrentChanged event:\n<pre><code>     void MoveCurrentToNext()\n     {\n         CurrentChangingEventArgs args = new CurrentChangingEventArgs();\n         OnCurrentChanging(args);\n         if (!args.Cancel)\n         {\n             // ... update private data structures ...\n             CurrentChanged();\n         }\n     }</code></pre>\n</p>\n"
  example: []
  syntax:
    content: event CurrentChangingEventHandler CurrentChanging
    return:
      type: System.ComponentModel.CurrentChangingEventHandler
    content.vb: Event CurrentChanging As CurrentChangingEventHandler
- uid: System.ComponentModel.ICollectionView.CurrentChanged
  commentId: E:System.ComponentModel.ICollectionView.CurrentChanged
  id: CurrentChanged
  parent: System.ComponentModel.ICollectionView
  langs:
  - csharp
  - vb
  name: CurrentChanged
  nameWithType: ICollectionView.CurrentChanged
  fullName: System.ComponentModel.ICollectionView.CurrentChanged
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CurrentChanged
    path: ../OpenSilverGit/src/Runtime/Runtime/System.ComponentModel/ICollectionView.cs
    startLine: 208
  assemblies:
  - OpenSilver
  namespace: System.ComponentModel
  summary: "\nRaise this event after changing to a new current item.\n"
  example: []
  syntax:
    content: event EventHandler CurrentChanged
    return:
      type: System.EventHandler
    content.vb: Event CurrentChanged As EventHandler
references:
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  commentId: E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  parent: System.Collections.Specialized.INotifyCollectionChanged
  isExternal: true
  name: CollectionChanged
  nameWithType: INotifyCollectionChanged.CollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Specialized.INotifyCollectionChanged
  commentId: T:System.Collections.Specialized.INotifyCollectionChanged
  parent: System.Collections.Specialized
  isExternal: true
  name: INotifyCollectionChanged
  nameWithType: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
  isExternal: true
  name: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: System.ComponentModel.ICollectionView.Culture*
  commentId: Overload:System.ComponentModel.ICollectionView.Culture
  name: Culture
  nameWithType: ICollectionView.Culture
  fullName: System.ComponentModel.ICollectionView.Culture
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: System.ComponentModel.ICollectionView.Filter
  commentId: P:System.ComponentModel.ICollectionView.Filter
  parent: System.ComponentModel.ICollectionView
  name: Filter
  nameWithType: ICollectionView.Filter
  fullName: System.ComponentModel.ICollectionView.Filter
- uid: System.ComponentModel.ICollectionView.Contains*
  commentId: Overload:System.ComponentModel.ICollectionView.Contains
  name: Contains
  nameWithType: ICollectionView.Contains
  fullName: System.ComponentModel.ICollectionView.Contains
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.ICollectionView
  commentId: T:System.ComponentModel.ICollectionView
  parent: System.ComponentModel
  name: ICollectionView
  nameWithType: ICollectionView
  fullName: System.ComponentModel.ICollectionView
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.ComponentModel.ICollectionView.SourceCollection*
  commentId: Overload:System.ComponentModel.ICollectionView.SourceCollection
  name: SourceCollection
  nameWithType: ICollectionView.SourceCollection
  fullName: System.ComponentModel.ICollectionView.SourceCollection
- uid: System.ComponentModel.ICollectionView.Filter*
  commentId: Overload:System.ComponentModel.ICollectionView.Filter
  name: Filter
  nameWithType: ICollectionView.Filter
  fullName: System.ComponentModel.ICollectionView.Filter
- uid: System.Predicate{System.Object}
  commentId: T:System.Predicate{System.Object}
  parent: System
  definition: System.Predicate`1
  name: Predicate<Object>
  nameWithType: Predicate<Object>
  fullName: System.Predicate<System.Object>
  nameWithType.vb: Predicate(Of Object)
  fullName.vb: System.Predicate(Of System.Object)
  name.vb: Predicate(Of Object)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ComponentModel.ICollectionView.CanFilter*
  commentId: Overload:System.ComponentModel.ICollectionView.CanFilter
  name: CanFilter
  nameWithType: ICollectionView.CanFilter
  fullName: System.ComponentModel.ICollectionView.CanFilter
- uid: System.ComponentModel.ICollectionView.CanSort
  commentId: P:System.ComponentModel.ICollectionView.CanSort
  parent: System.ComponentModel.ICollectionView
  name: CanSort
  nameWithType: ICollectionView.CanSort
  fullName: System.ComponentModel.ICollectionView.CanSort
- uid: System.ComponentModel.SortDescription
  commentId: T:System.ComponentModel.SortDescription
  parent: System.ComponentModel
  name: SortDescription
  nameWithType: SortDescription
  fullName: System.ComponentModel.SortDescription
- uid: System.ComponentModel.ICollectionView.SortDescriptions*
  commentId: Overload:System.ComponentModel.ICollectionView.SortDescriptions
  name: SortDescriptions
  nameWithType: ICollectionView.SortDescriptions
  fullName: System.ComponentModel.ICollectionView.SortDescriptions
- uid: System.ComponentModel.SortDescriptionCollection
  commentId: T:System.ComponentModel.SortDescriptionCollection
  parent: System.ComponentModel
  name: SortDescriptionCollection
  nameWithType: SortDescriptionCollection
  fullName: System.ComponentModel.SortDescriptionCollection
- uid: System.ComponentModel.ICollectionView.CanSort*
  commentId: Overload:System.ComponentModel.ICollectionView.CanSort
  name: CanSort
  nameWithType: ICollectionView.CanSort
  fullName: System.ComponentModel.ICollectionView.CanSort
- uid: System.ComponentModel.ICollectionView.CanGroup*
  commentId: Overload:System.ComponentModel.ICollectionView.CanGroup
  name: CanGroup
  nameWithType: ICollectionView.CanGroup
  fullName: System.ComponentModel.ICollectionView.CanGroup
- uid: System.ComponentModel.ICollectionView.GroupDescriptions*
  commentId: Overload:System.ComponentModel.ICollectionView.GroupDescriptions
  name: GroupDescriptions
  nameWithType: ICollectionView.GroupDescriptions
  fullName: System.ComponentModel.ICollectionView.GroupDescriptions
- uid: System.Collections.ObjectModel.ObservableCollection{System.ComponentModel.GroupDescription}
  commentId: T:System.Collections.ObjectModel.ObservableCollection{System.ComponentModel.GroupDescription}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ObservableCollection`1
  name: ObservableCollection<GroupDescription>
  nameWithType: ObservableCollection<GroupDescription>
  fullName: System.Collections.ObjectModel.ObservableCollection<System.ComponentModel.GroupDescription>
  nameWithType.vb: ObservableCollection(Of GroupDescription)
  fullName.vb: System.Collections.ObjectModel.ObservableCollection(Of System.ComponentModel.GroupDescription)
  name.vb: ObservableCollection(Of GroupDescription)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ObservableCollection`1
    name: ObservableCollection
    nameWithType: ObservableCollection
    fullName: System.Collections.ObjectModel.ObservableCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.GroupDescription
    name: GroupDescription
    nameWithType: GroupDescription
    fullName: System.ComponentModel.GroupDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ObservableCollection`1
    name: ObservableCollection
    nameWithType: ObservableCollection
    fullName: System.Collections.ObjectModel.ObservableCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ComponentModel.GroupDescription
    name: GroupDescription
    nameWithType: GroupDescription
    fullName: System.ComponentModel.GroupDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ObservableCollection`1
  commentId: T:System.Collections.ObjectModel.ObservableCollection`1
  isExternal: true
  name: ObservableCollection<T>
  nameWithType: ObservableCollection<T>
  fullName: System.Collections.ObjectModel.ObservableCollection<T>
  nameWithType.vb: ObservableCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ObservableCollection(Of T)
  name.vb: ObservableCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ObservableCollection`1
    name: ObservableCollection
    nameWithType: ObservableCollection
    fullName: System.Collections.ObjectModel.ObservableCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ObservableCollection`1
    name: ObservableCollection
    nameWithType: ObservableCollection
    fullName: System.Collections.ObjectModel.ObservableCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.ComponentModel.ICollectionView.Groups*
  commentId: Overload:System.ComponentModel.ICollectionView.Groups
  name: Groups
  nameWithType: ICollectionView.Groups
  fullName: System.ComponentModel.ICollectionView.Groups
- uid: System.Collections.ObjectModel.ReadOnlyObservableCollection{System.Object}
  commentId: T:System.Collections.ObjectModel.ReadOnlyObservableCollection{System.Object}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
  name: ReadOnlyObservableCollection<Object>
  nameWithType: ReadOnlyObservableCollection<Object>
  fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<System.Object>
  nameWithType.vb: ReadOnlyObservableCollection(Of Object)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of System.Object)
  name.vb: ReadOnlyObservableCollection(Of Object)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
    name: ReadOnlyObservableCollection
    nameWithType: ReadOnlyObservableCollection
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
    name: ReadOnlyObservableCollection
    nameWithType: ReadOnlyObservableCollection
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1
  isExternal: true
  name: ReadOnlyObservableCollection<T>
  nameWithType: ReadOnlyObservableCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<T>
  nameWithType.vb: ReadOnlyObservableCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of T)
  name.vb: ReadOnlyObservableCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
    name: ReadOnlyObservableCollection
    nameWithType: ReadOnlyObservableCollection
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
    name: ReadOnlyObservableCollection
    nameWithType: ReadOnlyObservableCollection
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ComponentModel.ICollectionView.IsEmpty*
  commentId: Overload:System.ComponentModel.ICollectionView.IsEmpty
  name: IsEmpty
  nameWithType: ICollectionView.IsEmpty
  fullName: System.ComponentModel.ICollectionView.IsEmpty
- uid: System.ComponentModel.ICollectionView.SortDescriptions
  commentId: P:System.ComponentModel.ICollectionView.SortDescriptions
  parent: System.ComponentModel.ICollectionView
  name: SortDescriptions
  nameWithType: ICollectionView.SortDescriptions
  fullName: System.ComponentModel.ICollectionView.SortDescriptions
- uid: System.ComponentModel.ICollectionView.Refresh*
  commentId: Overload:System.ComponentModel.ICollectionView.Refresh
  name: Refresh
  nameWithType: ICollectionView.Refresh
  fullName: System.ComponentModel.ICollectionView.Refresh
- uid: System.ComponentModel.ICollectionView.DeferRefresh*
  commentId: Overload:System.ComponentModel.ICollectionView.DeferRefresh
  name: DeferRefresh
  nameWithType: ICollectionView.DeferRefresh
  fullName: System.ComponentModel.ICollectionView.DeferRefresh
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.ComponentModel.ICollectionView.CurrentItem*
  commentId: Overload:System.ComponentModel.ICollectionView.CurrentItem
  name: CurrentItem
  nameWithType: ICollectionView.CurrentItem
  fullName: System.ComponentModel.ICollectionView.CurrentItem
- uid: System.ComponentModel.ICollectionView.CurrentItem
  commentId: P:System.ComponentModel.ICollectionView.CurrentItem
  parent: System.ComponentModel.ICollectionView
  name: CurrentItem
  nameWithType: ICollectionView.CurrentItem
  fullName: System.ComponentModel.ICollectionView.CurrentItem
- uid: System.ComponentModel.ICollectionView.CurrentPosition*
  commentId: Overload:System.ComponentModel.ICollectionView.CurrentPosition
  name: CurrentPosition
  nameWithType: ICollectionView.CurrentPosition
  fullName: System.ComponentModel.ICollectionView.CurrentPosition
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ComponentModel.ICollectionView.IsCurrentAfterLast*
  commentId: Overload:System.ComponentModel.ICollectionView.IsCurrentAfterLast
  name: IsCurrentAfterLast
  nameWithType: ICollectionView.IsCurrentAfterLast
  fullName: System.ComponentModel.ICollectionView.IsCurrentAfterLast
- uid: System.ComponentModel.ICollectionView.IsCurrentBeforeFirst*
  commentId: Overload:System.ComponentModel.ICollectionView.IsCurrentBeforeFirst
  name: IsCurrentBeforeFirst
  nameWithType: ICollectionView.IsCurrentBeforeFirst
  fullName: System.ComponentModel.ICollectionView.IsCurrentBeforeFirst
- uid: System.ComponentModel.ICollectionView.MoveCurrentToFirst*
  commentId: Overload:System.ComponentModel.ICollectionView.MoveCurrentToFirst
  name: MoveCurrentToFirst
  nameWithType: ICollectionView.MoveCurrentToFirst
  fullName: System.ComponentModel.ICollectionView.MoveCurrentToFirst
- uid: System.ComponentModel.ICollectionView.MoveCurrentToLast*
  commentId: Overload:System.ComponentModel.ICollectionView.MoveCurrentToLast
  name: MoveCurrentToLast
  nameWithType: ICollectionView.MoveCurrentToLast
  fullName: System.ComponentModel.ICollectionView.MoveCurrentToLast
- uid: System.ComponentModel.ICollectionView.MoveCurrentToNext*
  commentId: Overload:System.ComponentModel.ICollectionView.MoveCurrentToNext
  name: MoveCurrentToNext
  nameWithType: ICollectionView.MoveCurrentToNext
  fullName: System.ComponentModel.ICollectionView.MoveCurrentToNext
- uid: System.ComponentModel.ICollectionView.MoveCurrentToPrevious*
  commentId: Overload:System.ComponentModel.ICollectionView.MoveCurrentToPrevious
  name: MoveCurrentToPrevious
  nameWithType: ICollectionView.MoveCurrentToPrevious
  fullName: System.ComponentModel.ICollectionView.MoveCurrentToPrevious
- uid: System.ComponentModel.ICollectionView.MoveCurrentTo*
  commentId: Overload:System.ComponentModel.ICollectionView.MoveCurrentTo
  name: MoveCurrentTo
  nameWithType: ICollectionView.MoveCurrentTo
  fullName: System.ComponentModel.ICollectionView.MoveCurrentTo
- uid: System.ComponentModel.ICollectionView.MoveCurrentToPosition*
  commentId: Overload:System.ComponentModel.ICollectionView.MoveCurrentToPosition
  name: MoveCurrentToPosition
  nameWithType: ICollectionView.MoveCurrentToPosition
  fullName: System.ComponentModel.ICollectionView.MoveCurrentToPosition
- uid: System.ComponentModel.CurrentChangingEventHandler
  commentId: T:System.ComponentModel.CurrentChangingEventHandler
  parent: System.ComponentModel
  name: CurrentChangingEventHandler
  nameWithType: CurrentChangingEventHandler
  fullName: System.ComponentModel.CurrentChangingEventHandler
- uid: System.EventHandler
  commentId: T:System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
