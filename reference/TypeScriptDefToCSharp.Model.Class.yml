### YamlMime:ManagedReference
items:
- uid: TypeScriptDefToCSharp.Model.Class
  commentId: T:TypeScriptDefToCSharp.Model.Class
  id: Class
  parent: TypeScriptDefToCSharp.Model
  children:
  - TypeScriptDefToCSharp.Model.Class.#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration},TypeScriptDefToCSharp.TypeScriptDefContext)
  - TypeScriptDefToCSharp.Model.Class.#ctor(TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration})
  - TypeScriptDefToCSharp.Model.Class.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  - TypeScriptDefToCSharp.Model.Class.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  - TypeScriptDefToCSharp.Model.Class.GenericArg
  - TypeScriptDefToCSharp.Model.Class.HasParameterlessConstructor
  - TypeScriptDefToCSharp.Model.Class.Inherit
  - TypeScriptDefToCSharp.Model.Class.Methods
  - TypeScriptDefToCSharp.Model.Class.New(System.String)
  - TypeScriptDefToCSharp.Model.Class.Prefix
  - TypeScriptDefToCSharp.Model.Class.Properties
  - TypeScriptDefToCSharp.Model.Class.Public
  - TypeScriptDefToCSharp.Model.Class.Static
  - TypeScriptDefToCSharp.Model.Class.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#Method}#GetEnumerator
  - TypeScriptDefToCSharp.Model.Class.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#Property}#GetEnumerator
  - TypeScriptDefToCSharp.Model.Class.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#TypeDeclaration}#GetEnumerator
  - TypeScriptDefToCSharp.Model.Class.System#Collections#IEnumerable#GetEnumerator
  - TypeScriptDefToCSharp.Model.Class.ToString
  - TypeScriptDefToCSharp.Model.Class.TypeDeclarations
  langs:
  - csharp
  - vb
  name: Class
  nameWithType: Class
  fullName: TypeScriptDefToCSharp.Model.Class
  type: Class
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Class
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
    startLine: 27
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: 'public class Class : TypeDeclaration, TSType, Declaration.Container<TypeDeclaration>, IEnumerable<TypeDeclaration>, Declaration.Container<Property>, IEnumerable<Property>, Declaration.Container<Method>, IDeclaration, IEnumerable<Method>, IEnumerable'
    content.vb: >-
      Public Class Class
          Inherits TypeDeclaration
          Implements TSType, Declaration.Container(Of TypeDeclaration), IEnumerable(Of TypeDeclaration), Declaration.Container(Of  Property), IEnumerable(Of  Property), Declaration.Container(Of Method), IDeclaration, IEnumerable(Of Method), IEnumerable
  inheritance:
  - System.Object
  - TypeScriptDefToCSharp.Model.Declaration
  - TypeScriptDefToCSharp.Model.TypeDeclaration
  implements:
  - TypeScriptDefToCSharp.Model.TSType
  - TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.TypeDeclaration}
  - System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.TypeDeclaration}
  - TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Property}
  - System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Property}
  - TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Method}
  - TypeScriptDefToCSharp.Model.IDeclaration
  - System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Method}
  - System.Collections.IEnumerable
  inheritedMembers:
  - TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp#Model#TSType#Name
  - TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp#Model#TSType#ToString
  - TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration},TypeScriptDefToCSharp.TypeScriptDefContext)
  - TypeScriptDefToCSharp.Model.Declaration.Name
  - TypeScriptDefToCSharp.Model.Declaration.Super
  - TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
  - TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String,System.Int32)
  - TypeScriptDefToCSharp.Model.Declaration.FirstAncestor``1
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TypeScriptDefToCSharp.Model.Class.Prefix
  commentId: P:TypeScriptDefToCSharp.Model.Class.Prefix
  id: Prefix
  parent: TypeScriptDefToCSharp.Model.Class
  langs:
  - csharp
  - vb
  name: Prefix
  nameWithType: Class.Prefix
  fullName: TypeScriptDefToCSharp.Model.Class.Prefix
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Prefix
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
    startLine: 32
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public string Prefix { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Prefix As String
  overload: TypeScriptDefToCSharp.Model.Class.Prefix*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Class.TypeDeclarations
  commentId: P:TypeScriptDefToCSharp.Model.Class.TypeDeclarations
  id: TypeDeclarations
  parent: TypeScriptDefToCSharp.Model.Class
  langs:
  - csharp
  - vb
  name: TypeDeclarations
  nameWithType: Class.TypeDeclarations
  fullName: TypeScriptDefToCSharp.Model.Class.TypeDeclarations
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: TypeDeclarations
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
    startLine: 34
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public HashSet<TypeDeclaration> TypeDeclarations { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.HashSet{TypeScriptDefToCSharp.Model.TypeDeclaration}
    content.vb: Public Property TypeDeclarations As HashSet(Of TypeDeclaration)
  overload: TypeScriptDefToCSharp.Model.Class.TypeDeclarations*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Class.Properties
  commentId: P:TypeScriptDefToCSharp.Model.Class.Properties
  id: Properties
  parent: TypeScriptDefToCSharp.Model.Class
  langs:
  - csharp
  - vb
  name: Properties
  nameWithType: Class.Properties
  fullName: TypeScriptDefToCSharp.Model.Class.Properties
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Properties
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
    startLine: 35
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public List<Property> Properties { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{TypeScriptDefToCSharp.Model.Property}
    content.vb: Public Property Properties As List(Of  Property)
  overload: TypeScriptDefToCSharp.Model.Class.Properties*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Class.Methods
  commentId: P:TypeScriptDefToCSharp.Model.Class.Methods
  id: Methods
  parent: TypeScriptDefToCSharp.Model.Class
  langs:
  - csharp
  - vb
  name: Methods
  nameWithType: Class.Methods
  fullName: TypeScriptDefToCSharp.Model.Class.Methods
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Methods
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
    startLine: 36
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public List<Method> Methods { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{TypeScriptDefToCSharp.Model.Method}
    content.vb: Public Property Methods As List(Of Method)
  overload: TypeScriptDefToCSharp.Model.Class.Methods*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Class.Inherit
  commentId: P:TypeScriptDefToCSharp.Model.Class.Inherit
  id: Inherit
  parent: TypeScriptDefToCSharp.Model.Class
  langs:
  - csharp
  - vb
  name: Inherit
  nameWithType: Class.Inherit
  fullName: TypeScriptDefToCSharp.Model.Class.Inherit
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Inherit
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
    startLine: 38
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public List<string> Inherit { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public Property Inherit As List(Of String)
  overload: TypeScriptDefToCSharp.Model.Class.Inherit*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Class.Public
  commentId: P:TypeScriptDefToCSharp.Model.Class.Public
  id: Public
  parent: TypeScriptDefToCSharp.Model.Class
  langs:
  - csharp
  - vb
  name: Public
  nameWithType: Class.Public
  fullName: TypeScriptDefToCSharp.Model.Class.Public
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Public
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
    startLine: 40
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public bool Public { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Public As Boolean
  overload: TypeScriptDefToCSharp.Model.Class.Public*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Class.Static
  commentId: P:TypeScriptDefToCSharp.Model.Class.Static
  id: Static
  parent: TypeScriptDefToCSharp.Model.Class
  langs:
  - csharp
  - vb
  name: Static
  nameWithType: Class.Static
  fullName: TypeScriptDefToCSharp.Model.Class.Static
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Static
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
    startLine: 41
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public bool Static { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Static As Boolean
  overload: TypeScriptDefToCSharp.Model.Class.Static*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Class.GenericArg
  commentId: P:TypeScriptDefToCSharp.Model.Class.GenericArg
  id: GenericArg
  parent: TypeScriptDefToCSharp.Model.Class
  langs:
  - csharp
  - vb
  name: GenericArg
  nameWithType: Class.GenericArg
  fullName: TypeScriptDefToCSharp.Model.Class.GenericArg
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GenericArg
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
    startLine: 43
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public string GenericArg { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property GenericArg As String
  overload: TypeScriptDefToCSharp.Model.Class.GenericArg*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Class.HasParameterlessConstructor
  commentId: P:TypeScriptDefToCSharp.Model.Class.HasParameterlessConstructor
  id: HasParameterlessConstructor
  parent: TypeScriptDefToCSharp.Model.Class
  langs:
  - csharp
  - vb
  name: HasParameterlessConstructor
  nameWithType: Class.HasParameterlessConstructor
  fullName: TypeScriptDefToCSharp.Model.Class.HasParameterlessConstructor
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: HasParameterlessConstructor
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
    startLine: 45
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public bool HasParameterlessConstructor { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property HasParameterlessConstructor As Boolean
  overload: TypeScriptDefToCSharp.Model.Class.HasParameterlessConstructor*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Class.#ctor(TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration})
  commentId: M:TypeScriptDefToCSharp.Model.Class.#ctor(TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration})
  id: '#ctor(TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration})'
  parent: TypeScriptDefToCSharp.Model.Class
  langs:
  - csharp
  - vb
  name: Class(Declaration.Container<Declaration>)
  nameWithType: Class.Class(Declaration.Container<Declaration>)
  fullName: TypeScriptDefToCSharp.Model.Class.Class(TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Declaration>)
  type: Constructor
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
    startLine: 57
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public Class(Declaration.Container<Declaration> super)
    parameters:
    - id: super
      type: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration}
    content.vb: Public Sub New(super As Declaration.Container(Of Declaration))
  overload: TypeScriptDefToCSharp.Model.Class.#ctor*
  nameWithType.vb: Class.Class(Declaration.Container(Of Declaration))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TypeScriptDefToCSharp.Model.Class.Class(TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Declaration))
  name.vb: Class(Declaration.Container(Of Declaration))
- uid: TypeScriptDefToCSharp.Model.Class.#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration},TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Class.#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration},TypeScriptDefToCSharp.TypeScriptDefContext)
  id: '#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration},TypeScriptDefToCSharp.TypeScriptDefContext)'
  parent: TypeScriptDefToCSharp.Model.Class
  langs:
  - csharp
  - vb
  name: Class(XElement, Declaration.Container<Declaration>, TypeScriptDefContext)
  nameWithType: Class.Class(XElement, Declaration.Container<Declaration>, TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Class.Class(System.Xml.Linq.XElement, TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Declaration>, TypeScriptDefToCSharp.TypeScriptDefContext)
  type: Constructor
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
    startLine: 63
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public Class(XElement elem, Declaration.Container<Declaration> super, TypeScriptDefContext context)
    parameters:
    - id: elem
      type: System.Xml.Linq.XElement
    - id: super
      type: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration}
    - id: context
      type: TypeScriptDefToCSharp.TypeScriptDefContext
    content.vb: Public Sub New(elem As XElement, super As Declaration.Container(Of Declaration), context As TypeScriptDefContext)
  overload: TypeScriptDefToCSharp.Model.Class.#ctor*
  nameWithType.vb: Class.Class(XElement, Declaration.Container(Of Declaration), TypeScriptDefContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TypeScriptDefToCSharp.Model.Class.Class(System.Xml.Linq.XElement, TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Declaration), TypeScriptDefToCSharp.TypeScriptDefContext)
  name.vb: Class(XElement, Declaration.Container(Of Declaration), TypeScriptDefContext)
- uid: TypeScriptDefToCSharp.Model.Class.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Class.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  id: AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  parent: TypeScriptDefToCSharp.Model.Class
  langs:
  - csharp
  - vb
  name: AddContent(XElement, TypeScriptDefContext)
  nameWithType: Class.AddContent(XElement, TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Class.AddContent(System.Xml.Linq.XElement, TypeScriptDefToCSharp.TypeScriptDefContext)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: AddContent
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
    startLine: 107
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public void AddContent(XElement content, TypeScriptDefContext context)
    parameters:
    - id: content
      type: System.Xml.Linq.XElement
    - id: context
      type: TypeScriptDefToCSharp.TypeScriptDefContext
    content.vb: Public Sub AddContent(content As XElement, context As TypeScriptDefContext)
  overload: TypeScriptDefToCSharp.Model.Class.AddContent*
  implements:
  - TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.TypeDeclaration}.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  - TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Property}.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  - TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Method}.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Class.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Class.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  id: Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  parent: TypeScriptDefToCSharp.Model.Class
  langs:
  - csharp
  - vb
  name: Export(TypeScriptDefContext)
  nameWithType: Class.Export(TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Class.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Export
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
    startLine: 176
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public override void Export(TypeScriptDefContext context)
    parameters:
    - id: context
      type: TypeScriptDefToCSharp.TypeScriptDefContext
    content.vb: Public Overrides Sub Export(context As TypeScriptDefContext)
  overridden: TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  overload: TypeScriptDefToCSharp.Model.Class.Export*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TypeScriptDefToCSharp.Model.Class.ToString
  commentId: M:TypeScriptDefToCSharp.Model.Class.ToString
  id: ToString
  parent: TypeScriptDefToCSharp.Model.Class
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Class.ToString()
  fullName: TypeScriptDefToCSharp.Model.Class.ToString()
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ToString
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
    startLine: 208
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: TypeScriptDefToCSharp.Model.Declaration.ToString
  overload: TypeScriptDefToCSharp.Model.Class.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TypeScriptDefToCSharp.Model.Class.New(System.String)
  commentId: M:TypeScriptDefToCSharp.Model.Class.New(System.String)
  id: New(System.String)
  parent: TypeScriptDefToCSharp.Model.Class
  langs:
  - csharp
  - vb
  name: New(String)
  nameWithType: Class.New(String)
  fullName: TypeScriptDefToCSharp.Model.Class.New(System.String)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: New
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
    startLine: 269
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public override string New(string jsObj)
    parameters:
    - id: jsObj
      type: System.String
    return:
      type: System.String
    content.vb: Public Overrides Function New(jsObj As String) As String
  overridden: TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.String)
  overload: TypeScriptDefToCSharp.Model.Class.New*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TypeScriptDefToCSharp.Model.Class.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#TypeDeclaration}#GetEnumerator
  commentId: M:TypeScriptDefToCSharp.Model.Class.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#TypeDeclaration}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#TypeDeclaration}#GetEnumerator
  isEii: true
  parent: TypeScriptDefToCSharp.Model.Class
  langs:
  - csharp
  - vb
  name: IEnumerable<TypeDeclaration>.GetEnumerator()
  nameWithType: Class.IEnumerable<TypeDeclaration>.GetEnumerator()
  fullName: TypeScriptDefToCSharp.Model.Class.System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.TypeDeclaration>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.TypeDeclaration>.GetEnumerator
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
    startLine: 320
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: IEnumerator<TypeDeclaration> IEnumerable<TypeDeclaration>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{TypeScriptDefToCSharp.Model.TypeDeclaration}
    content.vb: Function System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.TypeDeclaration>.GetEnumerator As IEnumerator(Of TypeDeclaration) Implements IEnumerable(Of TypeDeclaration).GetEnumerator
  overload: TypeScriptDefToCSharp.Model.Class.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#TypeDeclaration}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.TypeDeclaration}.GetEnumerator
  nameWithType.vb: Class.System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.TypeDeclaration>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.TypeDeclaration>.GetEnumerator()
- uid: TypeScriptDefToCSharp.Model.Class.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#Property}#GetEnumerator
  commentId: M:TypeScriptDefToCSharp.Model.Class.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#Property}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#Property}#GetEnumerator
  isEii: true
  parent: TypeScriptDefToCSharp.Model.Class
  langs:
  - csharp
  - vb
  name: IEnumerable<Property>.GetEnumerator()
  nameWithType: Class.IEnumerable<Property>.GetEnumerator()
  fullName: TypeScriptDefToCSharp.Model.Class.System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Property>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Property>.GetEnumerator
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
    startLine: 325
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: IEnumerator<Property> IEnumerable<Property>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{TypeScriptDefToCSharp.Model.Property}
    content.vb: Function System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Property>.GetEnumerator As IEnumerator(Of  Property) Implements IEnumerable(Of  Property).GetEnumerator
  overload: TypeScriptDefToCSharp.Model.Class.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#Property}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Property}.GetEnumerator
  nameWithType.vb: Class.System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Property>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Property>.GetEnumerator()
- uid: TypeScriptDefToCSharp.Model.Class.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#Method}#GetEnumerator
  commentId: M:TypeScriptDefToCSharp.Model.Class.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#Method}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#Method}#GetEnumerator
  isEii: true
  parent: TypeScriptDefToCSharp.Model.Class
  langs:
  - csharp
  - vb
  name: IEnumerable<Method>.GetEnumerator()
  nameWithType: Class.IEnumerable<Method>.GetEnumerator()
  fullName: TypeScriptDefToCSharp.Model.Class.System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Method>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Method>.GetEnumerator
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
    startLine: 330
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: IEnumerator<Method> IEnumerable<Method>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{TypeScriptDefToCSharp.Model.Method}
    content.vb: Function System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Method>.GetEnumerator As IEnumerator(Of Method) Implements IEnumerable(Of Method).GetEnumerator
  overload: TypeScriptDefToCSharp.Model.Class.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#Method}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Method}.GetEnumerator
  nameWithType.vb: Class.System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Method>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Method>.GetEnumerator()
- uid: TypeScriptDefToCSharp.Model.Class.System#Collections#IEnumerable#GetEnumerator
  commentId: M:TypeScriptDefToCSharp.Model.Class.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: TypeScriptDefToCSharp.Model.Class
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: Class.IEnumerable.GetEnumerator()
  fullName: TypeScriptDefToCSharp.Model.Class.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Class.cs
    startLine: 335
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: TypeScriptDefToCSharp.Model.Class.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: Class.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: TypeScriptDefToCSharp.Model
  commentId: N:TypeScriptDefToCSharp.Model
  name: TypeScriptDefToCSharp.Model
  nameWithType: TypeScriptDefToCSharp.Model
  fullName: TypeScriptDefToCSharp.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TypeScriptDefToCSharp.Model.Declaration
  commentId: T:TypeScriptDefToCSharp.Model.Declaration
  parent: TypeScriptDefToCSharp.Model
  name: Declaration
  nameWithType: Declaration
  fullName: TypeScriptDefToCSharp.Model.Declaration
- uid: TypeScriptDefToCSharp.Model.TypeDeclaration
  commentId: T:TypeScriptDefToCSharp.Model.TypeDeclaration
  parent: TypeScriptDefToCSharp.Model
  name: TypeDeclaration
  nameWithType: TypeDeclaration
  fullName: TypeScriptDefToCSharp.Model.TypeDeclaration
- uid: TypeScriptDefToCSharp.Model.TSType
  commentId: T:TypeScriptDefToCSharp.Model.TSType
  parent: TypeScriptDefToCSharp.Model
  name: TSType
  nameWithType: TSType
  fullName: TypeScriptDefToCSharp.Model.TSType
- uid: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.TypeDeclaration}
  commentId: T:TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.TypeDeclaration}
  parent: TypeScriptDefToCSharp.Model
  definition: TypeScriptDefToCSharp.Model.Declaration.Container`1
  name: Declaration.Container<TypeDeclaration>
  nameWithType: Declaration.Container<TypeDeclaration>
  fullName: TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.TypeDeclaration>
  nameWithType.vb: Declaration.Container(Of TypeDeclaration)
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.TypeDeclaration)
  name.vb: Declaration.Container(Of TypeDeclaration)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.TypeDeclaration
    name: TypeDeclaration
    nameWithType: TypeDeclaration
    fullName: TypeScriptDefToCSharp.Model.TypeDeclaration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.TypeDeclaration
    name: TypeDeclaration
    nameWithType: TypeDeclaration
    fullName: TypeScriptDefToCSharp.Model.TypeDeclaration
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.TypeDeclaration}
  commentId: T:System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.TypeDeclaration}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TypeDeclaration>
  nameWithType: IEnumerable<TypeDeclaration>
  fullName: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.TypeDeclaration>
  nameWithType.vb: IEnumerable(Of TypeDeclaration)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TypeScriptDefToCSharp.Model.TypeDeclaration)
  name.vb: IEnumerable(Of TypeDeclaration)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.TypeDeclaration
    name: TypeDeclaration
    nameWithType: TypeDeclaration
    fullName: TypeScriptDefToCSharp.Model.TypeDeclaration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.TypeDeclaration
    name: TypeDeclaration
    nameWithType: TypeDeclaration
    fullName: TypeScriptDefToCSharp.Model.TypeDeclaration
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Property}
  commentId: T:TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Property}
  parent: TypeScriptDefToCSharp.Model
  definition: TypeScriptDefToCSharp.Model.Declaration.Container`1
  name: Declaration.Container<Property>
  nameWithType: Declaration.Container<Property>
  fullName: TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Property>
  nameWithType.vb: Declaration.Container(Of Property)
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Property)
  name.vb: Declaration.Container(Of Property)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Property
    name: Property
    nameWithType: Property
    fullName: TypeScriptDefToCSharp.Model.Property
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Property
    name: Property
    nameWithType: Property
    fullName: TypeScriptDefToCSharp.Model.Property
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Property}
  commentId: T:System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Property}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Property>
  nameWithType: IEnumerable<Property>
  fullName: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Property>
  nameWithType.vb: IEnumerable(Of Property)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TypeScriptDefToCSharp.Model.Property)
  name.vb: IEnumerable(Of Property)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Property
    name: Property
    nameWithType: Property
    fullName: TypeScriptDefToCSharp.Model.Property
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Property
    name: Property
    nameWithType: Property
    fullName: TypeScriptDefToCSharp.Model.Property
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Method}
  commentId: T:TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Method}
  parent: TypeScriptDefToCSharp.Model
  definition: TypeScriptDefToCSharp.Model.Declaration.Container`1
  name: Declaration.Container<Method>
  nameWithType: Declaration.Container<Method>
  fullName: TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Method>
  nameWithType.vb: Declaration.Container(Of Method)
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Method)
  name.vb: Declaration.Container(Of Method)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Method
    name: Method
    nameWithType: Method
    fullName: TypeScriptDefToCSharp.Model.Method
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Method
    name: Method
    nameWithType: Method
    fullName: TypeScriptDefToCSharp.Model.Method
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.IDeclaration
  commentId: T:TypeScriptDefToCSharp.Model.IDeclaration
  parent: TypeScriptDefToCSharp.Model
  name: IDeclaration
  nameWithType: IDeclaration
  fullName: TypeScriptDefToCSharp.Model.IDeclaration
- uid: System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Method}
  commentId: T:System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Method}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Method>
  nameWithType: IEnumerable<Method>
  fullName: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Method>
  nameWithType.vb: IEnumerable(Of Method)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TypeScriptDefToCSharp.Model.Method)
  name.vb: IEnumerable(Of Method)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Method
    name: Method
    nameWithType: Method
    fullName: TypeScriptDefToCSharp.Model.Method
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Method
    name: Method
    nameWithType: Method
    fullName: TypeScriptDefToCSharp.Model.Method
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp#Model#TSType#Name
  commentId: P:TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp#Model#TSType#Name
  parent: TypeScriptDefToCSharp.Model.TypeDeclaration
  name: TSType.Name
  nameWithType: TypeDeclaration.TSType.Name
  fullName: TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp.Model.TSType.Name
  nameWithType.vb: TypeDeclaration.TypeScriptDefToCSharp.Model.TSType.Name
  name.vb: TypeScriptDefToCSharp.Model.TSType.Name
- uid: TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp#Model#TSType#ToString
  commentId: M:TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp#Model#TSType#ToString
  parent: TypeScriptDefToCSharp.Model.TypeDeclaration
  name: TSType.ToString()
  nameWithType: TypeDeclaration.TSType.ToString()
  fullName: TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp.Model.TSType.ToString()
  nameWithType.vb: TypeDeclaration.TypeScriptDefToCSharp.Model.TSType.ToString()
  name.vb: TypeScriptDefToCSharp.Model.TSType.ToString()
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp#Model#TSType#ToString
    name: TSType.ToString
    nameWithType: TypeDeclaration.TSType.ToString
    fullName: TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp.Model.TSType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp#Model#TSType#ToString
    name: TypeScriptDefToCSharp.Model.TSType.ToString
    nameWithType: TypeDeclaration.TypeScriptDefToCSharp.Model.TSType.ToString
    fullName: TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp.Model.TSType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration},TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration},TypeScriptDefToCSharp.TypeScriptDefContext)
  parent: TypeScriptDefToCSharp.Model.TypeDeclaration
  isExternal: true
  name: New(XElement, Declaration.Container<Declaration>, TypeScriptDefContext)
  nameWithType: TypeDeclaration.New(XElement, Declaration.Container<Declaration>, TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.Xml.Linq.XElement, TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Declaration>, TypeScriptDefToCSharp.TypeScriptDefContext)
  nameWithType.vb: TypeDeclaration.New(XElement, Declaration.Container(Of Declaration), TypeScriptDefContext)
  fullName.vb: TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.Xml.Linq.XElement, TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Declaration), TypeScriptDefToCSharp.TypeScriptDefContext)
  name.vb: New(XElement, Declaration.Container(Of Declaration), TypeScriptDefContext)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration},TypeScriptDefToCSharp.TypeScriptDefContext)
    name: New
    nameWithType: TypeDeclaration.New
    fullName: TypeScriptDefToCSharp.Model.TypeDeclaration.New
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Declaration
    name: Declaration
    nameWithType: Declaration
    fullName: TypeScriptDefToCSharp.Model.Declaration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration},TypeScriptDefToCSharp.TypeScriptDefContext)
    name: New
    nameWithType: TypeDeclaration.New
    fullName: TypeScriptDefToCSharp.Model.TypeDeclaration.New
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Declaration
    name: Declaration
    nameWithType: Declaration
    fullName: TypeScriptDefToCSharp.Model.Declaration
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.Name
  commentId: P:TypeScriptDefToCSharp.Model.Declaration.Name
  parent: TypeScriptDefToCSharp.Model.Declaration
  name: Name
  nameWithType: Declaration.Name
  fullName: TypeScriptDefToCSharp.Model.Declaration.Name
- uid: TypeScriptDefToCSharp.Model.Declaration.Super
  commentId: P:TypeScriptDefToCSharp.Model.Declaration.Super
  parent: TypeScriptDefToCSharp.Model.Declaration
  name: Super
  nameWithType: Declaration.Super
  fullName: TypeScriptDefToCSharp.Model.Declaration.Super
- uid: TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
  parent: TypeScriptDefToCSharp.Model.Declaration
  isExternal: true
  name: FullName(String)
  nameWithType: Declaration.FullName(String)
  fullName: TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
    name: FullName
    nameWithType: Declaration.FullName
    fullName: TypeScriptDefToCSharp.Model.Declaration.FullName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
    name: FullName
    nameWithType: Declaration.FullName
    fullName: TypeScriptDefToCSharp.Model.Declaration.FullName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String,System.Int32)
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String,System.Int32)
  parent: TypeScriptDefToCSharp.Model.Declaration
  isExternal: true
  name: SkippedFullName(String, Int32)
  nameWithType: Declaration.SkippedFullName(String, Int32)
  fullName: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String, System.Int32)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String,System.Int32)
    name: SkippedFullName
    nameWithType: Declaration.SkippedFullName
    fullName: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String,System.Int32)
    name: SkippedFullName
    nameWithType: Declaration.SkippedFullName
    fullName: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor``1
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.FirstAncestor``1
  parent: TypeScriptDefToCSharp.Model.Declaration
  name: FirstAncestor<TContainer>()
  nameWithType: Declaration.FirstAncestor<TContainer>()
  fullName: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor<TContainer>()
  nameWithType.vb: Declaration.FirstAncestor(Of TContainer)()
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor(Of TContainer)()
  name.vb: FirstAncestor(Of TContainer)()
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor``1
    name: FirstAncestor<TContainer>
    nameWithType: Declaration.FirstAncestor<TContainer>
    fullName: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor<TContainer>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor``1
    name: FirstAncestor(Of TContainer)
    nameWithType: Declaration.FirstAncestor(Of TContainer)
    fullName: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor(Of TContainer)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
  commentId: T:TypeScriptDefToCSharp.Model.Declaration.Container`1
  name: Declaration.Container<T>
  nameWithType: Declaration.Container<T>
  fullName: TypeScriptDefToCSharp.Model.Declaration.Container<T>
  nameWithType.vb: Declaration.Container(Of T)
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.Container(Of T)
  name.vb: Declaration.Container(Of T)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: TypeScriptDefToCSharp.Model.Class.Prefix*
  commentId: Overload:TypeScriptDefToCSharp.Model.Class.Prefix
  name: Prefix
  nameWithType: Class.Prefix
  fullName: TypeScriptDefToCSharp.Model.Class.Prefix
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TypeScriptDefToCSharp.Model.Class.TypeDeclarations*
  commentId: Overload:TypeScriptDefToCSharp.Model.Class.TypeDeclarations
  name: TypeDeclarations
  nameWithType: Class.TypeDeclarations
  fullName: TypeScriptDefToCSharp.Model.Class.TypeDeclarations
- uid: System.Collections.Generic.HashSet{TypeScriptDefToCSharp.Model.TypeDeclaration}
  commentId: T:System.Collections.Generic.HashSet{TypeScriptDefToCSharp.Model.TypeDeclaration}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<TypeDeclaration>
  nameWithType: HashSet<TypeDeclaration>
  fullName: System.Collections.Generic.HashSet<TypeScriptDefToCSharp.Model.TypeDeclaration>
  nameWithType.vb: HashSet(Of TypeDeclaration)
  fullName.vb: System.Collections.Generic.HashSet(Of TypeScriptDefToCSharp.Model.TypeDeclaration)
  name.vb: HashSet(Of TypeDeclaration)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.TypeDeclaration
    name: TypeDeclaration
    nameWithType: TypeDeclaration
    fullName: TypeScriptDefToCSharp.Model.TypeDeclaration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.TypeDeclaration
    name: TypeDeclaration
    nameWithType: TypeDeclaration
    fullName: TypeScriptDefToCSharp.Model.TypeDeclaration
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Class.Properties*
  commentId: Overload:TypeScriptDefToCSharp.Model.Class.Properties
  name: Properties
  nameWithType: Class.Properties
  fullName: TypeScriptDefToCSharp.Model.Class.Properties
- uid: System.Collections.Generic.List{TypeScriptDefToCSharp.Model.Property}
  commentId: T:System.Collections.Generic.List{TypeScriptDefToCSharp.Model.Property}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Property>
  nameWithType: List<Property>
  fullName: System.Collections.Generic.List<TypeScriptDefToCSharp.Model.Property>
  nameWithType.vb: List(Of Property)
  fullName.vb: System.Collections.Generic.List(Of TypeScriptDefToCSharp.Model.Property)
  name.vb: List(Of Property)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Property
    name: Property
    nameWithType: Property
    fullName: TypeScriptDefToCSharp.Model.Property
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Property
    name: Property
    nameWithType: Property
    fullName: TypeScriptDefToCSharp.Model.Property
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Class.Methods*
  commentId: Overload:TypeScriptDefToCSharp.Model.Class.Methods
  name: Methods
  nameWithType: Class.Methods
  fullName: TypeScriptDefToCSharp.Model.Class.Methods
- uid: System.Collections.Generic.List{TypeScriptDefToCSharp.Model.Method}
  commentId: T:System.Collections.Generic.List{TypeScriptDefToCSharp.Model.Method}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Method>
  nameWithType: List<Method>
  fullName: System.Collections.Generic.List<TypeScriptDefToCSharp.Model.Method>
  nameWithType.vb: List(Of Method)
  fullName.vb: System.Collections.Generic.List(Of TypeScriptDefToCSharp.Model.Method)
  name.vb: List(Of Method)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Method
    name: Method
    nameWithType: Method
    fullName: TypeScriptDefToCSharp.Model.Method
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Method
    name: Method
    nameWithType: Method
    fullName: TypeScriptDefToCSharp.Model.Method
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Class.Inherit*
  commentId: Overload:TypeScriptDefToCSharp.Model.Class.Inherit
  name: Inherit
  nameWithType: Class.Inherit
  fullName: TypeScriptDefToCSharp.Model.Class.Inherit
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Class.Public*
  commentId: Overload:TypeScriptDefToCSharp.Model.Class.Public
  name: Public
  nameWithType: Class.Public
  fullName: TypeScriptDefToCSharp.Model.Class.Public
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TypeScriptDefToCSharp.Model.Class.Static*
  commentId: Overload:TypeScriptDefToCSharp.Model.Class.Static
  name: Static
  nameWithType: Class.Static
  fullName: TypeScriptDefToCSharp.Model.Class.Static
- uid: TypeScriptDefToCSharp.Model.Class.GenericArg*
  commentId: Overload:TypeScriptDefToCSharp.Model.Class.GenericArg
  name: GenericArg
  nameWithType: Class.GenericArg
  fullName: TypeScriptDefToCSharp.Model.Class.GenericArg
- uid: TypeScriptDefToCSharp.Model.Class.HasParameterlessConstructor*
  commentId: Overload:TypeScriptDefToCSharp.Model.Class.HasParameterlessConstructor
  name: HasParameterlessConstructor
  nameWithType: Class.HasParameterlessConstructor
  fullName: TypeScriptDefToCSharp.Model.Class.HasParameterlessConstructor
- uid: TypeScriptDefToCSharp.Model.Class.#ctor*
  commentId: Overload:TypeScriptDefToCSharp.Model.Class.#ctor
  name: Class
  nameWithType: Class.Class
  fullName: TypeScriptDefToCSharp.Model.Class.Class
- uid: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration}
  commentId: T:TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration}
  parent: TypeScriptDefToCSharp.Model
  definition: TypeScriptDefToCSharp.Model.Declaration.Container`1
  name: Declaration.Container<Declaration>
  nameWithType: Declaration.Container<Declaration>
  fullName: TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Declaration>
  nameWithType.vb: Declaration.Container(Of Declaration)
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Declaration)
  name.vb: Declaration.Container(Of Declaration)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Declaration
    name: Declaration
    nameWithType: Declaration
    fullName: TypeScriptDefToCSharp.Model.Declaration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Declaration
    name: Declaration
    nameWithType: Declaration
    fullName: TypeScriptDefToCSharp.Model.Declaration
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Linq.XElement
  commentId: T:System.Xml.Linq.XElement
  parent: System.Xml.Linq
  isExternal: true
  name: XElement
  nameWithType: XElement
  fullName: System.Xml.Linq.XElement
- uid: TypeScriptDefToCSharp.TypeScriptDefContext
  commentId: T:TypeScriptDefToCSharp.TypeScriptDefContext
  parent: TypeScriptDefToCSharp
  name: TypeScriptDefContext
  nameWithType: TypeScriptDefContext
  fullName: TypeScriptDefToCSharp.TypeScriptDefContext
- uid: System.Xml.Linq
  commentId: N:System.Xml.Linq
  isExternal: true
  name: System.Xml.Linq
  nameWithType: System.Xml.Linq
  fullName: System.Xml.Linq
- uid: TypeScriptDefToCSharp
  commentId: N:TypeScriptDefToCSharp
  name: TypeScriptDefToCSharp
  nameWithType: TypeScriptDefToCSharp
  fullName: TypeScriptDefToCSharp
- uid: TypeScriptDefToCSharp.Model.Class.AddContent*
  commentId: Overload:TypeScriptDefToCSharp.Model.Class.AddContent
  name: AddContent
  nameWithType: Class.AddContent
  fullName: TypeScriptDefToCSharp.Model.Class.AddContent
- uid: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.TypeDeclaration}.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.TypeDeclaration}.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  parent: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.TypeDeclaration}
  definition: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  name: AddContent(XElement, TypeScriptDefContext)
  nameWithType: Declaration.Container<TypeDeclaration>.AddContent(XElement, TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.TypeDeclaration>.AddContent(System.Xml.Linq.XElement, TypeScriptDefToCSharp.TypeScriptDefContext)
  nameWithType.vb: Declaration.Container(Of TypeDeclaration).AddContent(XElement, TypeScriptDefContext)
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.TypeDeclaration).AddContent(System.Xml.Linq.XElement, TypeScriptDefToCSharp.TypeScriptDefContext)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
    name: AddContent
    nameWithType: Declaration.Container<TypeDeclaration>.AddContent
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.TypeDeclaration>.AddContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
    name: AddContent
    nameWithType: Declaration.Container(Of TypeDeclaration).AddContent
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.TypeDeclaration).AddContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Property}.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Property}.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  parent: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Property}
  definition: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  name: AddContent(XElement, TypeScriptDefContext)
  nameWithType: Declaration.Container<Property>.AddContent(XElement, TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Property>.AddContent(System.Xml.Linq.XElement, TypeScriptDefToCSharp.TypeScriptDefContext)
  nameWithType.vb: Declaration.Container(Of Property).AddContent(XElement, TypeScriptDefContext)
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Property).AddContent(System.Xml.Linq.XElement, TypeScriptDefToCSharp.TypeScriptDefContext)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
    name: AddContent
    nameWithType: Declaration.Container<Property>.AddContent
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Property>.AddContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
    name: AddContent
    nameWithType: Declaration.Container(Of Property).AddContent
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Property).AddContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Method}.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Method}.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  parent: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Method}
  definition: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  name: AddContent(XElement, TypeScriptDefContext)
  nameWithType: Declaration.Container<Method>.AddContent(XElement, TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Method>.AddContent(System.Xml.Linq.XElement, TypeScriptDefToCSharp.TypeScriptDefContext)
  nameWithType.vb: Declaration.Container(Of Method).AddContent(XElement, TypeScriptDefContext)
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Method).AddContent(System.Xml.Linq.XElement, TypeScriptDefToCSharp.TypeScriptDefContext)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
    name: AddContent
    nameWithType: Declaration.Container<Method>.AddContent
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Method>.AddContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
    name: AddContent
    nameWithType: Declaration.Container(Of Method).AddContent
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Method).AddContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  isExternal: true
  name: AddContent(XElement, TypeScriptDefContext)
  nameWithType: Declaration.Container<T>.AddContent(XElement, TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Declaration.Container<T>.AddContent(System.Xml.Linq.XElement, TypeScriptDefToCSharp.TypeScriptDefContext)
  nameWithType.vb: Declaration.Container(Of T).AddContent(XElement, TypeScriptDefContext)
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.Container(Of T).AddContent(System.Xml.Linq.XElement, TypeScriptDefToCSharp.TypeScriptDefContext)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
    name: AddContent
    nameWithType: Declaration.Container<T>.AddContent
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container<T>.AddContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
    name: AddContent
    nameWithType: Declaration.Container(Of T).AddContent
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container(Of T).AddContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  parent: TypeScriptDefToCSharp.Model.Declaration
  name: Export(TypeScriptDefContext)
  nameWithType: Declaration.Export(TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
    name: Export
    nameWithType: Declaration.Export
    fullName: TypeScriptDefToCSharp.Model.Declaration.Export
  - name: (
    nameWithType: (
    fullName: (
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
    name: Export
    nameWithType: Declaration.Export
    fullName: TypeScriptDefToCSharp.Model.Declaration.Export
  - name: (
    nameWithType: (
    fullName: (
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Class.Export*
  commentId: Overload:TypeScriptDefToCSharp.Model.Class.Export
  name: Export
  nameWithType: Class.Export
  fullName: TypeScriptDefToCSharp.Model.Class.Export
- uid: TypeScriptDefToCSharp.Model.Declaration.ToString
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.ToString
  parent: TypeScriptDefToCSharp.Model.Declaration
  name: ToString()
  nameWithType: Declaration.ToString()
  fullName: TypeScriptDefToCSharp.Model.Declaration.ToString()
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.ToString
    name: ToString
    nameWithType: Declaration.ToString
    fullName: TypeScriptDefToCSharp.Model.Declaration.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.ToString
    name: ToString
    nameWithType: Declaration.ToString
    fullName: TypeScriptDefToCSharp.Model.Declaration.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Class.ToString*
  commentId: Overload:TypeScriptDefToCSharp.Model.Class.ToString
  name: ToString
  nameWithType: Class.ToString
  fullName: TypeScriptDefToCSharp.Model.Class.ToString
- uid: TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.String)
  commentId: M:TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.String)
  parent: TypeScriptDefToCSharp.Model.TypeDeclaration
  isExternal: true
  name: New(String)
  nameWithType: TypeDeclaration.New(String)
  fullName: TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.String)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.String)
    name: New
    nameWithType: TypeDeclaration.New
    fullName: TypeScriptDefToCSharp.Model.TypeDeclaration.New
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.String)
    name: New
    nameWithType: TypeDeclaration.New
    fullName: TypeScriptDefToCSharp.Model.TypeDeclaration.New
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Class.New*
  commentId: Overload:TypeScriptDefToCSharp.Model.Class.New
  name: New
  nameWithType: Class.New
  fullName: TypeScriptDefToCSharp.Model.Class.New
- uid: TypeScriptDefToCSharp.Model.Class.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#TypeDeclaration}#GetEnumerator*
  commentId: Overload:TypeScriptDefToCSharp.Model.Class.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#TypeDeclaration}#GetEnumerator
  name: IEnumerable<TypeDeclaration>.GetEnumerator
  nameWithType: Class.IEnumerable<TypeDeclaration>.GetEnumerator
  fullName: TypeScriptDefToCSharp.Model.Class.System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.TypeDeclaration>.GetEnumerator
  nameWithType.vb: Class.System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.TypeDeclaration>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.TypeDeclaration>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.TypeDeclaration}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.TypeDeclaration}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.TypeDeclaration}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<TypeDeclaration>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.TypeDeclaration>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of TypeDeclaration).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of TypeScriptDefToCSharp.Model.TypeDeclaration).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<TypeDeclaration>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.TypeDeclaration>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of TypeDeclaration).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of TypeScriptDefToCSharp.Model.TypeDeclaration).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{TypeScriptDefToCSharp.Model.TypeDeclaration}
  commentId: T:System.Collections.Generic.IEnumerator{TypeScriptDefToCSharp.Model.TypeDeclaration}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<TypeDeclaration>
  nameWithType: IEnumerator<TypeDeclaration>
  fullName: System.Collections.Generic.IEnumerator<TypeScriptDefToCSharp.Model.TypeDeclaration>
  nameWithType.vb: IEnumerator(Of TypeDeclaration)
  fullName.vb: System.Collections.Generic.IEnumerator(Of TypeScriptDefToCSharp.Model.TypeDeclaration)
  name.vb: IEnumerator(Of TypeDeclaration)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.TypeDeclaration
    name: TypeDeclaration
    nameWithType: TypeDeclaration
    fullName: TypeScriptDefToCSharp.Model.TypeDeclaration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.TypeDeclaration
    name: TypeDeclaration
    nameWithType: TypeDeclaration
    fullName: TypeScriptDefToCSharp.Model.TypeDeclaration
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Class.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#Property}#GetEnumerator*
  commentId: Overload:TypeScriptDefToCSharp.Model.Class.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#Property}#GetEnumerator
  name: IEnumerable<Property>.GetEnumerator
  nameWithType: Class.IEnumerable<Property>.GetEnumerator
  fullName: TypeScriptDefToCSharp.Model.Class.System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Property>.GetEnumerator
  nameWithType.vb: Class.System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Property>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Property>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Property}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Property}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Property}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<Property>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Property>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of Property).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of TypeScriptDefToCSharp.Model.Property).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<Property>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Property>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of Property).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of TypeScriptDefToCSharp.Model.Property).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{TypeScriptDefToCSharp.Model.Property}
  commentId: T:System.Collections.Generic.IEnumerator{TypeScriptDefToCSharp.Model.Property}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<Property>
  nameWithType: IEnumerator<Property>
  fullName: System.Collections.Generic.IEnumerator<TypeScriptDefToCSharp.Model.Property>
  nameWithType.vb: IEnumerator(Of Property)
  fullName.vb: System.Collections.Generic.IEnumerator(Of TypeScriptDefToCSharp.Model.Property)
  name.vb: IEnumerator(Of Property)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Property
    name: Property
    nameWithType: Property
    fullName: TypeScriptDefToCSharp.Model.Property
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Property
    name: Property
    nameWithType: Property
    fullName: TypeScriptDefToCSharp.Model.Property
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Class.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#Method}#GetEnumerator*
  commentId: Overload:TypeScriptDefToCSharp.Model.Class.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#Method}#GetEnumerator
  name: IEnumerable<Method>.GetEnumerator
  nameWithType: Class.IEnumerable<Method>.GetEnumerator
  fullName: TypeScriptDefToCSharp.Model.Class.System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Method>.GetEnumerator
  nameWithType.vb: Class.System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Method>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Method>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Method}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Method}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Method}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<Method>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Method>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of Method).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of TypeScriptDefToCSharp.Model.Method).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<Method>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Method>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of Method).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of TypeScriptDefToCSharp.Model.Method).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{TypeScriptDefToCSharp.Model.Method}
  commentId: T:System.Collections.Generic.IEnumerator{TypeScriptDefToCSharp.Model.Method}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<Method>
  nameWithType: IEnumerator<Method>
  fullName: System.Collections.Generic.IEnumerator<TypeScriptDefToCSharp.Model.Method>
  nameWithType.vb: IEnumerator(Of Method)
  fullName.vb: System.Collections.Generic.IEnumerator(Of TypeScriptDefToCSharp.Model.Method)
  name.vb: IEnumerator(Of Method)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Method
    name: Method
    nameWithType: Method
    fullName: TypeScriptDefToCSharp.Model.Method
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Method
    name: Method
    nameWithType: Method
    fullName: TypeScriptDefToCSharp.Model.Method
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Class.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:TypeScriptDefToCSharp.Model.Class.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: Class.IEnumerable.GetEnumerator
  fullName: TypeScriptDefToCSharp.Model.Class.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: Class.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
