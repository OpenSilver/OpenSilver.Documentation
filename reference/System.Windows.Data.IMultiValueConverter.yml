### YamlMime:ManagedReference
items:
- uid: System.Windows.Data.IMultiValueConverter
  commentId: T:System.Windows.Data.IMultiValueConverter
  id: IMultiValueConverter
  parent: System.Windows.Data
  children:
  - System.Windows.Data.IMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)
  - System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)
  langs:
  - csharp
  - vb
  name: IMultiValueConverter
  nameWithType: IMultiValueConverter
  fullName: System.Windows.Data.IMultiValueConverter
  type: Interface
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Data/IMultiValueConverter.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IMultiValueConverter
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Data/IMultiValueConverter.cs
    startLine: 20
  assemblies:
  - OpenSilver
  namespace: System.Windows.Data
  summary: "\nProvides a way to apply custom logic in a <xref href=\"System.Windows.Data.MultiBinding\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public interface IMultiValueConverter
    content.vb: Public Interface IMultiValueConverter
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Windows.Data.IMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)
  commentId: M:System.Windows.Data.IMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)
  id: Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)
  parent: System.Windows.Data.IMultiValueConverter
  langs:
  - csharp
  - vb
  name: Convert(Object[], Type, Object, CultureInfo)
  nameWithType: IMultiValueConverter.Convert(Object[], Type, Object, CultureInfo)
  fullName: System.Windows.Data.IMultiValueConverter.Convert(System.Object[], System.Type, System.Object, System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Data/IMultiValueConverter.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Convert
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Data/IMultiValueConverter.cs
    startLine: 46
  assemblies:
  - OpenSilver
  namespace: System.Windows.Data
  summary: "\nConverts source values to a value for the binding target. The data binding engine calls this \nmethod when it propagates the values from source bindings to the binding target.\n"
  example: []
  syntax:
    content: object Convert(object[] values, Type targetType, object parameter, CultureInfo culture)
    parameters:
    - id: values
      type: System.Object[]
      description: "\nThe array of values that the source bindings in the <xref href=\"System.Windows.Data.MultiBinding\" data-throw-if-not-resolved=\"false\"></xref> produces. The \nvalue <xref href=\"System.Windows.DependencyProperty.UnsetValue\" data-throw-if-not-resolved=\"false\"></xref> indicates that the source binding has no \nvalue to provide for conversion.\n"
    - id: targetType
      type: System.Type
      description: "\nThe type of the binding target property.\n"
    - id: parameter
      type: System.Object
      description: "\nThe converter parameter to use.\n"
    - id: culture
      type: System.Globalization.CultureInfo
      description: "\nThe culture to use in the converter.\n"
    return:
      type: System.Object
      description: "\nA converted value. If the method returns null, the valid null value is used. A return value \nof <xref href=\"System.Windows.DependencyProperty.UnsetValue\" data-throw-if-not-resolved=\"false\"></xref> indicates that the converter did not produce \na value, and that the binding will use the <xref href=\"System.Windows.Data.BindingBase.FallbackValue\" data-throw-if-not-resolved=\"false\"></xref> if it is \navailable, or else will use the default value.\n"
    content.vb: Function Convert(values As Object(), targetType As Type, parameter As Object, culture As CultureInfo) As Object
  overload: System.Windows.Data.IMultiValueConverter.Convert*
  nameWithType.vb: IMultiValueConverter.Convert(Object(), Type, Object, CultureInfo)
  fullName.vb: System.Windows.Data.IMultiValueConverter.Convert(System.Object(), System.Type, System.Object, System.Globalization.CultureInfo)
  name.vb: Convert(Object(), Type, Object, CultureInfo)
- uid: System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)
  commentId: M:System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)
  id: ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)
  parent: System.Windows.Data.IMultiValueConverter
  langs:
  - csharp
  - vb
  name: ConvertBack(Object, Type[], Object, CultureInfo)
  nameWithType: IMultiValueConverter.ConvertBack(Object, Type[], Object, CultureInfo)
  fullName: System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object, System.Type[], System.Object, System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Data/IMultiValueConverter.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ConvertBack
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Data/IMultiValueConverter.cs
    startLine: 67
  assemblies:
  - OpenSilver
  namespace: System.Windows.Data
  summary: "\nConverts a binding target value to the source binding values.\n"
  example: []
  syntax:
    content: object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture)
    parameters:
    - id: value
      type: System.Object
      description: "\nThe value that the binding target produces.\n"
    - id: targetTypes
      type: System.Type[]
      description: "\nThe array of types to convert to. The array length indicates the number and types of values \nthat are suggested for the method to return.\n"
    - id: parameter
      type: System.Object
      description: "\nThe converter parameter to use.\n"
    - id: culture
      type: System.Globalization.CultureInfo
      description: "\nThe culture to use in the converter.\n"
    return:
      type: System.Object[]
      description: "\nAn array of values that have been converted from the target value back to the source values.\n"
    content.vb: Function ConvertBack(value As Object, targetTypes As Type(), parameter As Object, culture As CultureInfo) As Object()
  overload: System.Windows.Data.IMultiValueConverter.ConvertBack*
  nameWithType.vb: IMultiValueConverter.ConvertBack(Object, Type(), Object, CultureInfo)
  fullName.vb: System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object, System.Type(), System.Object, System.Globalization.CultureInfo)
  name.vb: ConvertBack(Object, Type(), Object, CultureInfo)
references:
- uid: System.Windows.Data.MultiBinding
  commentId: T:System.Windows.Data.MultiBinding
  parent: System.Windows.Data
  name: MultiBinding
  nameWithType: MultiBinding
  fullName: System.Windows.Data.MultiBinding
- uid: System.Windows.Data
  commentId: N:System.Windows.Data
  name: System.Windows.Data
  nameWithType: System.Windows.Data
  fullName: System.Windows.Data
- uid: System.Windows.DependencyProperty.UnsetValue
  commentId: F:System.Windows.DependencyProperty.UnsetValue
  isExternal: true
- uid: System.Windows.Data.BindingBase.FallbackValue
  commentId: P:System.Windows.Data.BindingBase.FallbackValue
  parent: System.Windows.Data.BindingBase
  name: FallbackValue
  nameWithType: BindingBase.FallbackValue
  fullName: System.Windows.Data.BindingBase.FallbackValue
- uid: System.Windows.Data.IMultiValueConverter.Convert*
  commentId: Overload:System.Windows.Data.IMultiValueConverter.Convert
  name: Convert
  nameWithType: IMultiValueConverter.Convert
  fullName: System.Windows.Data.IMultiValueConverter.Convert
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Windows.Data.BindingBase
  commentId: T:System.Windows.Data.BindingBase
  parent: System.Windows.Data
  name: BindingBase
  nameWithType: BindingBase
  fullName: System.Windows.Data.BindingBase
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: System.Windows.Data.IMultiValueConverter.ConvertBack*
  commentId: Overload:System.Windows.Data.IMultiValueConverter.ConvertBack
  name: ConvertBack
  nameWithType: IMultiValueConverter.ConvertBack
  fullName: System.Windows.Data.IMultiValueConverter.ConvertBack
- uid: System.Type[]
  isExternal: true
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
