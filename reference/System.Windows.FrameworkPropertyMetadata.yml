### YamlMime:ManagedReference
items:
- uid: System.Windows.FrameworkPropertyMetadata
  commentId: T:System.Windows.FrameworkPropertyMetadata
  id: FrameworkPropertyMetadata
  parent: System.Windows
  children:
  - System.Windows.FrameworkPropertyMetadata.#ctor
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.FrameworkPropertyMetadata.AffectsArrange
  - System.Windows.FrameworkPropertyMetadata.AffectsMeasure
  - System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
  - System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
  - System.Windows.FrameworkPropertyMetadata.AffectsRender
  - System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  - System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  langs:
  - csharp
  - vb
  name: FrameworkPropertyMetadata
  nameWithType: FrameworkPropertyMetadata
  fullName: System.Windows.FrameworkPropertyMetadata
  type: Class
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: FrameworkPropertyMetadata
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
    startLine: 39
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nReports or applies metadata for a dependency property, specifically adding framework-specific\nproperty system characteristics.\n"
  example: []
  syntax:
    content: 'public class FrameworkPropertyMetadata : PropertyMetadata'
    content.vb: >-
      Public Class FrameworkPropertyMetadata
          Inherits PropertyMetadata
  inheritance:
  - System.Object
  - System.Windows.PropertyMetadata
  inheritedMembers:
  - System.Windows.PropertyMetadata.DefaultValue
  - System.Windows.PropertyMetadata.PropertyChangedCallback
  - System.Windows.PropertyMetadata.CoerceValueCallback
  - System.Windows.PropertyMetadata.IsSealed
  - System.Windows.PropertyMetadata.Inherits
  - System.Windows.PropertyMetadata.MethodToUpdateDom
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Windows.FrameworkPropertyMetadata.#ctor
  commentId: M:System.Windows.FrameworkPropertyMetadata.#ctor
  id: '#ctor'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  - vb
  name: FrameworkPropertyMetadata()
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata()
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata()
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
    startLine: 44
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nInitializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public FrameworkPropertyMetadata()
    content.vb: Public Sub New
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)
  commentId: M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  - vb
  name: FrameworkPropertyMetadata(Object)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(System.Object)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
    startLine: 60
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nInitializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\" data-throw-if-not-resolved=\"false\"></xref> class\nwith the specified default value.\n"
  example: []
  syntax:
    content: public FrameworkPropertyMetadata(object defaultValue)
    parameters:
    - id: defaultValue
      type: System.Object
      description: "\nThe default value of the dependency property, usually provided as a value of\na specific type.\n"
    content.vb: Public Sub New(defaultValue As Object)
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\ndefaultValue is set to <xref href=\"System.Windows.DependencyProperty.UnsetValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  commentId: M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Windows.PropertyChangedCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  - vb
  name: FrameworkPropertyMetadata(PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(System.Windows.PropertyChangedCallback)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
    startLine: 73
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nInitializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\" data-throw-if-not-resolved=\"false\"></xref> class\nwith the specified <xref href=\"System.Windows.PropertyChangedCallback\" data-throw-if-not-resolved=\"false\"></xref> callback.\n"
  example: []
  syntax:
    content: public FrameworkPropertyMetadata(PropertyChangedCallback propertyChangedCallback)
    parameters:
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "\nA reference to a handler implementation that the property system will call whenever\nthe effective value of the property changes.\n"
    content.vb: Public Sub New(propertyChangedCallback As PropertyChangedCallback)
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  commentId: M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  - vb
  name: FrameworkPropertyMetadata(PropertyChangedCallback, CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback, CoerceValueCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(System.Windows.PropertyChangedCallback, System.Windows.CoerceValueCallback)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
    startLine: 91
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nInitializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\" data-throw-if-not-resolved=\"false\"></xref> class\nwith the specified callbacks.\n"
  example: []
  syntax:
    content: public FrameworkPropertyMetadata(PropertyChangedCallback propertyChangedCallback, CoerceValueCallback coerceValueCallback)
    parameters:
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "\nA reference to a handler implementation that the property system will call whenever\nthe effective value of the property changes.\n"
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "\nA reference to a handler implementation will be called whenever the property\nsystem calls <xref href=\"System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\" data-throw-if-not-resolved=\"false\"></xref>\nfor this dependency property.\n"
    content.vb: Public Sub New(propertyChangedCallback As PropertyChangedCallback, coerceValueCallback As CoerceValueCallback)
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  commentId: M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  - vb
  name: FrameworkPropertyMetadata(Object, PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, PropertyChangedCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(System.Object, System.Windows.PropertyChangedCallback)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
    startLine: 113
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nInitializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\" data-throw-if-not-resolved=\"false\"></xref> class\nwith the provided default value and specified <xref href=\"System.Windows.PropertyChangedCallback\" data-throw-if-not-resolved=\"false\"></xref>\ncallback.\n"
  example: []
  syntax:
    content: public FrameworkPropertyMetadata(object defaultValue, PropertyChangedCallback propertyChangedCallback)
    parameters:
    - id: defaultValue
      type: System.Object
      description: "\nThe default value of the dependency property, usually provided as a value of\na specific type.\n"
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "\nA reference to a handler implementation that the property system will call whenever\nthe effective value of the property changes.\n"
    content.vb: Public Sub New(defaultValue As Object, propertyChangedCallback As PropertyChangedCallback)
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\ndefaultValue is set to <xref href=\"System.Windows.DependencyProperty.UnsetValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  commentId: M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  - vb
  name: FrameworkPropertyMetadata(Object, PropertyChangedCallback, CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, PropertyChangedCallback, CoerceValueCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(System.Object, System.Windows.PropertyChangedCallback, System.Windows.CoerceValueCallback)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
    startLine: 137
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nInitializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\" data-throw-if-not-resolved=\"false\"></xref> class\nwith the provided default value and specified callbacks.\n"
  example: []
  syntax:
    content: public FrameworkPropertyMetadata(object defaultValue, PropertyChangedCallback propertyChangedCallback, CoerceValueCallback coerceValueCallback)
    parameters:
    - id: defaultValue
      type: System.Object
      description: "\nThe default value of the dependency property, usually provided as a specific type.\n"
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "\nA reference to a handler implementation that the property system will call whenever\nthe effective value of the property changes.\n"
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "\nA reference to a handler implementation that will be called whenever the property\nsystem calls <xref href=\"System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\" data-throw-if-not-resolved=\"false\"></xref>\nfor this dependency property.\n"
    content.vb: Public Sub New(defaultValue As Object, propertyChangedCallback As PropertyChangedCallback, coerceValueCallback As CoerceValueCallback)
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\ndefaultValue is set to <xref href=\"System.Windows.DependencyProperty.UnsetValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)
  commentId: M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)
  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  - vb
  name: FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(System.Object, System.Windows.FrameworkPropertyMetadataOptions)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
    startLine: 158
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nInitializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\" data-throw-if-not-resolved=\"false\"></xref> class\nwith the provided default value and framework-level metadata options.\n"
  example: []
  syntax:
    content: public FrameworkPropertyMetadata(object defaultValue, FrameworkPropertyMetadataOptions flags)
    parameters:
    - id: defaultValue
      type: System.Object
      description: "\nThe default value of the dependency property, usually provided as a value of\na specific type.\n"
    - id: flags
      type: System.Windows.FrameworkPropertyMetadataOptions
      description: "\nThe metadata option flags (a combination of <xref href=\"System.Windows.FrameworkPropertyMetadataOptions\" data-throw-if-not-resolved=\"false\"></xref>\nvalues). These options specify characteristics of the dependency property that\ninteract with systems such as layout or data binding.\n"
    content.vb: Public Sub New(defaultValue As Object, flags As FrameworkPropertyMetadataOptions)
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\ndefaultValue is set to <xref href=\"System.Windows.DependencyProperty.UnsetValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)
  commentId: M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  - vb
  name: FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(System.Object, System.Windows.FrameworkPropertyMetadataOptions, System.Windows.PropertyChangedCallback)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
    startLine: 185
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nInitializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\" data-throw-if-not-resolved=\"false\"></xref> class\nwith the provided default value and framework metadata options, and specified\n<xref href=\"System.Windows.PropertyChangedCallback\" data-throw-if-not-resolved=\"false\"></xref> callback.\n"
  example: []
  syntax:
    content: public FrameworkPropertyMetadata(object defaultValue, FrameworkPropertyMetadataOptions flags, PropertyChangedCallback propertyChangedCallback)
    parameters:
    - id: defaultValue
      type: System.Object
      description: "\nThe default value of the dependency property, usually provided as a value of\na specific type.\n"
    - id: flags
      type: System.Windows.FrameworkPropertyMetadataOptions
      description: "\nThe metadata option flags (a combination of <xref href=\"System.Windows.FrameworkPropertyMetadataOptions\" data-throw-if-not-resolved=\"false\"></xref>\nvalues). These options specify characteristics of the dependency property that \ninteract with systems such as layout or data binding.\n"
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "\nA reference to a handler implementation that the property system will call whenever\nthe effective value of the property changes.\n"
    content.vb: Public Sub New(defaultValue As Object, flags As FrameworkPropertyMetadataOptions, propertyChangedCallback As PropertyChangedCallback)
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\ndefaultValue is set to <xref href=\"System.Windows.DependencyProperty.UnsetValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  commentId: M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  - vb
  name: FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback, CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback, CoerceValueCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(System.Object, System.Windows.FrameworkPropertyMetadataOptions, System.Windows.PropertyChangedCallback, System.Windows.CoerceValueCallback)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
    startLine: 216
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nInitializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\" data-throw-if-not-resolved=\"false\"></xref> class\nwith the provided default value and framework metadata options, and specified\ncallbacks.\n"
  example: []
  syntax:
    content: public FrameworkPropertyMetadata(object defaultValue, FrameworkPropertyMetadataOptions flags, PropertyChangedCallback propertyChangedCallback, CoerceValueCallback coerceValueCallback)
    parameters:
    - id: defaultValue
      type: System.Object
      description: "\nThe default value of the dependency property, usually provided as a specific type.\n"
    - id: flags
      type: System.Windows.FrameworkPropertyMetadataOptions
      description: "\nThe metadata option flags (a combination of <xref href=\"System.Windows.FrameworkPropertyMetadataOptions\" data-throw-if-not-resolved=\"false\"></xref>\nvalues). These options specify characteristics of the dependency property that\ninteract with systems such as layout or data binding.\n"
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "\nA reference to a handler implementation that the property system will call whenever\nthe effective value of the property changes.\n"
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "\nA reference to a handler implementation that will be called whenever the property\nsystem calls <xref href=\"System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\" data-throw-if-not-resolved=\"false\"></xref>\nagainst this property.\n"
    content.vb: Public Sub New(defaultValue As Object, flags As FrameworkPropertyMetadataOptions, propertyChangedCallback As PropertyChangedCallback, coerceValueCallback As CoerceValueCallback)
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\ndefaultValue is set to <xref href=\"System.Windows.DependencyProperty.UnsetValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.FrameworkPropertyMetadata.AffectsMeasure
  commentId: P:System.Windows.FrameworkPropertyMetadata.AffectsMeasure
  id: AffectsMeasure
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  - vb
  name: AffectsMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsMeasure
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsMeasure
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: AffectsMeasure
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
    startLine: 238
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets a value that indicates whether a dependency property potentially\naffects the measure pass during layout engine operations.\n"
  example: []
  syntax:
    content: public bool AffectsMeasure { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: "\ntrue if the dependency property on which this metadata exists potentially affects\nthe measure pass; otherwise, false. The default is false.\n"
    content.vb: Public Property AffectsMeasure As Boolean
  overload: System.Windows.FrameworkPropertyMetadata.AffectsMeasure*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe metadata has already been applied to a dependency property operation, so\nthat metadata is sealed and properties of the metadata cannot be set.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.FrameworkPropertyMetadata.AffectsArrange
  commentId: P:System.Windows.FrameworkPropertyMetadata.AffectsArrange
  id: AffectsArrange
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  - vb
  name: AffectsArrange
  nameWithType: FrameworkPropertyMetadata.AffectsArrange
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsArrange
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: AffectsArrange
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
    startLine: 256
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets a value that indicates whether a dependency property potentially\naffects the arrange pass during layout engine operations.\n"
  example: []
  syntax:
    content: public bool AffectsArrange { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: "\ntrue if the dependency property on which this metadata exists potentially affects\nthe arrange pass; otherwise, false. The default is false.\n"
    content.vb: Public Property AffectsArrange As Boolean
  overload: System.Windows.FrameworkPropertyMetadata.AffectsArrange*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe metadata has already been applied to a dependency property operation, so\nthat metadata is sealed and properties of the metadata cannot be set.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
  commentId: P:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
  id: AffectsParentMeasure
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  - vb
  name: AffectsParentMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsParentMeasure
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: AffectsParentMeasure
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
    startLine: 276
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets a value that indicates whether a dependency property potentially\naffects the measure pass of its parent element&apos;s layout during layout engine\noperations.\n"
  example: []
  syntax:
    content: public bool AffectsParentMeasure { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: "\ntrue if the dependency property on which this metadata exists potentially affects\nthe measure pass specifically on its parent element; otherwise, false.The default\nis false.\n"
    content.vb: Public Property AffectsParentMeasure As Boolean
  overload: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe metadata has already been applied to a dependency property operation, so\nthat metadata is sealed and properties of the metadata cannot be set.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
  commentId: P:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
  id: AffectsParentArrange
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  - vb
  name: AffectsParentArrange
  nameWithType: FrameworkPropertyMetadata.AffectsParentArrange
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: AffectsParentArrange
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
    startLine: 296
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets a value that indicates whether a dependency property potentially\naffects the arrange pass of its parent element&apos;s layout during layout engine\noperations.\n"
  example: []
  syntax:
    content: public bool AffectsParentArrange { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: "\ntrue if the dependency property on which this metadata exists potentially affects\nthe arrange pass specifically on its parent element; otherwise, false. The default\nis false.\n"
    content.vb: Public Property AffectsParentArrange As Boolean
  overload: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe metadata has already been applied to a dependency property operation, so\nthat metadata is sealed and properties of the metadata cannot be set.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.FrameworkPropertyMetadata.AffectsRender
  commentId: P:System.Windows.FrameworkPropertyMetadata.AffectsRender
  id: AffectsRender
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  - vb
  name: AffectsRender
  nameWithType: FrameworkPropertyMetadata.AffectsRender
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsRender
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: AffectsRender
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
    startLine: 315
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets a value that indicates whether a dependency property potentially\naffects the general layout in some way that does not specifically influence arrangement\nor measurement, but would require a redraw.\n"
  example: []
  syntax:
    content: public bool AffectsRender { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: "\ntrue if the dependency property on which this metadata exists affects rendering;\notherwise, false. The default is false.\n"
    content.vb: Public Property AffectsRender As Boolean
  overload: System.Windows.FrameworkPropertyMetadata.AffectsRender*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe metadata has already been applied to a dependency property operation, so\nthat metadata is sealed and properties of the metadata cannot be set.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  commentId: M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  id: Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  - vb
  name: Merge(PropertyMetadata, DependencyProperty)
  nameWithType: FrameworkPropertyMetadata.Merge(PropertyMetadata, DependencyProperty)
  fullName: System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata, System.Windows.DependencyProperty)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Merge
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
    startLine: 351
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nEnables a merge of the source metadata with base metadata.\n"
  example: []
  syntax:
    content: protected override void Merge(PropertyMetadata baseMetadata, DependencyProperty dp)
    parameters:
    - id: baseMetadata
      type: System.Windows.PropertyMetadata
      description: "\nThe base metadata to merge.\n"
    - id: dp
      type: System.Windows.DependencyProperty
      description: "\nThe dependency property this metadata is being applied to.\n"
    content.vb: Protected Overrides Sub Merge(baseMetadata As PropertyMetadata, dp As DependencyProperty)
  overridden: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  overload: System.Windows.FrameworkPropertyMetadata.Merge*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  commentId: M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  id: OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  - vb
  name: OnApply(DependencyProperty, Type)
  nameWithType: FrameworkPropertyMetadata.OnApply(DependencyProperty, Type)
  fullName: System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty, System.Type)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnApply
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/FrameworkPropertyMetadata.cs
    startLine: 391
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nCalled when this metadata has been applied to a property, which indicates that\nthe metadata is being sealed.\n"
  example: []
  syntax:
    content: protected override void OnApply(DependencyProperty dp, Type targetType)
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "\nThe dependency property to which the metadata has been applied.\n"
    - id: targetType
      type: System.Type
      description: "\nThe type associated with this metadata if this is type-specific metadata. If\nthis is default metadata, this value can be null.\n"
    content.vb: Protected Overrides Sub OnApply(dp As DependencyProperty, targetType As Type)
  overridden: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  overload: System.Windows.FrameworkPropertyMetadata.OnApply*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: System.Windows
  commentId: N:System.Windows
  name: System.Windows
  nameWithType: System.Windows
  fullName: System.Windows
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.PropertyMetadata
  commentId: T:System.Windows.PropertyMetadata
  parent: System.Windows
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.PropertyMetadata.DefaultValue
  commentId: P:System.Windows.PropertyMetadata.DefaultValue
  parent: System.Windows.PropertyMetadata
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  commentId: P:System.Windows.PropertyMetadata.PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  commentId: P:System.Windows.PropertyMetadata.CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.IsSealed
  commentId: P:System.Windows.PropertyMetadata.IsSealed
  parent: System.Windows.PropertyMetadata
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
- uid: System.Windows.PropertyMetadata.Inherits
  commentId: P:System.Windows.PropertyMetadata.Inherits
  parent: System.Windows.PropertyMetadata
  name: Inherits
  nameWithType: PropertyMetadata.Inherits
  fullName: System.Windows.PropertyMetadata.Inherits
- uid: System.Windows.PropertyMetadata.MethodToUpdateDom
  commentId: P:System.Windows.PropertyMetadata.MethodToUpdateDom
  parent: System.Windows.PropertyMetadata
  name: MethodToUpdateDom
  nameWithType: PropertyMetadata.MethodToUpdateDom
  fullName: System.Windows.PropertyMetadata.MethodToUpdateDom
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.Windows.FrameworkPropertyMetadata
  commentId: T:System.Windows.FrameworkPropertyMetadata
  name: FrameworkPropertyMetadata
  nameWithType: FrameworkPropertyMetadata
  fullName: System.Windows.FrameworkPropertyMetadata
- uid: System.Windows.FrameworkPropertyMetadata.#ctor*
  commentId: Overload:System.Windows.FrameworkPropertyMetadata.#ctor
  name: FrameworkPropertyMetadata
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata
- uid: System.Windows.DependencyProperty.UnsetValue
  commentId: F:System.Windows.DependencyProperty.UnsetValue
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: System.Windows.PropertyChangedCallback
  commentId: T:System.Windows.PropertyChangedCallback
  parent: System.Windows
  name: PropertyChangedCallback
  nameWithType: PropertyChangedCallback
  fullName: System.Windows.PropertyChangedCallback
- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  commentId: M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  name: CoerceValue(DependencyProperty)
  nameWithType: DependencyObject.CoerceValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  spec.csharp:
  - uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
    name: CoerceValue
    nameWithType: DependencyObject.CoerceValue
    fullName: System.Windows.DependencyObject.CoerceValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
    name: CoerceValue
    nameWithType: DependencyObject.CoerceValue
    fullName: System.Windows.DependencyObject.CoerceValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.CoerceValueCallback
  commentId: T:System.Windows.CoerceValueCallback
  parent: System.Windows
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
- uid: System.Windows.DependencyObject
  commentId: T:System.Windows.DependencyObject
  parent: System.Windows
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.FrameworkPropertyMetadataOptions
  commentId: T:System.Windows.FrameworkPropertyMetadataOptions
  parent: System.Windows
  name: FrameworkPropertyMetadataOptions
  nameWithType: FrameworkPropertyMetadataOptions
  fullName: System.Windows.FrameworkPropertyMetadataOptions
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: System.Windows.FrameworkPropertyMetadata.AffectsMeasure*
  commentId: Overload:System.Windows.FrameworkPropertyMetadata.AffectsMeasure
  name: AffectsMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsMeasure
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsMeasure
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.FrameworkPropertyMetadata.AffectsArrange*
  commentId: Overload:System.Windows.FrameworkPropertyMetadata.AffectsArrange
  name: AffectsArrange
  nameWithType: FrameworkPropertyMetadata.AffectsArrange
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsArrange
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure*
  commentId: Overload:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
  name: AffectsParentMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsParentMeasure
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange*
  commentId: Overload:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
  name: AffectsParentArrange
  nameWithType: FrameworkPropertyMetadata.AffectsParentArrange
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
- uid: System.Windows.FrameworkPropertyMetadata.AffectsRender*
  commentId: Overload:System.Windows.FrameworkPropertyMetadata.AffectsRender
  name: AffectsRender
  nameWithType: FrameworkPropertyMetadata.AffectsRender
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsRender
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  commentId: M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  name: Merge(PropertyMetadata, DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata, DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata, System.Windows.DependencyProperty)
  spec.csharp:
  - uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
    name: Merge
    nameWithType: PropertyMetadata.Merge
    fullName: System.Windows.PropertyMetadata.Merge
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.PropertyMetadata
    name: PropertyMetadata
    nameWithType: PropertyMetadata
    fullName: System.Windows.PropertyMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
    name: Merge
    nameWithType: PropertyMetadata.Merge
    fullName: System.Windows.PropertyMetadata.Merge
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.PropertyMetadata
    name: PropertyMetadata
    nameWithType: PropertyMetadata
    fullName: System.Windows.PropertyMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.FrameworkPropertyMetadata.Merge*
  commentId: Overload:System.Windows.FrameworkPropertyMetadata.Merge
  name: Merge
  nameWithType: FrameworkPropertyMetadata.Merge
  fullName: System.Windows.FrameworkPropertyMetadata.Merge
- uid: System.Windows.DependencyProperty
  commentId: T:System.Windows.DependencyProperty
  parent: System.Windows
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  commentId: M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  isExternal: true
  name: OnApply(DependencyProperty, Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty, Type)
  fullName: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty, System.Type)
  spec.csharp:
  - uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
    name: OnApply
    nameWithType: PropertyMetadata.OnApply
    fullName: System.Windows.PropertyMetadata.OnApply
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
    name: OnApply
    nameWithType: PropertyMetadata.OnApply
    fullName: System.Windows.PropertyMetadata.OnApply
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.FrameworkPropertyMetadata.OnApply*
  commentId: Overload:System.Windows.FrameworkPropertyMetadata.OnApply
  name: OnApply
  nameWithType: FrameworkPropertyMetadata.OnApply
  fullName: System.Windows.FrameworkPropertyMetadata.OnApply
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
