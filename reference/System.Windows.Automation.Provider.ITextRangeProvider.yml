### YamlMime:ManagedReference
items:
- uid: System.Windows.Automation.Provider.ITextRangeProvider
  commentId: T:System.Windows.Automation.Provider.ITextRangeProvider
  id: ITextRangeProvider
  parent: System.Windows.Automation.Provider
  children:
  - System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection
  - System.Windows.Automation.Provider.ITextRangeProvider.Clone
  - System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)
  - System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  - System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)
  - System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)
  - System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)
  - System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)
  - System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles
  - System.Windows.Automation.Provider.ITextRangeProvider.GetChildren
  - System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement
  - System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)
  - System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)
  - System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  - System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)
  - System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection
  - System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)
  - System.Windows.Automation.Provider.ITextRangeProvider.Select
  langs:
  - csharp
  - vb
  name: ITextRangeProvider
  nameWithType: ITextRangeProvider
  fullName: System.Windows.Automation.Provider.ITextRangeProvider
  type: Interface
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ITextRangeProvider
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
    startLine: 21
  assemblies:
  - OpenSilver
  namespace: System.Windows.Automation.Provider
  summary: "\nExposes methods and properties to support UI automation client access to a span \nof continuous text in a text container that implements <xref href=\"System.Windows.Automation.Provider.ITextProvider\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public interface ITextRangeProvider
    content.vb: Public Interface ITextRangeProvider
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Clone
  commentId: M:System.Windows.Automation.Provider.ITextRangeProvider.Clone
  id: Clone
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: ITextRangeProvider.Clone()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Clone()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Clone
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
    startLine: 30
  assemblies:
  - OpenSilver
  namespace: System.Windows.Automation.Provider
  summary: "\nReturns a new <xref href=\"System.Windows.Automation.Provider.ITextRangeProvider\" data-throw-if-not-resolved=\"false\"></xref> that is identical to the original \n<xref href=\"System.Windows.Automation.Provider.ITextRangeProvider\" data-throw-if-not-resolved=\"false\"></xref> and that inherits all the properties of the original.\n"
  example: []
  syntax:
    content: ITextRangeProvider Clone()
    return:
      type: System.Windows.Automation.Provider.ITextRangeProvider
      description: "\nThe new text range. This method never returns null.\n"
    content.vb: Function Clone As ITextRangeProvider
  overload: System.Windows.Automation.Provider.ITextRangeProvider.Clone*
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)
  commentId: M:System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)
  id: Compare(System.Windows.Automation.Provider.ITextRangeProvider)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  - vb
  name: Compare(ITextRangeProvider)
  nameWithType: ITextRangeProvider.Compare(ITextRangeProvider)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Compare
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
    startLine: 46
  assemblies:
  - OpenSilver
  namespace: System.Windows.Automation.Provider
  summary: "\nReturns a value that indicates whether the span (the <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint.Start\" data-throw-if-not-resolved=\"false\"></xref> \nendpoint through the <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint.End\" data-throw-if-not-resolved=\"false\"></xref> endpoint) of a text range is the \nsame as another text range.\n"
  example: []
  syntax:
    content: bool Compare(ITextRangeProvider range)
    parameters:
    - id: range
      type: System.Windows.Automation.Provider.ITextRangeProvider
      description: "\nA text range to compare.\n"
    return:
      type: System.Boolean
      description: "\ntrue if the span of both text ranges is identical; otherwise, false.\n"
    content.vb: Function Compare(range As ITextRangeProvider) As Boolean
  overload: System.Windows.Automation.Provider.ITextRangeProvider.Compare*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe range to compare does not come from the same text provider.\n"
- uid: System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  commentId: M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  id: CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  - vb
  name: CompareEndpoints(TextPatternRangeEndpoint, ITextRangeProvider, TextPatternRangeEndpoint)
  nameWithType: ITextRangeProvider.CompareEndpoints(TextPatternRangeEndpoint, ITextRangeProvider, TextPatternRangeEndpoint)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint, System.Windows.Automation.Provider.ITextRangeProvider, System.Windows.Automation.Text.TextPatternRangeEndpoint)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CompareEndpoints
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
    startLine: 70
  assemblies:
  - OpenSilver
  namespace: System.Windows.Automation.Provider
  summary: "\nReturns a value that specifies whether two text ranges have identical endpoints.\n"
  example: []
  syntax:
    content: int CompareEndpoints(TextPatternRangeEndpoint endpoint, ITextRangeProvider targetRange, TextPatternRangeEndpoint targetEndpoint)
    parameters:
    - id: endpoint
      type: System.Windows.Automation.Text.TextPatternRangeEndpoint
      description: "\nThe <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint.Start\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint.End\" data-throw-if-not-resolved=\"false\"></xref> \nendpoint of the caller.\n"
    - id: targetRange
      type: System.Windows.Automation.Provider.ITextRangeProvider
      description: "\nThe target range for comparison.\n"
    - id: targetEndpoint
      type: System.Windows.Automation.Text.TextPatternRangeEndpoint
      description: "\nThe <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint.Start\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint.End\" data-throw-if-not-resolved=\"false\"></xref> \nendpoint of the target.\n"
    return:
      type: System.Int32
      description: "\nReturns a negative value if the caller&apos;s endpoint occurs earlier in the text than the target \nendpoint. Returns zero if the caller&apos;s endpoint is at the same location as the target endpoint.\nReturns a positive value if the caller&apos;s endpoint occurs later in the text than the target endpoint.\n"
    content.vb: Function CompareEndpoints(endpoint As TextPatternRangeEndpoint, targetRange As ITextRangeProvider, targetEndpoint As TextPatternRangeEndpoint) As Integer
  overload: System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">targetRange</code> is from a different text provider.\n"
- uid: System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)
  commentId: M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)
  id: ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  - vb
  name: ExpandToEnclosingUnit(TextUnit)
  nameWithType: ITextRangeProvider.ExpandToEnclosingUnit(TextUnit)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ExpandToEnclosingUnit
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
    startLine: 78
  assemblies:
  - OpenSilver
  namespace: System.Windows.Automation.Provider
  summary: "\nExpands the text range to the specified text unit.\n"
  example: []
  syntax:
    content: void ExpandToEnclosingUnit(TextUnit unit)
    parameters:
    - id: unit
      type: System.Windows.Automation.Text.TextUnit
      description: "\nThe textual unit.\n"
    content.vb: Sub ExpandToEnclosingUnit(unit As TextUnit)
  overload: System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit*
- uid: System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)
  commentId: M:System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)
  id: FindAttribute(System.Int32,System.Object,System.Boolean)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  - vb
  name: FindAttribute(Int32, Object, Boolean)
  nameWithType: ITextRangeProvider.FindAttribute(Int32, Object, Boolean)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32, System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: FindAttribute
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
    startLine: 95
  assemblies:
  - OpenSilver
  namespace: System.Windows.Automation.Provider
  summary: "\nReturns a text range subset that has the specified attribute ID and attribute value.\n"
  example: []
  syntax:
    content: ITextRangeProvider FindAttribute(int attributeId, object value, bool backward)
    parameters:
    - id: attributeId
      type: System.Int32
      description: "\nThe attribute ID to search for.\n"
    - id: value
      type: System.Object
      description: "\nThe attribute value to search for. This value must match the specified attribute type.\n"
    - id: backward
      type: System.Boolean
      description: "\ntrue if the last occurring text range should be returned instead of the first; otherwise, false.\n"
    return:
      type: System.Windows.Automation.Provider.ITextRangeProvider
      description: "\nA text range that has a matching attribute ID and attribute value; otherwise, null.\n"
    content.vb: Function FindAttribute(attributeId As Integer, value As Object, backward As Boolean) As ITextRangeProvider
  overload: System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute*
- uid: System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)
  commentId: M:System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)
  id: FindText(System.String,System.Boolean,System.Boolean)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  - vb
  name: FindText(String, Boolean, Boolean)
  nameWithType: ITextRangeProvider.FindText(String, Boolean, Boolean)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: FindText
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
    startLine: 112
  assemblies:
  - OpenSilver
  namespace: System.Windows.Automation.Provider
  summary: "\nReturns a text range subset that contains the specified text.\n"
  example: []
  syntax:
    content: ITextRangeProvider FindText(string text, bool backward, bool ignoreCase)
    parameters:
    - id: text
      type: System.String
      description: "\nThe text string to search for.\n"
    - id: backward
      type: System.Boolean
      description: "\ntrue to return the last occurring text range instead of the first; otherwise, false.\n"
    - id: ignoreCase
      type: System.Boolean
      description: "\ntrue to ignore case; otherwise, false.\n"
    return:
      type: System.Windows.Automation.Provider.ITextRangeProvider
      description: "\nA text range that matches the specified text; otherwise, null.\n"
    content.vb: Function FindText(text As String, backward As Boolean, ignoreCase As Boolean) As ITextRangeProvider
  overload: System.Windows.Automation.Provider.ITextRangeProvider.FindText*
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)
  commentId: M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)
  id: GetAttributeValue(System.Int32)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  - vb
  name: GetAttributeValue(Int32)
  nameWithType: ITextRangeProvider.GetAttributeValue(Int32)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetAttributeValue
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
    startLine: 126
  assemblies:
  - OpenSilver
  namespace: System.Windows.Automation.Provider
  summary: "\nRetrieves the value of the specified attribute ID across the text range.\n"
  example: []
  syntax:
    content: object GetAttributeValue(int attributeId)
    parameters:
    - id: attributeId
      type: System.Int32
      description: "\nThe text attribute ID.\n"
    return:
      type: System.Object
      description: "\nRetrieves an object that represents the value of the specified attribute. See Remarks.\n"
    content.vb: Function GetAttributeValue(attributeId As Integer) As Object
  overload: System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe specified attribute ID is not valid.\n"
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles
  commentId: M:System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles
  id: GetBoundingRectangles
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  - vb
  name: GetBoundingRectangles()
  nameWithType: ITextRangeProvider.GetBoundingRectangles()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetBoundingRectangles
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
    startLine: 141
  assemblies:
  - OpenSilver
  namespace: System.Windows.Automation.Provider
  summary: "\nRetrieves a collection of bounding rectangles for each fully or partially visible line \nof text in a text range.\n"
  remarks: "\nThis method returns an empty array for a degenerate range.\nThis method returns an empty array for a text range that has screen coordinates that place \nit completely off-screen, are scrolled out of view, or are obscured by an overlapping window.\n"
  example: []
  syntax:
    content: double[] GetBoundingRectangles()
    return:
      type: System.Double[]
      description: "\nAn array of bounding rectangles for each full or partial line of text in a text range.\nSee Remarks.\n"
    content.vb: Function GetBoundingRectangles As Double()
  overload: System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles*
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement
  commentId: M:System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement
  id: GetEnclosingElement
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  - vb
  name: GetEnclosingElement()
  nameWithType: ITextRangeProvider.GetEnclosingElement()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetEnclosingElement
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
    startLine: 151
  assemblies:
  - OpenSilver
  namespace: System.Windows.Automation.Provider
  summary: "\nReturns the innermost element that encloses the text range.\n"
  example: []
  syntax:
    content: IRawElementProviderSimple GetEnclosingElement()
    return:
      type: System.Windows.Automation.Provider.IRawElementProviderSimple
      description: "\nThe enclosing control, typically the text provider that provides the text range. However, \nif the text provider supports child text elements such as tables or hyperlinks, the \nenclosing element can be a descendant of the text provider.\n"
    content.vb: Function GetEnclosingElement As IRawElementProviderSimple
  overload: System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement*
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)
  commentId: M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)
  id: GetText(System.Int32)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  - vb
  name: GetText(Int32)
  nameWithType: ITextRangeProvider.GetText(Int32)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetText
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
    startLine: 166
  assemblies:
  - OpenSilver
  namespace: System.Windows.Automation.Provider
  summary: "\nRetrieves the plain text of the range.\n"
  example: []
  syntax:
    content: string GetText(int maxLength)
    parameters:
    - id: maxLength
      type: System.Int32
      description: "\nThe maximum length of the string to return. Use -1 to specify an unlimited length.\n"
    return:
      type: System.String
      description: "\nThe plain text of the text range, which might represent a portion of the full string \ntruncated at the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">maxLength</code>.\n"
    content.vb: Function GetText(maxLength As Integer) As String
  overload: System.Windows.Automation.Provider.ITextRangeProvider.GetText*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">maxLength</code> is less than -1.\n"
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)
  commentId: M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)
  id: Move(System.Windows.Automation.Text.TextUnit,System.Int32)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  - vb
  name: Move(TextUnit, Int32)
  nameWithType: ITextRangeProvider.Move(TextUnit, Int32)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit, System.Int32)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Move
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
    startLine: 183
  assemblies:
  - OpenSilver
  namespace: System.Windows.Automation.Provider
  summary: "\nMoves the text range the specified number of text units.\n"
  example: []
  syntax:
    content: int Move(TextUnit unit, int count)
    parameters:
    - id: unit
      type: System.Windows.Automation.Text.TextUnit
      description: "\nThe text unit boundary.\n"
    - id: count
      type: System.Int32
      description: "\nThe number of text units to move.A positive value moves the text range forward; a \nnegative value moves the text range backward; and a value of 0 has no effect.\n"
    return:
      type: System.Int32
      description: "\nThe number of units actually moved. This value can be less than the \n<code data-dev-comment-type=\"paramref\" class=\"paramref\">count</code> requested if either of the new text range endpoints is \ngreater than or less than the <xref href=\"System.Windows.Automation.Provider.ITextProvider.DocumentRange\" data-throw-if-not-resolved=\"false\"></xref> endpoints.\n"
    content.vb: Function Move(unit As TextUnit, count As Integer) As Integer
  overload: System.Windows.Automation.Provider.ITextRangeProvider.Move*
- uid: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)
  commentId: M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)
  id: MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  - vb
  name: MoveEndpointByUnit(TextPatternRangeEndpoint, TextUnit, Int32)
  nameWithType: ITextRangeProvider.MoveEndpointByUnit(TextPatternRangeEndpoint, TextUnit, Int32)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint, System.Windows.Automation.Text.TextUnit, System.Int32)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MoveEndpointByUnit
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
    startLine: 203
  assemblies:
  - OpenSilver
  namespace: System.Windows.Automation.Provider
  summary: "\nMoves one endpoint of the text range the specified number of text units within \nthe document range.\n"
  example: []
  syntax:
    content: int MoveEndpointByUnit(TextPatternRangeEndpoint endpoint, TextUnit unit, int count)
    parameters:
    - id: endpoint
      type: System.Windows.Automation.Text.TextPatternRangeEndpoint
      description: "\nThe endpoint to move.\n"
    - id: unit
      type: System.Windows.Automation.Text.TextUnit
      description: "\nThe textual unit for moving.\n"
    - id: count
      type: System.Int32
      description: "\nThe number of units to move. A positive value moves the endpoint forward; a negative \nvalue moves the endpoint backward; and a value of 0 has no effect.\n"
    return:
      type: System.Int32
      description: "\nThe number of units actually moved. This value can be less than the <code data-dev-comment-type=\"paramref\" class=\"paramref\">count</code> \nrequested if moving the endpoint extends beyond the start or end of the document.\n"
    content.vb: Function MoveEndpointByUnit(endpoint As TextPatternRangeEndpoint, unit As TextUnit, count As Integer) As Integer
  overload: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit*
- uid: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  commentId: M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  id: MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  - vb
  name: MoveEndpointByRange(TextPatternRangeEndpoint, ITextRangeProvider, TextPatternRangeEndpoint)
  nameWithType: ITextRangeProvider.MoveEndpointByRange(TextPatternRangeEndpoint, ITextRangeProvider, TextPatternRangeEndpoint)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint, System.Windows.Automation.Provider.ITextRangeProvider, System.Windows.Automation.Text.TextPatternRangeEndpoint)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MoveEndpointByRange
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
    startLine: 217
  assemblies:
  - OpenSilver
  namespace: System.Windows.Automation.Provider
  summary: "\nMoves one endpoint of a text range to the specified endpoint of a second text range.\n"
  example: []
  syntax:
    content: void MoveEndpointByRange(TextPatternRangeEndpoint endpoint, ITextRangeProvider targetRange, TextPatternRangeEndpoint targetEndpoint)
    parameters:
    - id: endpoint
      type: System.Windows.Automation.Text.TextPatternRangeEndpoint
      description: "\nThe endpoint to move.\n"
    - id: targetRange
      type: System.Windows.Automation.Provider.ITextRangeProvider
      description: "\nAnother range from the same text provider.\n"
    - id: targetEndpoint
      type: System.Windows.Automation.Text.TextPatternRangeEndpoint
      description: "\nAn endpoint on the other range.\n"
    content.vb: Sub MoveEndpointByRange(endpoint As TextPatternRangeEndpoint, targetRange As ITextRangeProvider, targetEndpoint As TextPatternRangeEndpoint)
  overload: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange*
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Select
  commentId: M:System.Windows.Automation.Provider.ITextRangeProvider.Select
  id: Select
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  - vb
  name: Select()
  nameWithType: ITextRangeProvider.Select()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Select()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Select
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
    startLine: 227
  assemblies:
  - OpenSilver
  namespace: System.Windows.Automation.Provider
  summary: "\nHighlights text in the text control that corresponds to the \n<xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint.Start\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint.End\" data-throw-if-not-resolved=\"false\"></xref> \nendpoints of the text range.\n"
  example: []
  syntax:
    content: void Select()
    content.vb: Sub Select
  overload: System.Windows.Automation.Provider.ITextRangeProvider.Select*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nText selection is not supported by the text control.\n"
- uid: System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection
  commentId: M:System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection
  id: AddToSelection
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  - vb
  name: AddToSelection()
  nameWithType: ITextRangeProvider.AddToSelection()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: AddToSelection
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
    startLine: 236
  assemblies:
  - OpenSilver
  namespace: System.Windows.Automation.Provider
  summary: "\nAdds to the collection of highlighted text in a text container that supports multiple \ndisjoint selections.\n"
  example: []
  syntax:
    content: void AddToSelection()
    content.vb: Sub AddToSelection
  overload: System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe text provider does not support multiple disjoint selections.\n"
- uid: System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection
  commentId: M:System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection
  id: RemoveFromSelection
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  - vb
  name: RemoveFromSelection()
  nameWithType: ITextRangeProvider.RemoveFromSelection()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: RemoveFromSelection
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
    startLine: 247
  assemblies:
  - OpenSilver
  namespace: System.Windows.Automation.Provider
  summary: "\nFrom the collection of highlighted text in a text container that supports multiple disjoint \nselections, removes a highlighted section of text that corresponds to the caller&apos;s \n<xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint.Start\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint.End\" data-throw-if-not-resolved=\"false\"></xref> \nendpoints.\n"
  example: []
  syntax:
    content: void RemoveFromSelection()
    content.vb: Sub RemoveFromSelection
  overload: System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe text provider does not support multiple disjoint.\n"
- uid: System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)
  commentId: M:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)
  id: ScrollIntoView(System.Boolean)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  - vb
  name: ScrollIntoView(Boolean)
  nameWithType: ITextRangeProvider.ScrollIntoView(Boolean)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ScrollIntoView
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
    startLine: 256
  assemblies:
  - OpenSilver
  namespace: System.Windows.Automation.Provider
  summary: "\nCauses the text control to scroll vertically until the text range is visible in the viewport.\n"
  example: []
  syntax:
    content: void ScrollIntoView(bool alignToTop)
    parameters:
    - id: alignToTop
      type: System.Boolean
      description: "\ntrue if the text control should be scrolled so that the text range is flush with the top of \nthe viewport; false if the text range is flush with the bottom of the viewport.\n"
    content.vb: Sub ScrollIntoView(alignToTop As Boolean)
  overload: System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView*
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetChildren
  commentId: M:System.Windows.Automation.Provider.ITextRangeProvider.GetChildren
  id: GetChildren
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  - vb
  name: GetChildren()
  nameWithType: ITextRangeProvider.GetChildren()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetChildren()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetChildren
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Automation.Provider/ITextRangeProvider.cs
    startLine: 266
  assemblies:
  - OpenSilver
  namespace: System.Windows.Automation.Provider
  summary: "\nRetrieves a collection of all the embedded objects that exist within the text range.\n"
  example: []
  syntax:
    content: IRawElementProviderSimple[] GetChildren()
    return:
      type: System.Windows.Automation.Provider.IRawElementProviderSimple[]
      description: "\nA collection of child objects that exist within the range. Child objects that overlap with \nthe text range but are not completely enclosed by it are also included in the collection. \nReturns an empty collection if no child objects exist.\n"
    content.vb: Function GetChildren As IRawElementProviderSimple()
  overload: System.Windows.Automation.Provider.ITextRangeProvider.GetChildren*
references:
- uid: System.Windows.Automation.Provider.ITextProvider
  commentId: T:System.Windows.Automation.Provider.ITextProvider
  name: ITextProvider
  nameWithType: ITextProvider
  fullName: System.Windows.Automation.Provider.ITextProvider
- uid: System.Windows.Automation.Provider
  commentId: N:System.Windows.Automation.Provider
  name: System.Windows.Automation.Provider
  nameWithType: System.Windows.Automation.Provider
  fullName: System.Windows.Automation.Provider
- uid: System.Windows.Automation.Provider.ITextRangeProvider
  commentId: T:System.Windows.Automation.Provider.ITextRangeProvider
  parent: System.Windows.Automation.Provider
  name: ITextRangeProvider
  nameWithType: ITextRangeProvider
  fullName: System.Windows.Automation.Provider.ITextRangeProvider
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Clone*
  commentId: Overload:System.Windows.Automation.Provider.ITextRangeProvider.Clone
  name: Clone
  nameWithType: ITextRangeProvider.Clone
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Clone
- uid: System.Windows.Automation.Text.TextPatternRangeEndpoint.Start
  commentId: F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start
  isExternal: true
- uid: System.Windows.Automation.Text.TextPatternRangeEndpoint.End
  commentId: F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Compare*
  commentId: Overload:System.Windows.Automation.Provider.ITextRangeProvider.Compare
  name: Compare
  nameWithType: ITextRangeProvider.Compare
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Compare
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints*
  commentId: Overload:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints
  name: CompareEndpoints
  nameWithType: ITextRangeProvider.CompareEndpoints
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints
- uid: System.Windows.Automation.Text.TextPatternRangeEndpoint
  commentId: T:System.Windows.Automation.Text.TextPatternRangeEndpoint
  parent: System.Windows.Automation.Text
  name: TextPatternRangeEndpoint
  nameWithType: TextPatternRangeEndpoint
  fullName: System.Windows.Automation.Text.TextPatternRangeEndpoint
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Automation.Text
  commentId: N:System.Windows.Automation.Text
  name: System.Windows.Automation.Text
  nameWithType: System.Windows.Automation.Text
  fullName: System.Windows.Automation.Text
- uid: System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit*
  commentId: Overload:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit
  name: ExpandToEnclosingUnit
  nameWithType: ITextRangeProvider.ExpandToEnclosingUnit
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit
- uid: System.Windows.Automation.Text.TextUnit
  commentId: T:System.Windows.Automation.Text.TextUnit
  parent: System.Windows.Automation.Text
  name: TextUnit
  nameWithType: TextUnit
  fullName: System.Windows.Automation.Text.TextUnit
- uid: System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute*
  commentId: Overload:System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute
  name: FindAttribute
  nameWithType: ITextRangeProvider.FindAttribute
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Automation.Provider.ITextRangeProvider.FindText*
  commentId: Overload:System.Windows.Automation.Provider.ITextRangeProvider.FindText
  name: FindText
  nameWithType: ITextRangeProvider.FindText
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.FindText
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue*
  commentId: Overload:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue
  name: GetAttributeValue
  nameWithType: ITextRangeProvider.GetAttributeValue
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles*
  commentId: Overload:System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles
  name: GetBoundingRectangles
  nameWithType: ITextRangeProvider.GetBoundingRectangles
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles
- uid: System.Double[]
  isExternal: true
  name: Double[]
  nameWithType: Double[]
  fullName: System.Double[]
  nameWithType.vb: Double()
  fullName.vb: System.Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement*
  commentId: Overload:System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement
  name: GetEnclosingElement
  nameWithType: ITextRangeProvider.GetEnclosingElement
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement
- uid: System.Windows.Automation.Provider.IRawElementProviderSimple
  commentId: T:System.Windows.Automation.Provider.IRawElementProviderSimple
  parent: System.Windows.Automation.Provider
  name: IRawElementProviderSimple
  nameWithType: IRawElementProviderSimple
  fullName: System.Windows.Automation.Provider.IRawElementProviderSimple
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetText*
  commentId: Overload:System.Windows.Automation.Provider.ITextRangeProvider.GetText
  name: GetText
  nameWithType: ITextRangeProvider.GetText
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetText
- uid: System.Windows.Automation.Provider.ITextProvider.DocumentRange
  commentId: P:System.Windows.Automation.Provider.ITextProvider.DocumentRange
  isExternal: true
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Move*
  commentId: Overload:System.Windows.Automation.Provider.ITextRangeProvider.Move
  name: Move
  nameWithType: ITextRangeProvider.Move
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Move
- uid: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit*
  commentId: Overload:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit
  name: MoveEndpointByUnit
  nameWithType: ITextRangeProvider.MoveEndpointByUnit
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit
- uid: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange*
  commentId: Overload:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange
  name: MoveEndpointByRange
  nameWithType: ITextRangeProvider.MoveEndpointByRange
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Select*
  commentId: Overload:System.Windows.Automation.Provider.ITextRangeProvider.Select
  name: Select
  nameWithType: ITextRangeProvider.Select
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Select
- uid: System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection*
  commentId: Overload:System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection
  name: AddToSelection
  nameWithType: ITextRangeProvider.AddToSelection
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection
- uid: System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection*
  commentId: Overload:System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection
  name: RemoveFromSelection
  nameWithType: ITextRangeProvider.RemoveFromSelection
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection
- uid: System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView*
  commentId: Overload:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView
  name: ScrollIntoView
  nameWithType: ITextRangeProvider.ScrollIntoView
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetChildren*
  commentId: Overload:System.Windows.Automation.Provider.ITextRangeProvider.GetChildren
  name: GetChildren
  nameWithType: ITextRangeProvider.GetChildren
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetChildren
- uid: System.Windows.Automation.Provider.IRawElementProviderSimple[]
  isExternal: true
  name: IRawElementProviderSimple[]
  nameWithType: IRawElementProviderSimple[]
  fullName: System.Windows.Automation.Provider.IRawElementProviderSimple[]
  nameWithType.vb: IRawElementProviderSimple()
  fullName.vb: System.Windows.Automation.Provider.IRawElementProviderSimple()
  name.vb: IRawElementProviderSimple()
  spec.csharp:
  - uid: System.Windows.Automation.Provider.IRawElementProviderSimple
    name: IRawElementProviderSimple
    nameWithType: IRawElementProviderSimple
    fullName: System.Windows.Automation.Provider.IRawElementProviderSimple
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Windows.Automation.Provider.IRawElementProviderSimple
    name: IRawElementProviderSimple
    nameWithType: IRawElementProviderSimple
    fullName: System.Windows.Automation.Provider.IRawElementProviderSimple
  - name: ()
    nameWithType: ()
    fullName: ()
