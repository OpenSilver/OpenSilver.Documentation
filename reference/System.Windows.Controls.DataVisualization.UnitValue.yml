### YamlMime:ManagedReference
items:
- uid: System.Windows.Controls.DataVisualization.UnitValue
  commentId: T:System.Windows.Controls.DataVisualization.UnitValue
  id: UnitValue
  parent: System.Windows.Controls.DataVisualization
  children:
  - System.Windows.Controls.DataVisualization.UnitValue.#ctor(System.Double,System.Windows.Controls.DataVisualization.Unit)
  - System.Windows.Controls.DataVisualization.UnitValue.CompareTo(System.Object)
  - System.Windows.Controls.DataVisualization.UnitValue.Equals(System.Object)
  - System.Windows.Controls.DataVisualization.UnitValue.GetHashCode
  - System.Windows.Controls.DataVisualization.UnitValue.NaN
  - System.Windows.Controls.DataVisualization.UnitValue.op_Equality(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)
  - System.Windows.Controls.DataVisualization.UnitValue.op_GreaterThan(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)
  - System.Windows.Controls.DataVisualization.UnitValue.op_Inequality(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)
  - System.Windows.Controls.DataVisualization.UnitValue.op_LessThan(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)
  - System.Windows.Controls.DataVisualization.UnitValue.Unit
  - System.Windows.Controls.DataVisualization.UnitValue.Value
  langs:
  - csharp
  - vb
  name: UnitValue
  nameWithType: UnitValue
  fullName: System.Windows.Controls.DataVisualization.UnitValue
  type: Struct
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/UnitValue.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: UnitValue
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/UnitValue.cs
    startLine: 10
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nA value in units.\n"
  example: []
  syntax:
    content: 'public struct UnitValue : IComparable'
    content.vb: >-
      Public Structure UnitValue
          Implements IComparable
  implements:
  - System.IComparable
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Windows.Controls.DataVisualization.UnitValue.NaN
  commentId: M:System.Windows.Controls.DataVisualization.UnitValue.NaN
  id: NaN
  parent: System.Windows.Controls.DataVisualization.UnitValue
  langs:
  - csharp
  - vb
  name: NaN()
  nameWithType: UnitValue.NaN()
  fullName: System.Windows.Controls.DataVisualization.UnitValue.NaN()
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/UnitValue.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: NaN
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/UnitValue.cs
    startLine: 16
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nReturns a UnitValue representing an invalid value.\n"
  example: []
  syntax:
    content: public static UnitValue NaN()
    return:
      type: System.Windows.Controls.DataVisualization.UnitValue
      description: UnitValue instance.
    content.vb: Public Shared Function NaN As UnitValue
  overload: System.Windows.Controls.DataVisualization.UnitValue.NaN*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.DataVisualization.UnitValue.#ctor(System.Double,System.Windows.Controls.DataVisualization.Unit)
  commentId: M:System.Windows.Controls.DataVisualization.UnitValue.#ctor(System.Double,System.Windows.Controls.DataVisualization.Unit)
  id: '#ctor(System.Double,System.Windows.Controls.DataVisualization.Unit)'
  parent: System.Windows.Controls.DataVisualization.UnitValue
  langs:
  - csharp
  - vb
  name: UnitValue(Double, Unit)
  nameWithType: UnitValue.UnitValue(Double, Unit)
  fullName: System.Windows.Controls.DataVisualization.UnitValue.UnitValue(System.Double, System.Windows.Controls.DataVisualization.Unit)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/UnitValue.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/UnitValue.cs
    startLine: 26
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nInstantiates a new instance of the UnitValue struct.\n"
  example: []
  syntax:
    content: public UnitValue(double value, Unit unit)
    parameters:
    - id: value
      type: System.Double
      description: The value associated with the units.
    - id: unit
      type: System.Windows.Controls.DataVisualization.Unit
      description: The units associated with the value.
    content.vb: Public Sub New(value As Double, unit As Unit)
  overload: System.Windows.Controls.DataVisualization.UnitValue.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.Controls.DataVisualization.UnitValue.Value
  commentId: P:System.Windows.Controls.DataVisualization.UnitValue.Value
  id: Value
  parent: System.Windows.Controls.DataVisualization.UnitValue
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: UnitValue.Value
  fullName: System.Windows.Controls.DataVisualization.UnitValue.Value
  type: Property
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/UnitValue.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Value
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/UnitValue.cs
    startLine: 35
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nGets the value associated with the units.\n"
  example: []
  syntax:
    content: public double Value { readonly get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Value As Double
  overload: System.Windows.Controls.DataVisualization.UnitValue.Value*
  modifiers.csharp:
  - public
  - readonly get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Windows.Controls.DataVisualization.UnitValue.Unit
  commentId: P:System.Windows.Controls.DataVisualization.UnitValue.Unit
  id: Unit
  parent: System.Windows.Controls.DataVisualization.UnitValue
  langs:
  - csharp
  - vb
  name: Unit
  nameWithType: UnitValue.Unit
  fullName: System.Windows.Controls.DataVisualization.UnitValue.Unit
  type: Property
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/UnitValue.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Unit
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/UnitValue.cs
    startLine: 40
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nGets the units associated with the value.\n"
  example: []
  syntax:
    content: public Unit Unit { readonly get; }
    parameters: []
    return:
      type: System.Windows.Controls.DataVisualization.Unit
    content.vb: Public ReadOnly Property Unit As Unit
  overload: System.Windows.Controls.DataVisualization.UnitValue.Unit*
  modifiers.csharp:
  - public
  - readonly get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Windows.Controls.DataVisualization.UnitValue.CompareTo(System.Object)
  commentId: M:System.Windows.Controls.DataVisualization.UnitValue.CompareTo(System.Object)
  id: CompareTo(System.Object)
  parent: System.Windows.Controls.DataVisualization.UnitValue
  langs:
  - csharp
  - vb
  name: CompareTo(Object)
  nameWithType: UnitValue.CompareTo(Object)
  fullName: System.Windows.Controls.DataVisualization.UnitValue.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/UnitValue.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CompareTo
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/UnitValue.cs
    startLine: 49
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nCompares two unit values to determine if they are equal or not.\n"
  example: []
  syntax:
    content: public int CompareTo(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object being compared.
    return:
      type: System.Int32
      description: "A number smaller than zero if the obj is larger than this\nobject.  A number equal to 0 if they are equal.  A number greater \nthan zero if this unit value is greater than obj."
    content.vb: Public Function CompareTo(obj As Object) As Integer
  overload: System.Windows.Controls.DataVisualization.UnitValue.CompareTo*
  implements:
  - System.IComparable.CompareTo(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.Controls.DataVisualization.UnitValue.Equals(System.Object)
  commentId: M:System.Windows.Controls.DataVisualization.UnitValue.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.Controls.DataVisualization.UnitValue
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: UnitValue.Equals(Object)
  fullName: System.Windows.Controls.DataVisualization.UnitValue.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/UnitValue.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Equals
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/UnitValue.cs
    startLine: 66
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nDetermines if two values are equal.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The other value.
    return:
      type: System.Boolean
      description: A value indicating whether values are equal.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: System.Windows.Controls.DataVisualization.UnitValue.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Windows.Controls.DataVisualization.UnitValue.op_Equality(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)
  commentId: M:System.Windows.Controls.DataVisualization.UnitValue.op_Equality(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)
  id: op_Equality(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)
  parent: System.Windows.Controls.DataVisualization.UnitValue
  langs:
  - csharp
  - vb
  name: Equality(UnitValue, UnitValue)
  nameWithType: UnitValue.Equality(UnitValue, UnitValue)
  fullName: System.Windows.Controls.DataVisualization.UnitValue.Equality(System.Windows.Controls.DataVisualization.UnitValue, System.Windows.Controls.DataVisualization.UnitValue)
  type: Operator
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/UnitValue.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Equality
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/UnitValue.cs
    startLine: 88
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nDetermines whether two unit value objects are equal.\n"
  example: []
  syntax:
    content: public static bool operator ==(UnitValue left, UnitValue right)
    parameters:
    - id: left
      type: System.Windows.Controls.DataVisualization.UnitValue
      description: The left unit value.
    - id: right
      type: System.Windows.Controls.DataVisualization.UnitValue
      description: The right unit value.
    return:
      type: System.Boolean
      description: "A value indicating  whether two unit value objects are \nequal."
    content.vb: Public Shared Operator =(left As UnitValue, right As UnitValue) As Boolean
  overload: System.Windows.Controls.DataVisualization.UnitValue.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.DataVisualization.UnitValue.op_Inequality(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)
  commentId: M:System.Windows.Controls.DataVisualization.UnitValue.op_Inequality(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)
  id: op_Inequality(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)
  parent: System.Windows.Controls.DataVisualization.UnitValue
  langs:
  - csharp
  - vb
  name: Inequality(UnitValue, UnitValue)
  nameWithType: UnitValue.Inequality(UnitValue, UnitValue)
  fullName: System.Windows.Controls.DataVisualization.UnitValue.Inequality(System.Windows.Controls.DataVisualization.UnitValue, System.Windows.Controls.DataVisualization.UnitValue)
  type: Operator
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/UnitValue.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Inequality
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/UnitValue.cs
    startLine: 100
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nDetermines whether two unit value objects are not equal.\n"
  example: []
  syntax:
    content: public static bool operator !=(UnitValue left, UnitValue right)
    parameters:
    - id: left
      type: System.Windows.Controls.DataVisualization.UnitValue
      description: The left unit value.
    - id: right
      type: System.Windows.Controls.DataVisualization.UnitValue
      description: The right unit value.
    return:
      type: System.Boolean
      description: >-
        A value indicating whether two unit value objects are not

        equal.
    content.vb: Public Shared Operator <>(left As UnitValue, right As UnitValue) As Boolean
  overload: System.Windows.Controls.DataVisualization.UnitValue.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.DataVisualization.UnitValue.op_LessThan(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)
  commentId: M:System.Windows.Controls.DataVisualization.UnitValue.op_LessThan(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)
  id: op_LessThan(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)
  parent: System.Windows.Controls.DataVisualization.UnitValue
  langs:
  - csharp
  - vb
  name: LessThan(UnitValue, UnitValue)
  nameWithType: UnitValue.LessThan(UnitValue, UnitValue)
  fullName: System.Windows.Controls.DataVisualization.UnitValue.LessThan(System.Windows.Controls.DataVisualization.UnitValue, System.Windows.Controls.DataVisualization.UnitValue)
  type: Operator
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/UnitValue.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_LessThan
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/UnitValue.cs
    startLine: 112
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nDetermines whether the left value is smaller than the right.\n"
  example: []
  syntax:
    content: public static bool operator <(UnitValue left, UnitValue right)
    parameters:
    - id: left
      type: System.Windows.Controls.DataVisualization.UnitValue
      description: The left unit value.
    - id: right
      type: System.Windows.Controls.DataVisualization.UnitValue
      description: The right unit value.
    return:
      type: System.Boolean
      description: >-
        A value indicating whether the left value is smaller than

        the right.
    content.vb: Public Shared Operator <(left As UnitValue, right As UnitValue) As Boolean
  overload: System.Windows.Controls.DataVisualization.UnitValue.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.DataVisualization.UnitValue.op_GreaterThan(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)
  commentId: M:System.Windows.Controls.DataVisualization.UnitValue.op_GreaterThan(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)
  id: op_GreaterThan(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)
  parent: System.Windows.Controls.DataVisualization.UnitValue
  langs:
  - csharp
  - vb
  name: GreaterThan(UnitValue, UnitValue)
  nameWithType: UnitValue.GreaterThan(UnitValue, UnitValue)
  fullName: System.Windows.Controls.DataVisualization.UnitValue.GreaterThan(System.Windows.Controls.DataVisualization.UnitValue, System.Windows.Controls.DataVisualization.UnitValue)
  type: Operator
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/UnitValue.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_GreaterThan
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/UnitValue.cs
    startLine: 124
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nDetermines whether the left value is larger than the right.\n"
  example: []
  syntax:
    content: public static bool operator>(UnitValue left, UnitValue right)
    parameters:
    - id: left
      type: System.Windows.Controls.DataVisualization.UnitValue
      description: The left unit value.
    - id: right
      type: System.Windows.Controls.DataVisualization.UnitValue
      description: The right unit value.
    return:
      type: System.Boolean
      description: >-
        A value indicating whether the left value is larger than

        the right.
    content.vb: Public Shared Operator>(left As UnitValue, right As UnitValue) As Boolean
  overload: System.Windows.Controls.DataVisualization.UnitValue.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.DataVisualization.UnitValue.GetHashCode
  commentId: M:System.Windows.Controls.DataVisualization.UnitValue.GetHashCode
  id: GetHashCode
  parent: System.Windows.Controls.DataVisualization.UnitValue
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: UnitValue.GetHashCode()
  fullName: System.Windows.Controls.DataVisualization.UnitValue.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.DataVisualization/UnitValue.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetHashCode
    path: ../OpenSilverGit/src/Runtime/Controls.DataVisualization/UnitValue.cs
    startLine: 133
  assemblies:
  - OpenSilver.Controls.DataVisualization.Toolkit
  namespace: System.Windows.Controls.DataVisualization
  summary: "\nReturns the hash code of the unit value object.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: The hash code.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: System.Windows.Controls.DataVisualization.UnitValue.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Windows.Controls.DataVisualization
  commentId: N:System.Windows.Controls.DataVisualization
  name: System.Windows.Controls.DataVisualization
  nameWithType: System.Windows.Controls.DataVisualization
  fullName: System.Windows.Controls.DataVisualization
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Controls.DataVisualization.UnitValue.NaN*
  commentId: Overload:System.Windows.Controls.DataVisualization.UnitValue.NaN
  name: NaN
  nameWithType: UnitValue.NaN
  fullName: System.Windows.Controls.DataVisualization.UnitValue.NaN
- uid: System.Windows.Controls.DataVisualization.UnitValue
  commentId: T:System.Windows.Controls.DataVisualization.UnitValue
  parent: System.Windows.Controls.DataVisualization
  name: UnitValue
  nameWithType: UnitValue
  fullName: System.Windows.Controls.DataVisualization.UnitValue
- uid: System.Windows.Controls.DataVisualization.UnitValue.#ctor*
  commentId: Overload:System.Windows.Controls.DataVisualization.UnitValue.#ctor
  name: UnitValue
  nameWithType: UnitValue.UnitValue
  fullName: System.Windows.Controls.DataVisualization.UnitValue.UnitValue
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.Controls.DataVisualization.Unit
  commentId: T:System.Windows.Controls.DataVisualization.Unit
  parent: System.Windows.Controls.DataVisualization
  name: Unit
  nameWithType: Unit
  fullName: System.Windows.Controls.DataVisualization.Unit
- uid: System.Windows.Controls.DataVisualization.UnitValue.Value*
  commentId: Overload:System.Windows.Controls.DataVisualization.UnitValue.Value
  name: Value
  nameWithType: UnitValue.Value
  fullName: System.Windows.Controls.DataVisualization.UnitValue.Value
- uid: System.Windows.Controls.DataVisualization.UnitValue.Unit*
  commentId: Overload:System.Windows.Controls.DataVisualization.UnitValue.Unit
  name: Unit
  nameWithType: UnitValue.Unit
  fullName: System.Windows.Controls.DataVisualization.UnitValue.Unit
- uid: System.Windows.Controls.DataVisualization.UnitValue.CompareTo*
  commentId: Overload:System.Windows.Controls.DataVisualization.UnitValue.CompareTo
  name: CompareTo
  nameWithType: UnitValue.CompareTo
  fullName: System.Windows.Controls.DataVisualization.UnitValue.CompareTo
- uid: System.IComparable.CompareTo(System.Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  name: CompareTo(Object)
  nameWithType: IComparable.CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Controls.DataVisualization.UnitValue.Equals*
  commentId: Overload:System.Windows.Controls.DataVisualization.UnitValue.Equals
  name: Equals
  nameWithType: UnitValue.Equals
  fullName: System.Windows.Controls.DataVisualization.UnitValue.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Controls.DataVisualization.UnitValue.op_Equality*
  commentId: Overload:System.Windows.Controls.DataVisualization.UnitValue.op_Equality
  name: Equality
  nameWithType: UnitValue.Equality
  fullName: System.Windows.Controls.DataVisualization.UnitValue.Equality
- uid: System.Windows.Controls.DataVisualization.UnitValue.op_Inequality*
  commentId: Overload:System.Windows.Controls.DataVisualization.UnitValue.op_Inequality
  name: Inequality
  nameWithType: UnitValue.Inequality
  fullName: System.Windows.Controls.DataVisualization.UnitValue.Inequality
- uid: System.Windows.Controls.DataVisualization.UnitValue.op_LessThan*
  commentId: Overload:System.Windows.Controls.DataVisualization.UnitValue.op_LessThan
  name: LessThan
  nameWithType: UnitValue.LessThan
  fullName: System.Windows.Controls.DataVisualization.UnitValue.LessThan
- uid: System.Windows.Controls.DataVisualization.UnitValue.op_GreaterThan*
  commentId: Overload:System.Windows.Controls.DataVisualization.UnitValue.op_GreaterThan
  name: GreaterThan
  nameWithType: UnitValue.GreaterThan
  fullName: System.Windows.Controls.DataVisualization.UnitValue.GreaterThan
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Controls.DataVisualization.UnitValue.GetHashCode*
  commentId: Overload:System.Windows.Controls.DataVisualization.UnitValue.GetHashCode
  name: GetHashCode
  nameWithType: UnitValue.GetHashCode
  fullName: System.Windows.Controls.DataVisualization.UnitValue.GetHashCode
