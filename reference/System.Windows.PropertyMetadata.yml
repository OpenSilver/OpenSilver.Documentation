### YamlMime:ManagedReference
items:
- uid: System.Windows.PropertyMetadata
  commentId: T:System.Windows.PropertyMetadata
  id: PropertyMetadata
  parent: System.Windows
  children:
  - System.Windows.PropertyMetadata.#ctor
  - System.Windows.PropertyMetadata.#ctor(System.Object)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.CoerceValueCallback
  - System.Windows.PropertyMetadata.DefaultValue
  - System.Windows.PropertyMetadata.Inherits
  - System.Windows.PropertyMetadata.IsSealed
  - System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  - System.Windows.PropertyMetadata.MethodToUpdateDom
  - System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  - System.Windows.PropertyMetadata.PropertyChangedCallback
  langs:
  - csharp
  - vb
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
  type: Class
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: PropertyMetadata
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
    startLine: 25
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nDefines certain behavior aspects of a dependency property, including conditions\nit was registered with.\n"
  example: []
  syntax:
    content: public class PropertyMetadata
    content.vb: Public Class PropertyMetadata
  inheritance:
  - System.Object
  derivedClasses:
  - System.Windows.FrameworkPropertyMetadata
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Windows.PropertyMetadata.#ctor
  commentId: M:System.Windows.PropertyMetadata.#ctor
  id: '#ctor'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  - vb
  name: PropertyMetadata()
  nameWithType: PropertyMetadata.PropertyMetadata()
  fullName: System.Windows.PropertyMetadata.PropertyMetadata()
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
    startLine: 30
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nInitializes a new instance of the <xref href=\"System.Windows.PropertyMetadata\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public PropertyMetadata()
    content.vb: Public Sub New
  overload: System.Windows.PropertyMetadata.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.PropertyMetadata.#ctor(System.Object)
  commentId: M:System.Windows.PropertyMetadata.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  - vb
  name: PropertyMetadata(Object)
  nameWithType: PropertyMetadata.PropertyMetadata(Object)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(System.Object)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
    startLine: 40
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nInitializes a new instance of the <xref href=\"System.Windows.PropertyMetadata\" data-throw-if-not-resolved=\"false\"></xref> class, using\na property default value.\n"
  example: []
  syntax:
    content: public PropertyMetadata(object defaultValue)
    parameters:
    - id: defaultValue
      type: System.Object
      description: "\nA default value for the property where this <xref href=\"System.Windows.PropertyMetadata\" data-throw-if-not-resolved=\"false\"></xref> is\napplied.\n"
    content.vb: Public Sub New(defaultValue As Object)
  overload: System.Windows.PropertyMetadata.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  commentId: M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  - vb
  name: PropertyMetadata(PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(System.Windows.PropertyChangedCallback)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
    startLine: 52
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nInitializes a new instance of the <xref href=\"System.Windows.PropertyMetadata\" data-throw-if-not-resolved=\"false\"></xref> class, using\na callback reference.\n"
  example: []
  syntax:
    content: public PropertyMetadata(PropertyChangedCallback propertyChangedCallback)
    parameters:
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "\nA reference to the callback to call for property changed behavior.\n"
    content.vb: Public Sub New(propertyChangedCallback As PropertyChangedCallback)
  overload: System.Windows.PropertyMetadata.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  commentId: M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  - vb
  name: PropertyMetadata(Object, PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object, PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(System.Object, System.Windows.PropertyChangedCallback)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
    startLine: 68
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nInitializes a new instance of the <xref href=\"System.Windows.PropertyMetadata\" data-throw-if-not-resolved=\"false\"></xref> class, using\na property default value and callback reference.\n"
  example: []
  syntax:
    content: public PropertyMetadata(object defaultValue, PropertyChangedCallback propertyChangedCallback)
    parameters:
    - id: defaultValue
      type: System.Object
      description: "\nA default value for the property where this <xref href=\"System.Windows.PropertyMetadata\" data-throw-if-not-resolved=\"false\"></xref> is\napplied.\n"
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "\nA reference to the callback to call for property changed behavior.\n"
    content.vb: Public Sub New(defaultValue As Object, propertyChangedCallback As PropertyChangedCallback)
  overload: System.Windows.PropertyMetadata.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  commentId: M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  - vb
  name: PropertyMetadata(Object, PropertyChangedCallback, CoerceValueCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object, PropertyChangedCallback, CoerceValueCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(System.Object, System.Windows.PropertyChangedCallback, System.Windows.CoerceValueCallback)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
    startLine: 94
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nInitializes a new instance of the <xref href=\"System.Windows.PropertyMetadata\" data-throw-if-not-resolved=\"false\"></xref> class with\nthe specified default value and callbacks.\n"
  example: []
  syntax:
    content: public PropertyMetadata(object defaultValue, PropertyChangedCallback propertyChangedCallback, CoerceValueCallback coerceValueCallback)
    parameters:
    - id: defaultValue
      type: System.Object
      description: "\nThe default value of the dependency property, usually provided as a value of\nsome specific type.\n"
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "\nReference to a handler implementation that is to be called by the property system\nwhenever the effective value of the property changes.\n"
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "\nReference to a handler implementation that is to be called whenever the property\nsystem calls <xref href=\"System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\" data-throw-if-not-resolved=\"false\"></xref>\nagainst this property.\n"
    content.vb: Public Sub New(defaultValue As Object, propertyChangedCallback As PropertyChangedCallback, coerceValueCallback As CoerceValueCallback)
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\ndefaultValue cannot be set to the value <xref href=\"System.Windows.DependencyProperty.UnsetValue\" data-throw-if-not-resolved=\"false\"></xref>;\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.PropertyMetadata.DefaultValue
  commentId: P:System.Windows.PropertyMetadata.DefaultValue
  id: DefaultValue
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  - vb
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: DefaultValue
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
    startLine: 107
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets the default value for the dependency property.\n"
  example: []
  syntax:
    content: public object DefaultValue { get; set; }
    parameters: []
    return:
      type: System.Object
      description: "\nThe default value for the dependency property.\n"
    content.vb: Public Property DefaultValue As Object
  overload: System.Windows.PropertyMetadata.DefaultValue*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  commentId: P:System.Windows.PropertyMetadata.PropertyChangedCallback
  id: PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  - vb
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: PropertyChangedCallback
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
    startLine: 272
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets a reference to a <xref href=\"System.Windows.PropertyChangedCallback\" data-throw-if-not-resolved=\"false\"></xref> implementation\nspecified in this metadata.\n"
  example: []
  syntax:
    content: public PropertyChangedCallback PropertyChangedCallback { get; set; }
    parameters: []
    return:
      type: System.Windows.PropertyChangedCallback
      description: "\nA <xref href=\"System.Windows.PropertyChangedCallback\" data-throw-if-not-resolved=\"false\"></xref> implementation reference.\n"
    content.vb: Public Property PropertyChangedCallback As PropertyChangedCallback
  overload: System.Windows.PropertyMetadata.PropertyChangedCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nCannot set a metadata property once it is applied to a dependency property operation.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  commentId: P:System.Windows.PropertyMetadata.CoerceValueCallback
  id: CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  - vb
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CoerceValueCallback
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
    startLine: 288
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets a reference to a <xref href=\"System.Windows.CoerceValueCallback\" data-throw-if-not-resolved=\"false\"></xref> implementation\nspecified in this metadata.\n"
  example: []
  syntax:
    content: public CoerceValueCallback CoerceValueCallback { get; set; }
    parameters: []
    return:
      type: System.Windows.CoerceValueCallback
      description: "\nA <xref href=\"System.Windows.CoerceValueCallback\" data-throw-if-not-resolved=\"false\"></xref> implementation reference.\n"
    content.vb: Public Property CoerceValueCallback As CoerceValueCallback
  overload: System.Windows.PropertyMetadata.CoerceValueCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nCannot set a metadata property once it is applied to a dependency property operation.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  commentId: M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  id: Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  - vb
  name: Merge(PropertyMetadata, DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata, DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata, System.Windows.DependencyProperty)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Merge
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
    startLine: 342
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nMerges this metadata with the base metadata.\n"
  example: []
  syntax:
    content: protected virtual void Merge(PropertyMetadata baseMetadata, DependencyProperty dp)
    parameters:
    - id: baseMetadata
      type: System.Windows.PropertyMetadata
      description: "\nThe base metadata to merge with this instance&apos;s values.\n"
    - id: dp
      type: System.Windows.DependencyProperty
      description: "\nThe dependency property to which this metadata is being applied.\n"
    content.vb: Protected Overridable Sub Merge(baseMetadata As PropertyMetadata, dp As DependencyProperty)
  overload: System.Windows.PropertyMetadata.Merge*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  commentId: M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  id: OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  - vb
  name: OnApply(DependencyProperty, Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty, Type)
  fullName: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty, System.Type)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnApply
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
    startLine: 402
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nCalled when this metadata has been applied to a property, which indicates that\nthe metadata is being sealed.\n"
  example: []
  syntax:
    content: protected virtual void OnApply(DependencyProperty dp, Type targetType)
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "\nThe dependency property to which the metadata has been applied.\n"
    - id: targetType
      type: System.Type
      description: "\nThe type associated with this metadata if this is type-specific metadata. If\nthis is default metadata, this value is a null reference.\n"
    content.vb: Protected Overridable Sub OnApply(dp As DependencyProperty, targetType As Type)
  overload: System.Windows.PropertyMetadata.OnApply*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.PropertyMetadata.IsSealed
  commentId: P:System.Windows.PropertyMetadata.IsSealed
  id: IsSealed
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  - vb
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IsSealed
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
    startLine: 413
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets a value that determines whether the metadata has been applied to a property\nin some way, resulting in the immutable state of that metadata instance.\n"
  example: []
  syntax:
    content: protected bool IsSealed { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\ntrue if the metadata instance is immutable; otherwise, false.\n"
    content.vb: Protected ReadOnly Property IsSealed As Boolean
  overload: System.Windows.PropertyMetadata.IsSealed*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: System.Windows.PropertyMetadata.Inherits
  commentId: P:System.Windows.PropertyMetadata.Inherits
  id: Inherits
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  - vb
  name: Inherits
  nameWithType: PropertyMetadata.Inherits
  fullName: System.Windows.PropertyMetadata.Inherits
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Inherits
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
    startLine: 544
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets a value that indicates whether the value of the dependency property\nis inheritable.\n"
  example: []
  syntax:
    content: public bool Inherits { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: "\ntrue if the property value is inheritable; otherwise, false. The default is false.\n"
    content.vb: Public Property Inherits As Boolean
  overload: System.Windows.PropertyMetadata.Inherits*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe metadata has already been applied to a dependency property operation, so\nthat metadata is sealed and properties of the metadata cannot be set.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.PropertyMetadata.MethodToUpdateDom
  commentId: P:System.Windows.PropertyMetadata.MethodToUpdateDom
  id: MethodToUpdateDom
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  - vb
  name: MethodToUpdateDom
  nameWithType: PropertyMetadata.MethodToUpdateDom
  fullName: System.Windows.PropertyMetadata.MethodToUpdateDom
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MethodToUpdateDom
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/PropertyMetadata.cs
    startLine: 571
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets the method that is called when the object is added to the visual tree, and\nwhen the property value changes while the object is already in the visual tree.\n"
  example: []
  syntax:
    content: public MethodToUpdateDom MethodToUpdateDom { get; set; }
    parameters: []
    return:
      type: System.Windows.MethodToUpdateDom
    content.vb: Public Property MethodToUpdateDom As MethodToUpdateDom
  overload: System.Windows.PropertyMetadata.MethodToUpdateDom*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: System.Windows
  commentId: N:System.Windows
  name: System.Windows
  nameWithType: System.Windows
  fullName: System.Windows
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.Windows.PropertyMetadata
  commentId: T:System.Windows.PropertyMetadata
  parent: System.Windows
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.PropertyMetadata.#ctor*
  commentId: Overload:System.Windows.PropertyMetadata.#ctor
  name: PropertyMetadata
  nameWithType: PropertyMetadata.PropertyMetadata
  fullName: System.Windows.PropertyMetadata.PropertyMetadata
- uid: System.Windows.PropertyChangedCallback
  commentId: T:System.Windows.PropertyChangedCallback
  parent: System.Windows
  name: PropertyChangedCallback
  nameWithType: PropertyChangedCallback
  fullName: System.Windows.PropertyChangedCallback
- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  commentId: M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  name: CoerceValue(DependencyProperty)
  nameWithType: DependencyObject.CoerceValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  spec.csharp:
  - uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
    name: CoerceValue
    nameWithType: DependencyObject.CoerceValue
    fullName: System.Windows.DependencyObject.CoerceValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
    name: CoerceValue
    nameWithType: DependencyObject.CoerceValue
    fullName: System.Windows.DependencyObject.CoerceValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyProperty.UnsetValue
  commentId: F:System.Windows.DependencyProperty.UnsetValue
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: System.Windows.CoerceValueCallback
  commentId: T:System.Windows.CoerceValueCallback
  parent: System.Windows
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
- uid: System.Windows.DependencyObject
  commentId: T:System.Windows.DependencyObject
  parent: System.Windows
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.PropertyMetadata.DefaultValue*
  commentId: Overload:System.Windows.PropertyMetadata.DefaultValue
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback*
  commentId: Overload:System.Windows.PropertyMetadata.PropertyChangedCallback
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.CoerceValueCallback*
  commentId: Overload:System.Windows.PropertyMetadata.CoerceValueCallback
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.Merge*
  commentId: Overload:System.Windows.PropertyMetadata.Merge
  name: Merge
  nameWithType: PropertyMetadata.Merge
  fullName: System.Windows.PropertyMetadata.Merge
- uid: System.Windows.DependencyProperty
  commentId: T:System.Windows.DependencyProperty
  parent: System.Windows
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.PropertyMetadata.OnApply*
  commentId: Overload:System.Windows.PropertyMetadata.OnApply
  name: OnApply
  nameWithType: PropertyMetadata.OnApply
  fullName: System.Windows.PropertyMetadata.OnApply
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.PropertyMetadata.IsSealed*
  commentId: Overload:System.Windows.PropertyMetadata.IsSealed
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.PropertyMetadata.Inherits*
  commentId: Overload:System.Windows.PropertyMetadata.Inherits
  name: Inherits
  nameWithType: PropertyMetadata.Inherits
  fullName: System.Windows.PropertyMetadata.Inherits
- uid: System.Windows.PropertyMetadata.MethodToUpdateDom*
  commentId: Overload:System.Windows.PropertyMetadata.MethodToUpdateDom
  name: MethodToUpdateDom
  nameWithType: PropertyMetadata.MethodToUpdateDom
  fullName: System.Windows.PropertyMetadata.MethodToUpdateDom
- uid: System.Windows.MethodToUpdateDom
  commentId: T:System.Windows.MethodToUpdateDom
  parent: System.Windows
  name: MethodToUpdateDom
  nameWithType: MethodToUpdateDom
  fullName: System.Windows.MethodToUpdateDom
