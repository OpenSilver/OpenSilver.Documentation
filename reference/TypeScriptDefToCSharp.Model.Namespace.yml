### YamlMime:ManagedReference
items:
- uid: TypeScriptDefToCSharp.Model.Namespace
  commentId: T:TypeScriptDefToCSharp.Model.Namespace
  id: Namespace
  parent: TypeScriptDefToCSharp.Model
  children:
  - TypeScriptDefToCSharp.Model.Namespace.#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Namespace,System.String,TypeScriptDefToCSharp.TypeScriptDefContext)
  - TypeScriptDefToCSharp.Model.Namespace.#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Namespace,TypeScriptDefToCSharp.TypeScriptDefContext)
  - TypeScriptDefToCSharp.Model.Namespace.#ctor(TypeScriptDefToCSharp.Model.Namespace,TypeScriptDefToCSharp.TypeScriptDefContext)
  - TypeScriptDefToCSharp.Model.Namespace.AddChildNamespace(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  - TypeScriptDefToCSharp.Model.Namespace.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  - TypeScriptDefToCSharp.Model.Namespace.Declarations
  - TypeScriptDefToCSharp.Model.Namespace.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  - TypeScriptDefToCSharp.Model.Namespace.GetImportList
  - TypeScriptDefToCSharp.Model.Namespace.Imports
  - TypeScriptDefToCSharp.Model.Namespace.StaticClass
  - TypeScriptDefToCSharp.Model.Namespace.Super
  - TypeScriptDefToCSharp.Model.Namespace.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#Declaration}#GetEnumerator
  - TypeScriptDefToCSharp.Model.Namespace.System#Collections#IEnumerable#GetEnumerator
  - TypeScriptDefToCSharp.Model.Namespace.ToString
  langs:
  - csharp
  - vb
  name: Namespace
  nameWithType: Namespace
  fullName: TypeScriptDefToCSharp.Model.Namespace
  type: Class
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Namespace
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
    startLine: 27
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: 'public class Namespace : Declaration, Declaration.Container<Declaration>, IDeclaration, IEnumerable<Declaration>, IEnumerable'
    content.vb: >-
      Public Class Namespace
          Inherits Declaration
          Implements Declaration.Container(Of Declaration), IDeclaration, IEnumerable(Of Declaration), IEnumerable
  inheritance:
  - System.Object
  - TypeScriptDefToCSharp.Model.Declaration
  derivedClasses:
  - TypeScriptDefToCSharp.Model.GlobalProgram
  implements:
  - TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration}
  - TypeScriptDefToCSharp.Model.IDeclaration
  - System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Declaration}
  - System.Collections.IEnumerable
  inheritedMembers:
  - TypeScriptDefToCSharp.Model.Declaration.Name
  - TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
  - TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String,System.Int32)
  - TypeScriptDefToCSharp.Model.Declaration.FirstAncestor``1
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TypeScriptDefToCSharp.Model.Namespace.Declarations
  commentId: P:TypeScriptDefToCSharp.Model.Namespace.Declarations
  id: Declarations
  parent: TypeScriptDefToCSharp.Model.Namespace
  langs:
  - csharp
  - vb
  name: Declarations
  nameWithType: Namespace.Declarations
  fullName: TypeScriptDefToCSharp.Model.Namespace.Declarations
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Declarations
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
    startLine: 29
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public HashSet<Declaration> Declarations { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.HashSet{TypeScriptDefToCSharp.Model.Declaration}
    content.vb: Public Property Declarations As HashSet(Of Declaration)
  overload: TypeScriptDefToCSharp.Model.Namespace.Declarations*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Namespace.Imports
  commentId: P:TypeScriptDefToCSharp.Model.Namespace.Imports
  id: Imports
  parent: TypeScriptDefToCSharp.Model.Namespace
  langs:
  - csharp
  - vb
  name: Imports
  nameWithType: Namespace.Imports
  fullName: TypeScriptDefToCSharp.Model.Namespace.Imports
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Imports
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
    startLine: 31
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public List<Import> Imports { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{TypeScriptDefToCSharp.Model.Import}
    content.vb: Public Property Imports As List(Of Import)
  overload: TypeScriptDefToCSharp.Model.Namespace.Imports*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Namespace.StaticClass
  commentId: P:TypeScriptDefToCSharp.Model.Namespace.StaticClass
  id: StaticClass
  parent: TypeScriptDefToCSharp.Model.Namespace
  langs:
  - csharp
  - vb
  name: StaticClass
  nameWithType: Namespace.StaticClass
  fullName: TypeScriptDefToCSharp.Model.Namespace.StaticClass
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: StaticClass
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
    startLine: 33
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public Class StaticClass { get; set; }
    parameters: []
    return:
      type: TypeScriptDefToCSharp.Model.Class
    content.vb: 'Public Property StaticClass As '
  overload: TypeScriptDefToCSharp.Model.Namespace.StaticClass*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Namespace.Super
  commentId: P:TypeScriptDefToCSharp.Model.Namespace.Super
  id: Super
  parent: TypeScriptDefToCSharp.Model.Namespace
  langs:
  - csharp
  - vb
  name: Super
  nameWithType: Namespace.Super
  fullName: TypeScriptDefToCSharp.Model.Namespace.Super
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Super
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
    startLine: 35
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public Namespace Super { get; set; }
    parameters: []
    return:
      type: TypeScriptDefToCSharp.Model.Namespace
    content.vb: 'Public Property Super As '
  overload: TypeScriptDefToCSharp.Model.Namespace.Super*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Namespace.#ctor(TypeScriptDefToCSharp.Model.Namespace,TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Namespace.#ctor(TypeScriptDefToCSharp.Model.Namespace,TypeScriptDefToCSharp.TypeScriptDefContext)
  id: '#ctor(TypeScriptDefToCSharp.Model.Namespace,TypeScriptDefToCSharp.TypeScriptDefContext)'
  parent: TypeScriptDefToCSharp.Model.Namespace
  langs:
  - csharp
  - vb
  name: Namespace(Namespace, TypeScriptDefContext)
  nameWithType: Namespace.Namespace(Namespace, TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Namespace.Namespace(TypeScriptDefToCSharp.Model.Namespace, TypeScriptDefToCSharp.TypeScriptDefContext)
  type: Constructor
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
    startLine: 37
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public Namespace(Namespace super, TypeScriptDefContext context)
    parameters:
    - id: super
      type: TypeScriptDefToCSharp.Model.Namespace
    - id: context
      type: TypeScriptDefToCSharp.TypeScriptDefContext
    content.vb: Public Sub New(super As  Namespace, context As TypeScriptDefContext)
  overload: TypeScriptDefToCSharp.Model.Namespace.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Namespace.#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Namespace,TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Namespace.#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Namespace,TypeScriptDefToCSharp.TypeScriptDefContext)
  id: '#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Namespace,TypeScriptDefToCSharp.TypeScriptDefContext)'
  parent: TypeScriptDefToCSharp.Model.Namespace
  langs:
  - csharp
  - vb
  name: Namespace(XElement, Namespace, TypeScriptDefContext)
  nameWithType: Namespace.Namespace(XElement, Namespace, TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Namespace.Namespace(System.Xml.Linq.XElement, TypeScriptDefToCSharp.Model.Namespace, TypeScriptDefToCSharp.TypeScriptDefContext)
  type: Constructor
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
    startLine: 61
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public Namespace(XElement elem, Namespace super, TypeScriptDefContext context)
    parameters:
    - id: elem
      type: System.Xml.Linq.XElement
    - id: super
      type: TypeScriptDefToCSharp.Model.Namespace
    - id: context
      type: TypeScriptDefToCSharp.TypeScriptDefContext
    content.vb: Public Sub New(elem As XElement, super As  Namespace, context As TypeScriptDefContext)
  overload: TypeScriptDefToCSharp.Model.Namespace.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Namespace.#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Namespace,System.String,TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Namespace.#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Namespace,System.String,TypeScriptDefToCSharp.TypeScriptDefContext)
  id: '#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Namespace,System.String,TypeScriptDefToCSharp.TypeScriptDefContext)'
  parent: TypeScriptDefToCSharp.Model.Namespace
  langs:
  - csharp
  - vb
  name: Namespace(XElement, Namespace, String, TypeScriptDefContext)
  nameWithType: Namespace.Namespace(XElement, Namespace, String, TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Namespace.Namespace(System.Xml.Linq.XElement, TypeScriptDefToCSharp.Model.Namespace, System.String, TypeScriptDefToCSharp.TypeScriptDefContext)
  type: Constructor
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
    startLine: 69
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public Namespace(XElement elem, Namespace super, string name, TypeScriptDefContext context)
    parameters:
    - id: elem
      type: System.Xml.Linq.XElement
    - id: super
      type: TypeScriptDefToCSharp.Model.Namespace
    - id: name
      type: System.String
    - id: context
      type: TypeScriptDefToCSharp.TypeScriptDefContext
    content.vb: Public Sub New(elem As XElement, super As  Namespace, name As String, context As TypeScriptDefContext)
  overload: TypeScriptDefToCSharp.Model.Namespace.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Namespace.AddChildNamespace(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Namespace.AddChildNamespace(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  id: AddChildNamespace(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  parent: TypeScriptDefToCSharp.Model.Namespace
  langs:
  - csharp
  - vb
  name: AddChildNamespace(XElement, TypeScriptDefContext)
  nameWithType: Namespace.AddChildNamespace(XElement, TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Namespace.AddChildNamespace(System.Xml.Linq.XElement, TypeScriptDefToCSharp.TypeScriptDefContext)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: AddChildNamespace
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
    startLine: 84
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public void AddChildNamespace(XElement elem, TypeScriptDefContext context)
    parameters:
    - id: elem
      type: System.Xml.Linq.XElement
    - id: context
      type: TypeScriptDefToCSharp.TypeScriptDefContext
    content.vb: Public Sub AddChildNamespace(elem As XElement, context As TypeScriptDefContext)
  overload: TypeScriptDefToCSharp.Model.Namespace.AddChildNamespace*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Namespace.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Namespace.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  id: AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  parent: TypeScriptDefToCSharp.Model.Namespace
  langs:
  - csharp
  - vb
  name: AddContent(XElement, TypeScriptDefContext)
  nameWithType: Namespace.AddContent(XElement, TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Namespace.AddContent(System.Xml.Linq.XElement, TypeScriptDefToCSharp.TypeScriptDefContext)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: AddContent
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
    startLine: 137
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public void AddContent(XElement content, TypeScriptDefContext context)
    parameters:
    - id: content
      type: System.Xml.Linq.XElement
    - id: context
      type: TypeScriptDefToCSharp.TypeScriptDefContext
    content.vb: Public Sub AddContent(content As XElement, context As TypeScriptDefContext)
  overload: TypeScriptDefToCSharp.Model.Namespace.AddContent*
  implements:
  - TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration}.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Namespace.ToString
  commentId: M:TypeScriptDefToCSharp.Model.Namespace.ToString
  id: ToString
  parent: TypeScriptDefToCSharp.Model.Namespace
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Namespace.ToString()
  fullName: TypeScriptDefToCSharp.Model.Namespace.ToString()
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ToString
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
    startLine: 173
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: TypeScriptDefToCSharp.Model.Declaration.ToString
  overload: TypeScriptDefToCSharp.Model.Namespace.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TypeScriptDefToCSharp.Model.Namespace.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Namespace.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  id: Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  parent: TypeScriptDefToCSharp.Model.Namespace
  langs:
  - csharp
  - vb
  name: Export(TypeScriptDefContext)
  nameWithType: Namespace.Export(TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Namespace.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Export
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
    startLine: 179
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public override void Export(TypeScriptDefContext context)
    parameters:
    - id: context
      type: TypeScriptDefToCSharp.TypeScriptDefContext
    content.vb: Public Overrides Sub Export(context As TypeScriptDefContext)
  overridden: TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  overload: TypeScriptDefToCSharp.Model.Namespace.Export*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TypeScriptDefToCSharp.Model.Namespace.GetImportList
  commentId: M:TypeScriptDefToCSharp.Model.Namespace.GetImportList
  id: GetImportList
  parent: TypeScriptDefToCSharp.Model.Namespace
  langs:
  - csharp
  - vb
  name: GetImportList()
  nameWithType: Namespace.GetImportList()
  fullName: TypeScriptDefToCSharp.Model.Namespace.GetImportList()
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetImportList
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
    startLine: 201
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public HashSet<Import> GetImportList()
    return:
      type: System.Collections.Generic.HashSet{TypeScriptDefToCSharp.Model.Import}
    content.vb: Public Function GetImportList As HashSet(Of Import)
  overload: TypeScriptDefToCSharp.Model.Namespace.GetImportList*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Namespace.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#Declaration}#GetEnumerator
  commentId: M:TypeScriptDefToCSharp.Model.Namespace.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#Declaration}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#Declaration}#GetEnumerator
  isEii: true
  parent: TypeScriptDefToCSharp.Model.Namespace
  langs:
  - csharp
  - vb
  name: IEnumerable<Declaration>.GetEnumerator()
  nameWithType: Namespace.IEnumerable<Declaration>.GetEnumerator()
  fullName: TypeScriptDefToCSharp.Model.Namespace.System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Declaration>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Declaration>.GetEnumerator
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
    startLine: 223
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: IEnumerator<Declaration> IEnumerable<Declaration>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{TypeScriptDefToCSharp.Model.Declaration}
    content.vb: Function System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Declaration>.GetEnumerator As IEnumerator(Of Declaration) Implements IEnumerable(Of Declaration).GetEnumerator
  overload: TypeScriptDefToCSharp.Model.Namespace.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#Declaration}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Declaration}.GetEnumerator
  nameWithType.vb: Namespace.System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Declaration>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Declaration>.GetEnumerator()
- uid: TypeScriptDefToCSharp.Model.Namespace.System#Collections#IEnumerable#GetEnumerator
  commentId: M:TypeScriptDefToCSharp.Model.Namespace.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: TypeScriptDefToCSharp.Model.Namespace
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: Namespace.IEnumerable.GetEnumerator()
  fullName: TypeScriptDefToCSharp.Model.Namespace.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Namespace.cs
    startLine: 228
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: TypeScriptDefToCSharp.Model.Namespace.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: Namespace.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: TypeScriptDefToCSharp.Model
  commentId: N:TypeScriptDefToCSharp.Model
  name: TypeScriptDefToCSharp.Model
  nameWithType: TypeScriptDefToCSharp.Model
  fullName: TypeScriptDefToCSharp.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TypeScriptDefToCSharp.Model.Declaration
  commentId: T:TypeScriptDefToCSharp.Model.Declaration
  parent: TypeScriptDefToCSharp.Model
  name: Declaration
  nameWithType: Declaration
  fullName: TypeScriptDefToCSharp.Model.Declaration
- uid: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration}
  commentId: T:TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration}
  parent: TypeScriptDefToCSharp.Model
  definition: TypeScriptDefToCSharp.Model.Declaration.Container`1
  name: Declaration.Container<Declaration>
  nameWithType: Declaration.Container<Declaration>
  fullName: TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Declaration>
  nameWithType.vb: Declaration.Container(Of Declaration)
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Declaration)
  name.vb: Declaration.Container(Of Declaration)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Declaration
    name: Declaration
    nameWithType: Declaration
    fullName: TypeScriptDefToCSharp.Model.Declaration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Declaration
    name: Declaration
    nameWithType: Declaration
    fullName: TypeScriptDefToCSharp.Model.Declaration
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.IDeclaration
  commentId: T:TypeScriptDefToCSharp.Model.IDeclaration
  parent: TypeScriptDefToCSharp.Model
  name: IDeclaration
  nameWithType: IDeclaration
  fullName: TypeScriptDefToCSharp.Model.IDeclaration
- uid: System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Declaration}
  commentId: T:System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Declaration}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Declaration>
  nameWithType: IEnumerable<Declaration>
  fullName: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Declaration>
  nameWithType.vb: IEnumerable(Of Declaration)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TypeScriptDefToCSharp.Model.Declaration)
  name.vb: IEnumerable(Of Declaration)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Declaration
    name: Declaration
    nameWithType: Declaration
    fullName: TypeScriptDefToCSharp.Model.Declaration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Declaration
    name: Declaration
    nameWithType: Declaration
    fullName: TypeScriptDefToCSharp.Model.Declaration
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: TypeScriptDefToCSharp.Model.Declaration.Name
  commentId: P:TypeScriptDefToCSharp.Model.Declaration.Name
  parent: TypeScriptDefToCSharp.Model.Declaration
  name: Name
  nameWithType: Declaration.Name
  fullName: TypeScriptDefToCSharp.Model.Declaration.Name
- uid: TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
  parent: TypeScriptDefToCSharp.Model.Declaration
  isExternal: true
  name: FullName(String)
  nameWithType: Declaration.FullName(String)
  fullName: TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
    name: FullName
    nameWithType: Declaration.FullName
    fullName: TypeScriptDefToCSharp.Model.Declaration.FullName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
    name: FullName
    nameWithType: Declaration.FullName
    fullName: TypeScriptDefToCSharp.Model.Declaration.FullName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String,System.Int32)
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String,System.Int32)
  parent: TypeScriptDefToCSharp.Model.Declaration
  isExternal: true
  name: SkippedFullName(String, Int32)
  nameWithType: Declaration.SkippedFullName(String, Int32)
  fullName: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String, System.Int32)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String,System.Int32)
    name: SkippedFullName
    nameWithType: Declaration.SkippedFullName
    fullName: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String,System.Int32)
    name: SkippedFullName
    nameWithType: Declaration.SkippedFullName
    fullName: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor``1
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.FirstAncestor``1
  parent: TypeScriptDefToCSharp.Model.Declaration
  name: FirstAncestor<TContainer>()
  nameWithType: Declaration.FirstAncestor<TContainer>()
  fullName: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor<TContainer>()
  nameWithType.vb: Declaration.FirstAncestor(Of TContainer)()
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor(Of TContainer)()
  name.vb: FirstAncestor(Of TContainer)()
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor``1
    name: FirstAncestor<TContainer>
    nameWithType: Declaration.FirstAncestor<TContainer>
    fullName: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor<TContainer>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor``1
    name: FirstAncestor(Of TContainer)
    nameWithType: Declaration.FirstAncestor(Of TContainer)
    fullName: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor(Of TContainer)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
  commentId: T:TypeScriptDefToCSharp.Model.Declaration.Container`1
  name: Declaration.Container<T>
  nameWithType: Declaration.Container<T>
  fullName: TypeScriptDefToCSharp.Model.Declaration.Container<T>
  nameWithType.vb: Declaration.Container(Of T)
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.Container(Of T)
  name.vb: Declaration.Container(Of T)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: TypeScriptDefToCSharp.Model.Namespace.Declarations*
  commentId: Overload:TypeScriptDefToCSharp.Model.Namespace.Declarations
  name: Declarations
  nameWithType: Namespace.Declarations
  fullName: TypeScriptDefToCSharp.Model.Namespace.Declarations
- uid: System.Collections.Generic.HashSet{TypeScriptDefToCSharp.Model.Declaration}
  commentId: T:System.Collections.Generic.HashSet{TypeScriptDefToCSharp.Model.Declaration}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<Declaration>
  nameWithType: HashSet<Declaration>
  fullName: System.Collections.Generic.HashSet<TypeScriptDefToCSharp.Model.Declaration>
  nameWithType.vb: HashSet(Of Declaration)
  fullName.vb: System.Collections.Generic.HashSet(Of TypeScriptDefToCSharp.Model.Declaration)
  name.vb: HashSet(Of Declaration)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Declaration
    name: Declaration
    nameWithType: Declaration
    fullName: TypeScriptDefToCSharp.Model.Declaration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Declaration
    name: Declaration
    nameWithType: Declaration
    fullName: TypeScriptDefToCSharp.Model.Declaration
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Namespace.Imports*
  commentId: Overload:TypeScriptDefToCSharp.Model.Namespace.Imports
  name: Imports
  nameWithType: Namespace.Imports
  fullName: TypeScriptDefToCSharp.Model.Namespace.Imports
- uid: System.Collections.Generic.List{TypeScriptDefToCSharp.Model.Import}
  commentId: T:System.Collections.Generic.List{TypeScriptDefToCSharp.Model.Import}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Import>
  nameWithType: List<Import>
  fullName: System.Collections.Generic.List<TypeScriptDefToCSharp.Model.Import>
  nameWithType.vb: List(Of Import)
  fullName.vb: System.Collections.Generic.List(Of TypeScriptDefToCSharp.Model.Import)
  name.vb: List(Of Import)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Import
    name: Import
    nameWithType: Import
    fullName: TypeScriptDefToCSharp.Model.Import
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Import
    name: Import
    nameWithType: Import
    fullName: TypeScriptDefToCSharp.Model.Import
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Namespace.StaticClass*
  commentId: Overload:TypeScriptDefToCSharp.Model.Namespace.StaticClass
  name: StaticClass
  nameWithType: Namespace.StaticClass
  fullName: TypeScriptDefToCSharp.Model.Namespace.StaticClass
- uid: TypeScriptDefToCSharp.Model.Class
  commentId: T:TypeScriptDefToCSharp.Model.Class
  parent: TypeScriptDefToCSharp.Model
  name: Class
  nameWithType: Class
  fullName: TypeScriptDefToCSharp.Model.Class
- uid: TypeScriptDefToCSharp.Model.Namespace.Super*
  commentId: Overload:TypeScriptDefToCSharp.Model.Namespace.Super
  name: Super
  nameWithType: Namespace.Super
  fullName: TypeScriptDefToCSharp.Model.Namespace.Super
- uid: TypeScriptDefToCSharp.Model.Namespace
  commentId: T:TypeScriptDefToCSharp.Model.Namespace
  parent: TypeScriptDefToCSharp.Model
  name: Namespace
  nameWithType: Namespace
  fullName: TypeScriptDefToCSharp.Model.Namespace
- uid: TypeScriptDefToCSharp.Model.Namespace.#ctor*
  commentId: Overload:TypeScriptDefToCSharp.Model.Namespace.#ctor
  name: Namespace
  nameWithType: Namespace.Namespace
  fullName: TypeScriptDefToCSharp.Model.Namespace.Namespace
- uid: TypeScriptDefToCSharp.TypeScriptDefContext
  commentId: T:TypeScriptDefToCSharp.TypeScriptDefContext
  parent: TypeScriptDefToCSharp
  name: TypeScriptDefContext
  nameWithType: TypeScriptDefContext
  fullName: TypeScriptDefToCSharp.TypeScriptDefContext
- uid: TypeScriptDefToCSharp
  commentId: N:TypeScriptDefToCSharp
  name: TypeScriptDefToCSharp
  nameWithType: TypeScriptDefToCSharp
  fullName: TypeScriptDefToCSharp
- uid: System.Xml.Linq.XElement
  commentId: T:System.Xml.Linq.XElement
  parent: System.Xml.Linq
  isExternal: true
  name: XElement
  nameWithType: XElement
  fullName: System.Xml.Linq.XElement
- uid: System.Xml.Linq
  commentId: N:System.Xml.Linq
  isExternal: true
  name: System.Xml.Linq
  nameWithType: System.Xml.Linq
  fullName: System.Xml.Linq
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TypeScriptDefToCSharp.Model.Namespace.AddChildNamespace*
  commentId: Overload:TypeScriptDefToCSharp.Model.Namespace.AddChildNamespace
  name: AddChildNamespace
  nameWithType: Namespace.AddChildNamespace
  fullName: TypeScriptDefToCSharp.Model.Namespace.AddChildNamespace
- uid: TypeScriptDefToCSharp.Model.Namespace.AddContent*
  commentId: Overload:TypeScriptDefToCSharp.Model.Namespace.AddContent
  name: AddContent
  nameWithType: Namespace.AddContent
  fullName: TypeScriptDefToCSharp.Model.Namespace.AddContent
- uid: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration}.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration}.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  parent: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration}
  definition: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  name: AddContent(XElement, TypeScriptDefContext)
  nameWithType: Declaration.Container<Declaration>.AddContent(XElement, TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Declaration>.AddContent(System.Xml.Linq.XElement, TypeScriptDefToCSharp.TypeScriptDefContext)
  nameWithType.vb: Declaration.Container(Of Declaration).AddContent(XElement, TypeScriptDefContext)
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Declaration).AddContent(System.Xml.Linq.XElement, TypeScriptDefToCSharp.TypeScriptDefContext)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
    name: AddContent
    nameWithType: Declaration.Container<Declaration>.AddContent
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Declaration>.AddContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
    name: AddContent
    nameWithType: Declaration.Container(Of Declaration).AddContent
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Declaration).AddContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  isExternal: true
  name: AddContent(XElement, TypeScriptDefContext)
  nameWithType: Declaration.Container<T>.AddContent(XElement, TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Declaration.Container<T>.AddContent(System.Xml.Linq.XElement, TypeScriptDefToCSharp.TypeScriptDefContext)
  nameWithType.vb: Declaration.Container(Of T).AddContent(XElement, TypeScriptDefContext)
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.Container(Of T).AddContent(System.Xml.Linq.XElement, TypeScriptDefToCSharp.TypeScriptDefContext)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
    name: AddContent
    nameWithType: Declaration.Container<T>.AddContent
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container<T>.AddContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
    name: AddContent
    nameWithType: Declaration.Container(Of T).AddContent
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container(Of T).AddContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.ToString
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.ToString
  parent: TypeScriptDefToCSharp.Model.Declaration
  name: ToString()
  nameWithType: Declaration.ToString()
  fullName: TypeScriptDefToCSharp.Model.Declaration.ToString()
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.ToString
    name: ToString
    nameWithType: Declaration.ToString
    fullName: TypeScriptDefToCSharp.Model.Declaration.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.ToString
    name: ToString
    nameWithType: Declaration.ToString
    fullName: TypeScriptDefToCSharp.Model.Declaration.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Namespace.ToString*
  commentId: Overload:TypeScriptDefToCSharp.Model.Namespace.ToString
  name: ToString
  nameWithType: Namespace.ToString
  fullName: TypeScriptDefToCSharp.Model.Namespace.ToString
- uid: TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  parent: TypeScriptDefToCSharp.Model.Declaration
  name: Export(TypeScriptDefContext)
  nameWithType: Declaration.Export(TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
    name: Export
    nameWithType: Declaration.Export
    fullName: TypeScriptDefToCSharp.Model.Declaration.Export
  - name: (
    nameWithType: (
    fullName: (
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
    name: Export
    nameWithType: Declaration.Export
    fullName: TypeScriptDefToCSharp.Model.Declaration.Export
  - name: (
    nameWithType: (
    fullName: (
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Namespace.Export*
  commentId: Overload:TypeScriptDefToCSharp.Model.Namespace.Export
  name: Export
  nameWithType: Namespace.Export
  fullName: TypeScriptDefToCSharp.Model.Namespace.Export
- uid: TypeScriptDefToCSharp.Model.Namespace.GetImportList*
  commentId: Overload:TypeScriptDefToCSharp.Model.Namespace.GetImportList
  name: GetImportList
  nameWithType: Namespace.GetImportList
  fullName: TypeScriptDefToCSharp.Model.Namespace.GetImportList
- uid: System.Collections.Generic.HashSet{TypeScriptDefToCSharp.Model.Import}
  commentId: T:System.Collections.Generic.HashSet{TypeScriptDefToCSharp.Model.Import}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<Import>
  nameWithType: HashSet<Import>
  fullName: System.Collections.Generic.HashSet<TypeScriptDefToCSharp.Model.Import>
  nameWithType.vb: HashSet(Of Import)
  fullName.vb: System.Collections.Generic.HashSet(Of TypeScriptDefToCSharp.Model.Import)
  name.vb: HashSet(Of Import)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Import
    name: Import
    nameWithType: Import
    fullName: TypeScriptDefToCSharp.Model.Import
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Import
    name: Import
    nameWithType: Import
    fullName: TypeScriptDefToCSharp.Model.Import
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Namespace.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#Declaration}#GetEnumerator*
  commentId: Overload:TypeScriptDefToCSharp.Model.Namespace.System#Collections#Generic#IEnumerable{TypeScriptDefToCSharp#Model#Declaration}#GetEnumerator
  name: IEnumerable<Declaration>.GetEnumerator
  nameWithType: Namespace.IEnumerable<Declaration>.GetEnumerator
  fullName: TypeScriptDefToCSharp.Model.Namespace.System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Declaration>.GetEnumerator
  nameWithType.vb: Namespace.System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Declaration>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Declaration>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Declaration}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Declaration}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Declaration}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<Declaration>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Declaration>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of Declaration).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of TypeScriptDefToCSharp.Model.Declaration).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<Declaration>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Declaration>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of Declaration).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of TypeScriptDefToCSharp.Model.Declaration).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{TypeScriptDefToCSharp.Model.Declaration}
  commentId: T:System.Collections.Generic.IEnumerator{TypeScriptDefToCSharp.Model.Declaration}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<Declaration>
  nameWithType: IEnumerator<Declaration>
  fullName: System.Collections.Generic.IEnumerator<TypeScriptDefToCSharp.Model.Declaration>
  nameWithType.vb: IEnumerator(Of Declaration)
  fullName.vb: System.Collections.Generic.IEnumerator(Of TypeScriptDefToCSharp.Model.Declaration)
  name.vb: IEnumerator(Of Declaration)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Declaration
    name: Declaration
    nameWithType: Declaration
    fullName: TypeScriptDefToCSharp.Model.Declaration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Declaration
    name: Declaration
    nameWithType: Declaration
    fullName: TypeScriptDefToCSharp.Model.Declaration
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Namespace.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:TypeScriptDefToCSharp.Model.Namespace.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: Namespace.IEnumerable.GetEnumerator
  fullName: TypeScriptDefToCSharp.Model.Namespace.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: Namespace.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
