### YamlMime:ManagedReference
items:
- uid: System.Windows.UIElement
  commentId: T:System.Windows.UIElement
  id: UIElement
  parent: System.Windows
  children:
  - System.Windows.UIElement.#ctor
  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  - System.Windows.UIElement.AddVisualChild(System.Windows.UIElement)
  - System.Windows.UIElement.AllowDrop
  - System.Windows.UIElement.AllowDropProperty
  - System.Windows.UIElement.AllowScrollOnTouchMove
  - System.Windows.UIElement.AllowScrollOnTouchMoveProperty
  - System.Windows.UIElement.Arrange(System.Windows.Rect)
  - System.Windows.UIElement.CacheMode
  - System.Windows.UIElement.CacheModeProperty
  - System.Windows.UIElement.CaptureMouse
  - System.Windows.UIElement.Clip
  - System.Windows.UIElement.ClipProperty
  - System.Windows.UIElement.ClipToBounds
  - System.Windows.UIElement.ClipToBoundsProperty
  - System.Windows.UIElement.CreateDomElement(System.Object,System.Object@)
  - System.Windows.UIElement.DesiredSize
  - System.Windows.UIElement.DragEnter
  - System.Windows.UIElement.DragLeave
  - System.Windows.UIElement.DragOver
  - System.Windows.UIElement.Drop
  - System.Windows.UIElement.Effect
  - System.Windows.UIElement.EffectProperty
  - System.Windows.UIElement.GetVisualChild(System.Int32)
  - System.Windows.UIElement.GotFocus
  - System.Windows.UIElement.GotFocusEvent
  - System.Windows.UIElement.INTERNAL_AttachToDomEvents
  - System.Windows.UIElement.INTERNAL_DetachFromDomEvents
  - System.Windows.UIElement.InvalidateArrange
  - System.Windows.UIElement.InvalidateMeasure
  - System.Windows.UIElement.IsEnabled
  - System.Windows.UIElement.IsEnabledChanged
  - System.Windows.UIElement.IsEnabledProperty
  - System.Windows.UIElement.IsHitTestVisible
  - System.Windows.UIElement.IsHitTestVisibleProperty
  - System.Windows.UIElement.IsMouseCaptured
  - System.Windows.UIElement.IsVisible
  - System.Windows.UIElement.IsVisibleChanged
  - System.Windows.UIElement.IsVisibleProperty
  - System.Windows.UIElement.KeyDown
  - System.Windows.UIElement.KeyDownEvent
  - System.Windows.UIElement.KeyUp
  - System.Windows.UIElement.KeyUpEvent
  - System.Windows.UIElement.LostFocus
  - System.Windows.UIElement.LostFocusEvent
  - System.Windows.UIElement.LostMouseCapture
  - System.Windows.UIElement.ManageIsEnabled(System.Boolean)
  - System.Windows.UIElement.Measure(System.Windows.Size)
  - System.Windows.UIElement.MouseEnter
  - System.Windows.UIElement.MouseEnterEvent
  - System.Windows.UIElement.MouseLeave
  - System.Windows.UIElement.MouseLeaveEvent
  - System.Windows.UIElement.MouseLeftButtonDown
  - System.Windows.UIElement.MouseLeftButtonDownEvent
  - System.Windows.UIElement.MouseLeftButtonUp
  - System.Windows.UIElement.MouseLeftButtonUpEvent
  - System.Windows.UIElement.MouseMove
  - System.Windows.UIElement.MouseMoveEvent
  - System.Windows.UIElement.MouseRightButtonDown
  - System.Windows.UIElement.MouseRightButtonDownEvent
  - System.Windows.UIElement.MouseRightButtonUp
  - System.Windows.UIElement.MouseRightButtonUpEvent
  - System.Windows.UIElement.MouseWheel
  - System.Windows.UIElement.MouseWheelEvent
  - System.Windows.UIElement.OnCreateAutomationPeer
  - System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.UIElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnTapped(System.Windows.Input.TappedRoutedEventArgs)
  - System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement.OnTextInputStart(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)
  - System.Windows.UIElement.Opacity
  - System.Windows.UIElement.OpacityMask
  - System.Windows.UIElement.OpacityMaskProperty
  - System.Windows.UIElement.OpacityProperty
  - System.Windows.UIElement.Projection
  - System.Windows.UIElement.ProjectionProperty
  - System.Windows.UIElement.ReleaseMouseCapture
  - System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.UIElement.RemoveVisualChild(System.Windows.UIElement)
  - System.Windows.UIElement.RenderSize
  - System.Windows.UIElement.RenderTransform
  - System.Windows.UIElement.RenderTransformOrigin
  - System.Windows.UIElement.RenderTransformOriginProperty
  - System.Windows.UIElement.RenderTransformProperty
  - System.Windows.UIElement.Tapped
  - System.Windows.UIElement.TappedEvent
  - System.Windows.UIElement.TextInput
  - System.Windows.UIElement.TextInputEvent
  - System.Windows.UIElement.TextInputStart
  - System.Windows.UIElement.TextInputStartEvent
  - System.Windows.UIElement.TextInputUpdate
  - System.Windows.UIElement.TextInputUpdateEvent
  - System.Windows.UIElement.TransformToVisual(System.Windows.UIElement)
  - System.Windows.UIElement.UpdateLayout
  - System.Windows.UIElement.UseLayoutRounding
  - System.Windows.UIElement.UseLayoutRoundingProperty
  - System.Windows.UIElement.Visibility
  - System.Windows.UIElement.VisibilityProperty
  - System.Windows.UIElement.VisualChildrenCount
  - System.Windows.UIElement.VisualParent
  - System.Windows.UIElement.XamlSourcePath
  langs:
  - csharp
  - vb
  name: UIElement
  nameWithType: UIElement
  fullName: System.Windows.UIElement
  type: Class
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: UIElement
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 21
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nUIElement is a base class for most of the objects that have visual appearance\nand can process basic input in a user interface.\n"
  example: []
  syntax:
    content: 'public abstract class UIElement : DependencyObject, IUIElement, IDependencyObject'
    content.vb: >-
      Public MustInherit Class UIElement
          Inherits DependencyObject
          Implements IUIElement, IDependencyObject
  inheritance:
  - System.Object
  - System.Windows.DependencyObject
  derivedClasses:
  - System.Windows.Documents.TextElement
  - System.Windows.FrameworkElement
  inheritedMembers:
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.Dispatcher
  - System.Windows.DependencyObject.INTERNAL_OnAttachedToVisualTree
  - System.Windows.DependencyObject.INTERNAL_OnDetachedFromVisualTree
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CheckAccess
  - System.Windows.DependencyObject.GetAnimationBaseValue(System.Windows.DependencyProperty)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Windows.UIElement.TransformToVisual(System.Windows.UIElement)
  commentId: M:System.Windows.UIElement.TransformToVisual(System.Windows.UIElement)
  id: TransformToVisual(System.Windows.UIElement)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: TransformToVisual(UIElement)
  nameWithType: UIElement.TransformToVisual(UIElement)
  fullName: System.Windows.UIElement.TransformToVisual(System.Windows.UIElement)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.TransformToVisual.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: TransformToVisual
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.TransformToVisual.cs
    startLine: 37
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nReturns a transform object that can be used to transform coordinates from\nthe UIElement to the specified object.\n"
  example: []
  syntax:
    content: public GeneralTransform TransformToVisual(UIElement visual)
    parameters:
    - id: visual
      type: System.Windows.UIElement
      description: "\nThe object to compare to the current object for purposes of obtaining the\ntransform.\n"
    return:
      type: System.Windows.Media.GeneralTransform
      description: "\nThe transform information as an object. Call methods on this object to get\na practical transform.\n"
    content.vb: Public Function TransformToVisual(visual As UIElement) As GeneralTransform
  overload: System.Windows.UIElement.TransformToVisual*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.OnCreateAutomationPeer
  commentId: M:System.Windows.UIElement.OnCreateAutomationPeer
  id: OnCreateAutomationPeer
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: OnCreateAutomationPeer()
  nameWithType: UIElement.OnCreateAutomationPeer()
  fullName: System.Windows.UIElement.OnCreateAutomationPeer()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.Automation.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnCreateAutomationPeer
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.Automation.cs
    startLine: 29
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nWhen implemented in a derived class, returns class-specific <xref href=\"System.Windows.Automation.Peers.AutomationPeer\" data-throw-if-not-resolved=\"false\"></xref>\nimplementations for the Silverlight automation infrastructure.\n"
  example: []
  syntax:
    content: protected virtual AutomationPeer OnCreateAutomationPeer()
    return:
      type: System.Windows.Automation.Peers.AutomationPeer
      description: "\nThe class-specific <xref href=\"System.Windows.Automation.Peers.AutomationPeer\" data-throw-if-not-resolved=\"false\"></xref> subclass to\nreturn.\n"
    content.vb: Protected Overridable Function OnCreateAutomationPeer As AutomationPeer
  overload: System.Windows.UIElement.OnCreateAutomationPeer*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.UIElement.RenderSize
  commentId: P:System.Windows.UIElement.RenderSize
  id: RenderSize
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: RenderSize
  nameWithType: UIElement.RenderSize
  fullName: System.Windows.UIElement.RenderSize
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.Layout.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: RenderSize
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.Layout.cs
    startLine: 32
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets the final render size of a <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Size RenderSize { get; }
    parameters: []
    return:
      type: System.Windows.Size
      description: "\nThe rendered size for this object. There is no default value.\n"
    content.vb: Public ReadOnly Property RenderSize As Size
  overload: System.Windows.UIElement.RenderSize*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Windows.UIElement.DesiredSize
  commentId: P:System.Windows.UIElement.DesiredSize
  id: DesiredSize
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: DesiredSize
  nameWithType: UIElement.DesiredSize
  fullName: System.Windows.UIElement.DesiredSize
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.Layout.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: DesiredSize
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.Layout.cs
    startLine: 42
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets the size that this <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref> computed during the measure\npass of the layout process.\n"
  example: []
  syntax:
    content: public Size DesiredSize { get; }
    parameters: []
    return:
      type: System.Windows.Size
      description: "\nThe size that this <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref> computed during the measure pass\nof the layout process.\n"
    content.vb: Public ReadOnly Property DesiredSize As Size
  overload: System.Windows.UIElement.DesiredSize*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Windows.UIElement.InvalidateMeasure
  commentId: M:System.Windows.UIElement.InvalidateMeasure
  id: InvalidateMeasure
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: InvalidateMeasure()
  nameWithType: UIElement.InvalidateMeasure()
  fullName: System.Windows.UIElement.InvalidateMeasure()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.Layout.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: InvalidateMeasure
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.Layout.cs
    startLine: 47
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nInvalidates the measurement state (layout) for a <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void InvalidateMeasure()
    content.vb: Public Sub InvalidateMeasure
  overload: System.Windows.UIElement.InvalidateMeasure*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.InvalidateArrange
  commentId: M:System.Windows.UIElement.InvalidateArrange
  id: InvalidateArrange
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: InvalidateArrange()
  nameWithType: UIElement.InvalidateArrange()
  fullName: System.Windows.UIElement.InvalidateArrange()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.Layout.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: InvalidateArrange
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.Layout.cs
    startLine: 70
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nInvalidates the arrange state (layout) for a <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref>. After\nthe invalidation, the <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref> will have its layout updated,\nwhich will occur asynchronously.\n"
  example: []
  syntax:
    content: public void InvalidateArrange()
    content.vb: Public Sub InvalidateArrange
  overload: System.Windows.UIElement.InvalidateArrange*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.Measure(System.Windows.Size)
  commentId: M:System.Windows.UIElement.Measure(System.Windows.Size)
  id: Measure(System.Windows.Size)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: Measure(Size)
  nameWithType: UIElement.Measure(Size)
  fullName: System.Windows.UIElement.Measure(System.Windows.Size)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.Layout.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Measure
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.Layout.cs
    startLine: 122
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nUpdates the <xref href=\"System.Windows.UIElement.DesiredSize\" data-throw-if-not-resolved=\"false\"></xref> of a <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref>.\nTypically, objects that implement custom layout for their layout children call\nthis method from their own <xref href=\"System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)\" data-throw-if-not-resolved=\"false\"></xref>\nimplementations to form a recursive layout update.\n"
  remarks: "\nThere is no reason to call <xref href=\"System.Windows.UIElement.Measure(System.Windows.Size)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Windows.UIElement.Arrange(System.Windows.Rect)\" data-throw-if-not-resolved=\"false\"></xref> outside \nof the context of overriding methods that perform custom layout actions. Silverlight \nlayout works autonomously, based on detecting changes to the object tree and layout-relevant \nproperties at run time.\nThe availableSize you pass to <xref href=\"System.Windows.UIElement.Measure(System.Windows.Size)\" data-throw-if-not-resolved=\"false\"></xref> cannot have a <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref> \nvalue for either the <xref href=\"System.Windows.Size.Height\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Windows.Size.Width\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Windows.Size\" data-throw-if-not-resolved=\"false\"></xref>.\navailableSize values can be any number from zero to infinite. Elements participating in \nlayout should return the minimum <xref href=\"System.Windows.Size\" data-throw-if-not-resolved=\"false\"></xref> they require for a given availableSize.\n"
  example: []
  syntax:
    content: public void Measure(Size availableSize)
    parameters:
    - id: availableSize
      type: System.Windows.Size
      description: "\nThe available space that a parent can allocate a child object. A child object\ncan request a larger space than what is available; the provided size might be\naccommodated if scrolling or other resize behavior is possible in that particular\ncontainer.\n"
    content.vb: Public Sub Measure(availableSize As Size)
  overload: System.Windows.UIElement.Measure*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\navailableSize contained a <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref> value. See Remarks.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.Arrange(System.Windows.Rect)
  commentId: M:System.Windows.UIElement.Arrange(System.Windows.Rect)
  id: Arrange(System.Windows.Rect)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: Arrange(Rect)
  nameWithType: UIElement.Arrange(Rect)
  fullName: System.Windows.UIElement.Arrange(System.Windows.Rect)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.Layout.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Arrange
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.Layout.cs
    startLine: 285
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nPositions child objects and determines a size for a <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref>.\nParent objects that implement custom layout for their child elements should call\nthis method from their layout override implementations to form a recursive layout\nupdate.\n"
  remarks: "\nThere is no reason to call <xref href=\"System.Windows.UIElement.Measure(System.Windows.Size)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Windows.UIElement.Arrange(System.Windows.Rect)\" data-throw-if-not-resolved=\"false\"></xref> outside of \nthe context of overriding methods that perform custom layout actions. Silverlight \nlayout works autonomously, based on detecting changes to the object tree and \nlayout-relevant properties at run time. The finalRect you pass to <xref href=\"System.Windows.UIElement.Measure(System.Windows.Size)\" data-throw-if-not-resolved=\"false\"></xref> \ncannot have a <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref> value for any <xref href=\"System.Windows.Rect\" data-throw-if-not-resolved=\"false\"></xref> value. Also, \nfinalRect cannot have any infinite values for any <xref href=\"System.Windows.Rect\" data-throw-if-not-resolved=\"false\"></xref> value.\nTypically, calls to <xref href=\"System.Windows.UIElement.Arrange(System.Windows.Rect)\" data-throw-if-not-resolved=\"false\"></xref> will incorporate a finalRect that uses the \nheight and width values from <xref href=\"System.Windows.UIElement.DesiredSize\" data-throw-if-not-resolved=\"false\"></xref> for each element . Exceptions \nto this typical behavior might be necessary if an element holds a <xref href=\"System.Windows.UIElement.DesiredSize\" data-throw-if-not-resolved=\"false\"></xref> \nthat the layout parent cannot accommodate, or if the sum total of all child element \n<xref href=\"System.Windows.UIElement.DesiredSize\" data-throw-if-not-resolved=\"false\"></xref> values cannot be accommodated or arranged. In such cases the \nchild element content might be clipped, resized, or placed in a scroll region, which all \ndepends on the specific functionality that is enabled in the layout parent container.\n"
  example: []
  syntax:
    content: public void Arrange(Rect finalRect)
    parameters:
    - id: finalRect
      type: System.Windows.Rect
      description: "\nThe final size that the parent computes for the child in layout, provided as\na <xref href=\"System.Windows.Rect\" data-throw-if-not-resolved=\"false\"></xref> value.\n"
    content.vb: Public Sub Arrange(finalRect As Rect)
  overload: System.Windows.UIElement.Arrange*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nfinalRect contained a <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref> or infinite value. See Remarks.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.UpdateLayout
  commentId: M:System.Windows.UIElement.UpdateLayout
  id: UpdateLayout
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: UpdateLayout()
  nameWithType: UIElement.UpdateLayout()
  fullName: System.Windows.UIElement.UpdateLayout()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.Layout.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: UpdateLayout
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.Layout.cs
    startLine: 604
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nEnsures that all positions of child objects of a <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref> are\nproperly updated for layout.\n"
  example: []
  syntax:
    content: public void UpdateLayout()
    content.vb: Public Sub UpdateLayout
  overload: System.Windows.UIElement.UpdateLayout*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.DragEnter
  commentId: E:System.Windows.UIElement.DragEnter
  id: DragEnter
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: DragEnter
  nameWithType: UIElement.DragEnter
  fullName: System.Windows.UIElement.DragEnter
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/WORKINPROGRESS/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: DragEnter
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/WORKINPROGRESS/UIElement.cs
    startLine: 7
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: >-
      [NotImplemented]

      public event DragEventHandler DragEnter
    return:
      type: System.Windows.DragEventHandler
    content.vb: >-
      <NotImplemented>

      Public Event DragEnter As DragEventHandler
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.DragLeave
  commentId: E:System.Windows.UIElement.DragLeave
  id: DragLeave
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: DragLeave
  nameWithType: UIElement.DragLeave
  fullName: System.Windows.UIElement.DragLeave
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/WORKINPROGRESS/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: DragLeave
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/WORKINPROGRESS/UIElement.cs
    startLine: 10
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: >-
      [NotImplemented]

      public event DragEventHandler DragLeave
    return:
      type: System.Windows.DragEventHandler
    content.vb: >-
      <NotImplemented>

      Public Event DragLeave As DragEventHandler
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.Drop
  commentId: E:System.Windows.UIElement.Drop
  id: Drop
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: Drop
  nameWithType: UIElement.Drop
  fullName: System.Windows.UIElement.Drop
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/WORKINPROGRESS/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Drop
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/WORKINPROGRESS/UIElement.cs
    startLine: 13
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: >-
      [NotImplemented]

      public event DragEventHandler Drop
    return:
      type: System.Windows.DragEventHandler
    content.vb: >-
      <NotImplemented>

      Public Event Drop As DragEventHandler
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.DragOver
  commentId: E:System.Windows.UIElement.DragOver
  id: DragOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: DragOver
  nameWithType: UIElement.DragOver
  fullName: System.Windows.UIElement.DragOver
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/WORKINPROGRESS/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: DragOver
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/WORKINPROGRESS/UIElement.cs
    startLine: 16
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: >-
      [NotImplemented]

      public event DragEventHandler DragOver
    return:
      type: System.Windows.DragEventHandler
    content.vb: >-
      <NotImplemented>

      Public Event DragOver As DragEventHandler
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.CacheMode
  commentId: P:System.Windows.UIElement.CacheMode
  id: CacheMode
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: CacheMode
  nameWithType: UIElement.CacheMode
  fullName: System.Windows.UIElement.CacheMode
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/WORKINPROGRESS/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CacheMode
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/WORKINPROGRESS/UIElement.cs
    startLine: 31
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets a value that indicates that rendered \ncontent should be cached when possible.\n"
  example: []
  syntax:
    content: >-
      [NotImplemented]

      public CacheMode CacheMode { get; set; }
    parameters: []
    return:
      type: System.Windows.Media.CacheMode
      description: "\nA value that indicates that rendered content should be \ncached when possible. If you specify a value of \n<xref href=\"System.Windows.Media.CacheMode\" data-throw-if-not-resolved=\"false\"></xref>, rendering operations from \n<xref href=\"System.Windows.UIElement.RenderTransform\" data-throw-if-not-resolved=\"false\"></xref> and \n<xref href=\"System.Windows.UIElement.Opacity\" data-throw-if-not-resolved=\"false\"></xref> execute on the graphics \nprocessing unit (GPU), if available. The default is null, \nwhich does not enable a cached composition mode. \n"
    content.vb: >-
      <NotImplemented>

      Public Property CacheMode As CacheMode
  overload: System.Windows.UIElement.CacheMode*
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.CacheModeProperty
  commentId: F:System.Windows.UIElement.CacheModeProperty
  id: CacheModeProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: CacheModeProperty
  nameWithType: UIElement.CacheModeProperty
  fullName: System.Windows.UIElement.CacheModeProperty
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/WORKINPROGRESS/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CacheModeProperty
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/WORKINPROGRESS/UIElement.cs
    startLine: 41
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: Identifies the <xref href="System.Windows.UIElement.CacheMode" data-throw-if-not-resolved="false"></xref> dependency property.
  example: []
  syntax:
    content: >-
      [NotImplemented]

      public static readonly DependencyProperty CacheModeProperty
    return:
      type: System.Windows.DependencyProperty
      description: The identifier for the <xref href="System.Windows.UIElement.CacheMode" data-throw-if-not-resolved="false"></xref> dependency property.
    content.vb: >-
      <NotImplemented>

      Public Shared ReadOnly CacheModeProperty As DependencyProperty
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.Projection
  commentId: P:System.Windows.UIElement.Projection
  id: Projection
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: Projection
  nameWithType: UIElement.Projection
  fullName: System.Windows.UIElement.Projection
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/WORKINPROGRESS/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Projection
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/WORKINPROGRESS/UIElement.cs
    startLine: 47
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: >-
      [NotImplemented]

      public Projection Projection { get; set; }
    parameters: []
    return:
      type: System.Windows.Media.Projection
    content.vb: >-
      <NotImplemented>

      Public Property Projection As Projection
  overload: System.Windows.UIElement.Projection*
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.ProjectionProperty
  commentId: F:System.Windows.UIElement.ProjectionProperty
  id: ProjectionProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: ProjectionProperty
  nameWithType: UIElement.ProjectionProperty
  fullName: System.Windows.UIElement.ProjectionProperty
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/WORKINPROGRESS/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ProjectionProperty
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/WORKINPROGRESS/UIElement.cs
    startLine: 55
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: >-
      [NotImplemented]

      public static readonly DependencyProperty ProjectionProperty
    return:
      type: System.Windows.DependencyProperty
    content.vb: >-
      <NotImplemented>

      Public Shared ReadOnly ProjectionProperty As DependencyProperty
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.VisualParent
  commentId: P:System.Windows.UIElement.VisualParent
  id: VisualParent
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: VisualParent
  nameWithType: UIElement.VisualParent
  fullName: System.Windows.UIElement.VisualParent
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: VisualParent
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 66
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets the visual tree parent of the visual object.\n"
  example: []
  syntax:
    content: protected DependencyObject VisualParent { get; }
    parameters: []
    return:
      type: System.Windows.DependencyObject
      description: "\nThe <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref> parent.\n"
    content.vb: Protected ReadOnly Property VisualParent As DependencyObject
  overload: System.Windows.UIElement.VisualParent*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: System.Windows.UIElement.GetVisualChild(System.Int32)
  commentId: M:System.Windows.UIElement.GetVisualChild(System.Int32)
  id: GetVisualChild(System.Int32)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: GetVisualChild(Int32)
  nameWithType: UIElement.GetVisualChild(Int32)
  fullName: System.Windows.UIElement.GetVisualChild(System.Int32)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetVisualChild
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 83
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nReturns a child at the specified index from a collection of child elements.\n"
  example: []
  syntax:
    content: protected virtual UIElement GetVisualChild(int index)
    parameters:
    - id: index
      type: System.Int32
      description: "\nThe zero-based index of the requested child element in the collection.\n"
    return:
      type: System.Windows.UIElement
      description: "\nThe requested child element. This should not return null; if the provided index \nis out of range, an exception is thrown.\n"
    content.vb: Protected Overridable Function GetVisualChild(index As Integer) As UIElement
  overload: System.Windows.UIElement.GetVisualChild*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.UIElement.VisualChildrenCount
  commentId: P:System.Windows.UIElement.VisualChildrenCount
  id: VisualChildrenCount
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: VisualChildrenCount
  nameWithType: UIElement.VisualChildrenCount
  fullName: System.Windows.UIElement.VisualChildrenCount
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: VisualChildrenCount
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 96
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets the number of child elements for the <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected virtual int VisualChildrenCount { get; }
    parameters: []
    return:
      type: System.Int32
      description: "\nThe number of child elements.\n"
    content.vb: Protected Overridable ReadOnly Property VisualChildrenCount As Integer
  overload: System.Windows.UIElement.VisualChildrenCount*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: System.Windows.UIElement.AddVisualChild(System.Windows.UIElement)
  commentId: M:System.Windows.UIElement.AddVisualChild(System.Windows.UIElement)
  id: AddVisualChild(System.Windows.UIElement)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: AddVisualChild(UIElement)
  nameWithType: UIElement.AddVisualChild(UIElement)
  fullName: System.Windows.UIElement.AddVisualChild(System.Windows.UIElement)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: AddVisualChild
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 109
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nDefines the parent-child relationship between two visuals.\n"
  example: []
  syntax:
    content: protected void AddVisualChild(UIElement child)
    parameters:
    - id: child
      type: System.Windows.UIElement
      description: "\nThe child visual object to add to parent visual.\n"
    content.vb: Protected Sub AddVisualChild(child As UIElement)
  overload: System.Windows.UIElement.AddVisualChild*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Windows.UIElement.RemoveVisualChild(System.Windows.UIElement)
  commentId: M:System.Windows.UIElement.RemoveVisualChild(System.Windows.UIElement)
  id: RemoveVisualChild(System.Windows.UIElement)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: RemoveVisualChild(UIElement)
  nameWithType: UIElement.RemoveVisualChild(UIElement)
  fullName: System.Windows.UIElement.RemoveVisualChild(System.Windows.UIElement)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: RemoveVisualChild
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 149
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nRemoves the parent-child relationship between two visuals.\n"
  example: []
  syntax:
    content: protected void RemoveVisualChild(UIElement child)
    parameters:
    - id: child
      type: System.Windows.UIElement
      description: "\nThe child visual object to remove from the parent visual.\n"
    content.vb: Protected Sub RemoveVisualChild(child As UIElement)
  overload: System.Windows.UIElement.RemoveVisualChild*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)
  commentId: M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)
  id: OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: UIElement.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnVisualParentChanged
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 190
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nCalled when the parent of the visual object is changed.\n"
  example: []
  syntax:
    content: protected virtual void OnVisualParentChanged(DependencyObject oldParent)
    parameters:
    - id: oldParent
      type: System.Windows.DependencyObject
      description: "\nA value of type <xref href=\"System.Windows.DependencyObject\" data-throw-if-not-resolved=\"false\"></xref> that represents the previous\nparent of the <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref> object. If the <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref>\nobject did not have a previous parent, the value of the parameter is null.\n"
    content.vb: Protected Overridable Sub OnVisualParentChanged(oldParent As DependencyObject)
  overload: System.Windows.UIElement.OnVisualParentChanged*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.UIElement.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  commentId: M:System.Windows.UIElement.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  id: OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: OnVisualChildrenChanged(DependencyObject, DependencyObject)
  nameWithType: UIElement.OnVisualChildrenChanged(DependencyObject, DependencyObject)
  fullName: System.Windows.UIElement.OnVisualChildrenChanged(System.Windows.DependencyObject, System.Windows.DependencyObject)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnVisualChildrenChanged
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 215
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nCalled when the visual element collection of the visual object is modified.\n"
  example: []
  syntax:
    content: protected virtual void OnVisualChildrenChanged(DependencyObject visualAdded, DependencyObject visualRemoved)
    parameters:
    - id: visualAdded
      type: System.Windows.DependencyObject
      description: "\nThe <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref> that was added to the collection.\n"
    - id: visualRemoved
      type: System.Windows.DependencyObject
      description: "\nThe <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref> that was removed from the collection.\n"
    content.vb: Protected Overridable Sub OnVisualChildrenChanged(visualAdded As DependencyObject, visualRemoved As DependencyObject)
  overload: System.Windows.UIElement.OnVisualChildrenChanged*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.UIElement.XamlSourcePath
  commentId: F:System.Windows.UIElement.XamlSourcePath
  id: XamlSourcePath
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: XamlSourcePath
  nameWithType: UIElement.XamlSourcePath
  fullName: System.Windows.UIElement.XamlSourcePath
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: XamlSourcePath
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 300
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: public string XamlSourcePath
    return:
      type: System.String
    content.vb: Public XamlSourcePath As String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.#ctor
  commentId: M:System.Windows.UIElement.#ctor
  id: '#ctor'
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: UIElement()
  nameWithType: UIElement.UIElement()
  fullName: System.Windows.UIElement.UIElement()
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 305
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: public UIElement()
    content.vb: Public Sub New
  overload: System.Windows.UIElement.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  commentId: M:System.Windows.UIElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnPropertyChanged
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 317
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nInvoked whenever the effective value of any dependency property on this\n<xref href=\"System.Windows.DependencyObject\" data-throw-if-not-resolved=\"false\"></xref> has been updated. The specific dependency \nproperty that changed is reported in the event data.\n"
  example: []
  syntax:
    content: protected override void OnPropertyChanged(DependencyPropertyChangedEventArgs e)
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "\nEvent data that will contain the dependency property identifier of interest, \nthe property metadata for the type, and old and new values.\n"
    content.vb: Protected Overrides Sub OnPropertyChanged(e As DependencyPropertyChangedEventArgs)
  overridden: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  overload: System.Windows.UIElement.OnPropertyChanged*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Windows.UIElement.ClipToBounds
  commentId: P:System.Windows.UIElement.ClipToBounds
  id: ClipToBounds
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: ClipToBounds
  nameWithType: UIElement.ClipToBounds
  fullName: System.Windows.UIElement.ClipToBounds
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ClipToBounds
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 335
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets a value indicating whether to clip the content of this element\n(or content coming from the child elements of this element) to fit into the\nsize of the containing element. This is a dependency property.\n"
  example: []
  syntax:
    content: public bool ClipToBounds { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property ClipToBounds As Boolean
  overload: System.Windows.UIElement.ClipToBounds*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.ClipToBoundsProperty
  commentId: F:System.Windows.UIElement.ClipToBoundsProperty
  id: ClipToBoundsProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: ClipToBoundsProperty
  nameWithType: UIElement.ClipToBoundsProperty
  fullName: System.Windows.UIElement.ClipToBoundsProperty
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ClipToBoundsProperty
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 344
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nIdentifies the <xref href=\"System.Windows.UIElement.ClipToBounds\" data-throw-if-not-resolved=\"false\"></xref> dependency property.\n"
  example: []
  syntax:
    content: public static readonly DependencyProperty ClipToBoundsProperty
    return:
      type: System.Windows.DependencyProperty
    content.vb: Public Shared ReadOnly ClipToBoundsProperty As DependencyProperty
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.ClipProperty
  commentId: F:System.Windows.UIElement.ClipProperty
  id: ClipProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: ClipProperty
  nameWithType: UIElement.ClipProperty
  fullName: System.Windows.UIElement.ClipProperty
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ClipProperty
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 369
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nIdentifies the <xref href=\"System.Windows.UIElement.Clip\" data-throw-if-not-resolved=\"false\"></xref> dependency property.\n"
  example: []
  syntax:
    content: public static readonly DependencyProperty ClipProperty
    return:
      type: System.Windows.DependencyProperty
    content.vb: Public Shared ReadOnly ClipProperty As DependencyProperty
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.Clip
  commentId: P:System.Windows.UIElement.Clip
  id: Clip
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: Clip
  nameWithType: UIElement.Clip
  fullName: System.Windows.UIElement.Clip
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Clip
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 386
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets the <xref href=\"System.Windows.Media.Geometry\" data-throw-if-not-resolved=\"false\"></xref> used to define the outline of \nthe contents of a <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Geometry Clip { get; set; }
    parameters: []
    return:
      type: System.Windows.Media.Geometry
      description: "\nThe geometry to be used for clipping area sizing. The default value is null.\n"
    content.vb: Public Property Clip As Geometry
  overload: System.Windows.UIElement.Clip*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.CreateDomElement(System.Object,System.Object@)
  commentId: M:System.Windows.UIElement.CreateDomElement(System.Object,System.Object@)
  id: CreateDomElement(System.Object,System.Object@)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: CreateDomElement(Object, out Object)
  nameWithType: UIElement.CreateDomElement(Object, out Object)
  fullName: System.Windows.UIElement.CreateDomElement(System.Object, out System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CreateDomElement
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 431
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nWhen overriden, creates the dom elements designed to represent an instance of an UIElement and defines the place where its child(ren) will be added.\n"
  example: []
  syntax:
    content: public abstract object CreateDomElement(object parentRef, out object domElementWhereToPlaceChildren)
    parameters:
    - id: parentRef
      type: System.Object
      description: The parent of the UIElement
    - id: domElementWhereToPlaceChildren
      type: System.Object
      description: The dom element where the UIElement&apos;s children will be added.
    return:
      type: System.Object
      description: The &quot;root&quot; dom element of the UIElement.
    content.vb: Public MustOverride Function CreateDomElement(parentRef As Object, ByRef domElementWhereToPlaceChildren As Object) As Object
  overload: System.Windows.UIElement.CreateDomElement*
  nameWithType.vb: UIElement.CreateDomElement(Object, ByRef Object)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Windows.UIElement.CreateDomElement(System.Object, ByRef System.Object)
  name.vb: CreateDomElement(Object, ByRef Object)
- uid: System.Windows.UIElement.IsEnabledProperty
  commentId: F:System.Windows.UIElement.IsEnabledProperty
  id: IsEnabledProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: IsEnabledProperty
  nameWithType: UIElement.IsEnabledProperty
  fullName: System.Windows.UIElement.IsEnabledProperty
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IsEnabledProperty
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 449
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nIdentifies the <xref href=\"System.Windows.UIElement.IsEnabled\" data-throw-if-not-resolved=\"false\"></xref> dependency property.\n"
  example: []
  syntax:
    content: public static readonly DependencyProperty IsEnabledProperty
    return:
      type: System.Windows.DependencyProperty
    content.vb: Public Shared ReadOnly IsEnabledProperty As DependencyProperty
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.IsEnabled
  commentId: P:System.Windows.UIElement.IsEnabled
  id: IsEnabled
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: IsEnabled
  nameWithType: UIElement.IsEnabled
  fullName: System.Windows.UIElement.IsEnabled
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IsEnabled
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 465
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets a value indicating whether the user can interact with the control.\n"
  example: []
  syntax:
    content: public bool IsEnabled { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: "\ntrue if the user can interact with the control; otherwise, false.\n"
    content.vb: Public Property IsEnabled As Boolean
  overload: System.Windows.UIElement.IsEnabled*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.IsEnabledChanged
  commentId: E:System.Windows.UIElement.IsEnabledChanged
  id: IsEnabledChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: IsEnabledChanged
  nameWithType: UIElement.IsEnabledChanged
  fullName: System.Windows.UIElement.IsEnabledChanged
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IsEnabledChanged
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 520
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nOccurs when the <xref href=\"System.Windows.UIElement.IsEnabled\" data-throw-if-not-resolved=\"false\"></xref> property changes.\n"
  example: []
  syntax:
    content: public event DependencyPropertyChangedEventHandler IsEnabledChanged
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
    content.vb: Public Event IsEnabledChanged As DependencyPropertyChangedEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.ManageIsEnabled(System.Boolean)
  commentId: M:System.Windows.UIElement.ManageIsEnabled(System.Boolean)
  id: ManageIsEnabled(System.Boolean)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: ManageIsEnabled(Boolean)
  nameWithType: UIElement.ManageIsEnabled(Boolean)
  fullName: System.Windows.UIElement.ManageIsEnabled(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ManageIsEnabled
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 522
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: protected virtual void ManageIsEnabled(bool isEnabled)
    parameters:
    - id: isEnabled
      type: System.Boolean
    content.vb: Protected Overridable Sub ManageIsEnabled(isEnabled As Boolean)
  overload: System.Windows.UIElement.ManageIsEnabled*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.UIElement.EffectProperty
  commentId: F:System.Windows.UIElement.EffectProperty
  id: EffectProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: EffectProperty
  nameWithType: UIElement.EffectProperty
  fullName: System.Windows.UIElement.EffectProperty
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EffectProperty
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 531
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nIdentifies the <xref href=\"System.Windows.UIElement.Effect\" data-throw-if-not-resolved=\"false\"></xref> dependency property.\n"
  example: []
  syntax:
    content: public static readonly DependencyProperty EffectProperty
    return:
      type: System.Windows.DependencyProperty
    content.vb: Public Shared ReadOnly EffectProperty As DependencyProperty
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.Effect
  commentId: P:System.Windows.UIElement.Effect
  id: Effect
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: Effect
  nameWithType: UIElement.Effect
  fullName: System.Windows.UIElement.Effect
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Effect
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 562
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets the pixel shader effect to use for rendering this <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Effect Effect { get; set; }
    parameters: []
    return:
      type: System.Windows.Media.Effects.Effect
      description: "\nThe pixel shader effect to use for rendering this <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref>. The\ndefault is null (no effects).\n"
    content.vb: Public Property Effect As Effect
  overload: System.Windows.UIElement.Effect*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.RenderTransformProperty
  commentId: F:System.Windows.UIElement.RenderTransformProperty
  id: RenderTransformProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: RenderTransformProperty
  nameWithType: UIElement.RenderTransformProperty
  fullName: System.Windows.UIElement.RenderTransformProperty
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: RenderTransformProperty
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 601
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nIdentifies the <xref href=\"System.Windows.UIElement.RenderTransform\" data-throw-if-not-resolved=\"false\"></xref> dependency property.\n"
  example: []
  syntax:
    content: public static readonly DependencyProperty RenderTransformProperty
    return:
      type: System.Windows.DependencyProperty
    content.vb: Public Shared ReadOnly RenderTransformProperty As DependencyProperty
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.RenderTransform
  commentId: P:System.Windows.UIElement.RenderTransform
  id: RenderTransform
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: RenderTransform
  nameWithType: UIElement.RenderTransform
  fullName: System.Windows.UIElement.RenderTransform
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: RenderTransform
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 622
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets transform information that affects the rendering position of a <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Transform RenderTransform { get; set; }
    parameters: []
    return:
      type: System.Windows.Media.Transform
      description: "\nDescribes the specifics of the desired render transform. The default value is null.\n"
    content.vb: Public Property RenderTransform As Transform
  overload: System.Windows.UIElement.RenderTransform*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.RenderTransformOriginProperty
  commentId: F:System.Windows.UIElement.RenderTransformOriginProperty
  id: RenderTransformOriginProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: RenderTransformOriginProperty
  nameWithType: UIElement.RenderTransformOriginProperty
  fullName: System.Windows.UIElement.RenderTransformOriginProperty
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: RenderTransformOriginProperty
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 662
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nIdentifies the <xref href=\"System.Windows.UIElement.RenderTransformOrigin\" data-throw-if-not-resolved=\"false\"></xref> dependency property.\n"
  example: []
  syntax:
    content: public static readonly DependencyProperty RenderTransformOriginProperty
    return:
      type: System.Windows.DependencyProperty
    content.vb: Public Shared ReadOnly RenderTransformOriginProperty As DependencyProperty
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.RenderTransformOrigin
  commentId: P:System.Windows.UIElement.RenderTransformOrigin
  id: RenderTransformOrigin
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: RenderTransformOrigin
  nameWithType: UIElement.RenderTransformOrigin
  fullName: System.Windows.UIElement.RenderTransformOrigin
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: RenderTransformOrigin
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 679
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets the origin point of any possible render transform declared by\n<xref href=\"System.Windows.UIElement.RenderTransform\" data-throw-if-not-resolved=\"false\"></xref>, relative to the bounds of the <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Point RenderTransformOrigin { get; set; }
    parameters: []
    return:
      type: System.Windows.Point
      description: "\nThe origin point of the render transform. The default value is a point with value 0,0.\n"
    content.vb: Public Property RenderTransformOrigin As Point
  overload: System.Windows.UIElement.RenderTransformOrigin*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.UseLayoutRounding
  commentId: P:System.Windows.UIElement.UseLayoutRounding
  id: UseLayoutRounding
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: UseLayoutRounding
  nameWithType: UIElement.UseLayoutRounding
  fullName: System.Windows.UIElement.UseLayoutRounding
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: UseLayoutRounding
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 701
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets a value that determines whether rendering for the object and\nits visual subtree should use rounding behavior that aligns rendering to\nwhole pixels.\n"
  example: []
  syntax:
    content: public bool UseLayoutRounding { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property UseLayoutRounding As Boolean
  overload: System.Windows.UIElement.UseLayoutRounding*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.UseLayoutRoundingProperty
  commentId: F:System.Windows.UIElement.UseLayoutRoundingProperty
  id: UseLayoutRoundingProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: UseLayoutRoundingProperty
  nameWithType: UIElement.UseLayoutRoundingProperty
  fullName: System.Windows.UIElement.UseLayoutRoundingProperty
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: UseLayoutRoundingProperty
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 710
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nIdentifies the <xref href=\"System.Windows.UIElement.UseLayoutRounding\" data-throw-if-not-resolved=\"false\"></xref> dependency property.\n"
  example: []
  syntax:
    content: public static readonly DependencyProperty UseLayoutRoundingProperty
    return:
      type: System.Windows.DependencyProperty
    content.vb: Public Shared ReadOnly UseLayoutRoundingProperty As DependencyProperty
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.Visibility
  commentId: P:System.Windows.UIElement.Visibility
  id: Visibility
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: Visibility
  nameWithType: UIElement.Visibility
  fullName: System.Windows.UIElement.Visibility
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Visibility
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 762
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets the visibility of a UIElement. A UIElement that is not visible\nis not rendered and does not communicate its desired size to layout.\n"
  example: []
  syntax:
    content: public Visibility Visibility { get; set; }
    parameters: []
    return:
      type: System.Windows.Visibility
    content.vb: Public Property Visibility As Visibility
  overload: System.Windows.UIElement.Visibility*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.VisibilityProperty
  commentId: F:System.Windows.UIElement.VisibilityProperty
  id: VisibilityProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: VisibilityProperty
  nameWithType: UIElement.VisibilityProperty
  fullName: System.Windows.UIElement.VisibilityProperty
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: VisibilityProperty
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 771
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nIdentifies the <xref href=\"System.Windows.UIElement.Visibility\" data-throw-if-not-resolved=\"false\"></xref> dependency property.\n"
  example: []
  syntax:
    content: public static readonly DependencyProperty VisibilityProperty
    return:
      type: System.Windows.DependencyProperty
    content.vb: Public Shared ReadOnly VisibilityProperty As DependencyProperty
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.IsVisibleProperty
  commentId: F:System.Windows.UIElement.IsVisibleProperty
  id: IsVisibleProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: IsVisibleProperty
  nameWithType: UIElement.IsVisibleProperty
  fullName: System.Windows.UIElement.IsVisibleProperty
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IsVisibleProperty
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 855
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nIdentifies the <xref href=\"System.Windows.UIElement.IsVisible\" data-throw-if-not-resolved=\"false\"></xref> dependency property.\n"
  example: []
  syntax:
    content: public static readonly DependencyProperty IsVisibleProperty
    return:
      type: System.Windows.DependencyProperty
    content.vb: Public Shared ReadOnly IsVisibleProperty As DependencyProperty
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.IsVisible
  commentId: P:System.Windows.UIElement.IsVisible
  id: IsVisible
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: IsVisible
  nameWithType: UIElement.IsVisible
  fullName: System.Windows.UIElement.IsVisible
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IsVisible
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 864
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets a value indicating whether this element is visible in the user interface (UI).\nThis is a dependency property.\n"
  example: []
  syntax:
    content: public bool IsVisible { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\ntrue if the element is visible; otherwise, false.\n"
    content.vb: Public ReadOnly Property IsVisible As Boolean
  overload: System.Windows.UIElement.IsVisible*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Windows.UIElement.IsVisibleChanged
  commentId: E:System.Windows.UIElement.IsVisibleChanged
  id: IsVisibleChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: IsVisibleChanged
  nameWithType: UIElement.IsVisibleChanged
  fullName: System.Windows.UIElement.IsVisibleChanged
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IsVisibleChanged
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 931
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nOccurs when the value of the <xref href=\"System.Windows.UIElement.IsVisible\" data-throw-if-not-resolved=\"false\"></xref> property changes on this element.\n"
  example: []
  syntax:
    content: public event DependencyPropertyChangedEventHandler IsVisibleChanged
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
    content.vb: Public Event IsVisibleChanged As DependencyPropertyChangedEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.OpacityProperty
  commentId: F:System.Windows.UIElement.OpacityProperty
  id: OpacityProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: OpacityProperty
  nameWithType: UIElement.OpacityProperty
  fullName: System.Windows.UIElement.OpacityProperty
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OpacityProperty
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 942
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nIdentifies the <xref href=\"System.Windows.UIElement.Opacity\" data-throw-if-not-resolved=\"false\"></xref> dependency property.\n"
  example: []
  syntax:
    content: public static readonly DependencyProperty OpacityProperty
    return:
      type: System.Windows.DependencyProperty
    content.vb: Public Shared ReadOnly OpacityProperty As DependencyProperty
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.Opacity
  commentId: P:System.Windows.UIElement.Opacity
  id: Opacity
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: Opacity
  nameWithType: UIElement.Opacity
  fullName: System.Windows.UIElement.Opacity
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Opacity
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 959
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets the degree of the object&apos;s opacity.\n"
  example: []
  syntax:
    content: public double Opacity { get; set; }
    parameters: []
    return:
      type: System.Double
      description: "\nA value between 0 and 1.0 that declares the opacity factor, with 1.0 meaning\nfull opacity and 0 meaning transparent. The default value is 1.0.\n"
    content.vb: Public Property Opacity As Double
  overload: System.Windows.UIElement.Opacity*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.OpacityMaskProperty
  commentId: F:System.Windows.UIElement.OpacityMaskProperty
  id: OpacityMaskProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: OpacityMaskProperty
  nameWithType: UIElement.OpacityMaskProperty
  fullName: System.Windows.UIElement.OpacityMaskProperty
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OpacityMaskProperty
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 968
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nIdentifies the <xref href=\"System.Windows.UIElement.OpacityMask\" data-throw-if-not-resolved=\"false\"></xref> dependency property.\n"
  example: []
  syntax:
    content: public static readonly DependencyProperty OpacityMaskProperty
    return:
      type: System.Windows.DependencyProperty
    content.vb: Public Shared ReadOnly OpacityMaskProperty As DependencyProperty
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.OpacityMask
  commentId: P:System.Windows.UIElement.OpacityMask
  id: OpacityMask
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: OpacityMask
  nameWithType: UIElement.OpacityMask
  fullName: System.Windows.UIElement.OpacityMask
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OpacityMask
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 984
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets the brush used to alter the opacity of regions of this object.\n"
  example: []
  syntax:
    content: public Brush OpacityMask { get; set; }
    parameters: []
    return:
      type: System.Windows.Media.Brush
      description: "\nA brush that describes the opacity applied to this object. The default is null.\n"
    content.vb: Public Property OpacityMask As Brush
  overload: System.Windows.UIElement.OpacityMask*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.IsHitTestVisible
  commentId: P:System.Windows.UIElement.IsHitTestVisible
  id: IsHitTestVisible
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: IsHitTestVisible
  nameWithType: UIElement.IsHitTestVisible
  fullName: System.Windows.UIElement.IsHitTestVisible
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IsHitTestVisible
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 1029
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets whether the contained area of this UIElement can return true\nvalues for hit testing.\n"
  example: []
  syntax:
    content: public bool IsHitTestVisible { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsHitTestVisible As Boolean
  overload: System.Windows.UIElement.IsHitTestVisible*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.IsHitTestVisibleProperty
  commentId: F:System.Windows.UIElement.IsHitTestVisibleProperty
  id: IsHitTestVisibleProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: IsHitTestVisibleProperty
  nameWithType: UIElement.IsHitTestVisibleProperty
  fullName: System.Windows.UIElement.IsHitTestVisibleProperty
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IsHitTestVisibleProperty
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 1038
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nIdentifies the <xref href=\"System.Windows.UIElement.IsHitTestVisible\" data-throw-if-not-resolved=\"false\"></xref> dependency property.\n"
  example: []
  syntax:
    content: public static readonly DependencyProperty IsHitTestVisibleProperty
    return:
      type: System.Windows.DependencyProperty
    content.vb: Public Shared ReadOnly IsHitTestVisibleProperty As DependencyProperty
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.AllowDrop
  commentId: P:System.Windows.UIElement.AllowDrop
  id: AllowDrop
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: AllowDrop
  nameWithType: UIElement.AllowDrop
  fullName: System.Windows.UIElement.AllowDrop
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: AllowDrop
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 1141
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets a value that determines whether this UIElement\ncan be a drop target for purposes of drag-and-drop operations.\n"
  example: []
  syntax:
    content: public bool AllowDrop { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property AllowDrop As Boolean
  overload: System.Windows.UIElement.AllowDrop*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.AllowDropProperty
  commentId: F:System.Windows.UIElement.AllowDropProperty
  id: AllowDropProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: AllowDropProperty
  nameWithType: UIElement.AllowDropProperty
  fullName: System.Windows.UIElement.AllowDropProperty
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: AllowDropProperty
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 1150
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nIdentifies the <xref href=\"System.Windows.UIElement.AllowDrop\" data-throw-if-not-resolved=\"false\"></xref> dependency property.\n"
  example: []
  syntax:
    content: public static readonly DependencyProperty AllowDropProperty
    return:
      type: System.Windows.DependencyProperty
    content.vb: Public Shared ReadOnly AllowDropProperty As DependencyProperty
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.CaptureMouse
  commentId: M:System.Windows.UIElement.CaptureMouse
  id: CaptureMouse
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: CaptureMouse()
  nameWithType: UIElement.CaptureMouse()
  fullName: System.Windows.UIElement.CaptureMouse()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CaptureMouse
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 1165
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nSets pointer capture to a UIElement.\n"
  example: []
  syntax:
    content: public bool CaptureMouse()
    return:
      type: System.Boolean
      description: True if the object has pointer capture; otherwise, false.
    content.vb: Public Function CaptureMouse As Boolean
  overload: System.Windows.UIElement.CaptureMouse*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.IsMouseCaptured
  commentId: P:System.Windows.UIElement.IsMouseCaptured
  id: IsMouseCaptured
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: IsMouseCaptured
  nameWithType: UIElement.IsMouseCaptured
  fullName: System.Windows.UIElement.IsMouseCaptured
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IsMouseCaptured
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 1170
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets a value indicating whether the pointer is captured to this element.\n"
  example: []
  syntax:
    content: public bool IsMouseCaptured { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsMouseCaptured As Boolean
  overload: System.Windows.UIElement.IsMouseCaptured*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Windows.UIElement.ReleaseMouseCapture
  commentId: M:System.Windows.UIElement.ReleaseMouseCapture
  id: ReleaseMouseCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: ReleaseMouseCapture()
  nameWithType: UIElement.ReleaseMouseCapture()
  fullName: System.Windows.UIElement.ReleaseMouseCapture()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ReleaseMouseCapture
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 1175
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nReleases pointer captures for capture of one specific pointer by this UIElement.\n"
  example: []
  syntax:
    content: public void ReleaseMouseCapture()
    content.vb: Public Sub ReleaseMouseCapture
  overload: System.Windows.UIElement.ReleaseMouseCapture*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.AllowScrollOnTouchMove
  commentId: P:System.Windows.UIElement.AllowScrollOnTouchMove
  id: AllowScrollOnTouchMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: AllowScrollOnTouchMove
  nameWithType: UIElement.AllowScrollOnTouchMove
  fullName: System.Windows.UIElement.AllowScrollOnTouchMove
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: AllowScrollOnTouchMove
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 1184
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets whether pressing (touchscreen devices) on this UIElement then moving should allow scrolling or not. The default value is True.\n"
  example: []
  syntax:
    content: public bool AllowScrollOnTouchMove { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property AllowScrollOnTouchMove As Boolean
  overload: System.Windows.UIElement.AllowScrollOnTouchMove*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.AllowScrollOnTouchMoveProperty
  commentId: F:System.Windows.UIElement.AllowScrollOnTouchMoveProperty
  id: AllowScrollOnTouchMoveProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: AllowScrollOnTouchMoveProperty
  nameWithType: UIElement.AllowScrollOnTouchMoveProperty
  fullName: System.Windows.UIElement.AllowScrollOnTouchMoveProperty
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: AllowScrollOnTouchMoveProperty
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement.cs
    startLine: 1193
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nIdentifies the <xref href=\"System.Windows.UIElement.AllowScrollOnTouchMove\" data-throw-if-not-resolved=\"false\"></xref> dependency property.\n"
  example: []
  syntax:
    content: public static readonly DependencyProperty AllowScrollOnTouchMoveProperty
    return:
      type: System.Windows.DependencyProperty
    content.vb: Public Shared ReadOnly AllowScrollOnTouchMoveProperty As DependencyProperty
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  commentId: M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  id: AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: AddHandler(RoutedEvent, Delegate, Boolean)
  nameWithType: UIElement.AddHandler(RoutedEvent, Delegate, Boolean)
  fullName: System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent, System.Delegate, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: AddHandler
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 116
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nAdds a routed event handler for a specified routed event, adding the handler\nto the handler collection on the current element. Specify handledEventsToo as\ntrue to have the provided handler be invoked for routed event that had already\nbeen marked as handled by another element along the event route.\n"
  example: []
  syntax:
    content: public void AddHandler(RoutedEvent routedEvent, Delegate handler, bool handledEventsToo)
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "\nAn identifier for the routed event to be handled.\n"
    - id: handler
      type: System.Delegate
      description: "\nA reference to the handler implementation.\n"
    - id: handledEventsToo
      type: System.Boolean
      description: "\ntrue to register the handler such that it is invoked even when the routed event\nis marked handled in its event data; false to register the handler with the default\ncondition that it will not be invoked if the routed event is already marked handled.\nThe default is false. Do not routinely ask to rehandle a routed event. For more\ninformation, see Remarks.\n"
    content.vb: Public Sub AddHandler(routedEvent As RoutedEvent, handler As  Delegate, handledEventsToo As Boolean)
  overload: System.Windows.UIElement.AddHandler*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nroutedEvent or handler is null.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nroutedEvent does not represent a supported routed event.-or-handler does not\nimplement a supported delegate.\n"
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "\nAttempted to add handler for an event not supported by the current platform variation.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  commentId: M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  id: RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: RemoveHandler(RoutedEvent, Delegate)
  nameWithType: UIElement.RemoveHandler(RoutedEvent, Delegate)
  fullName: System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent, System.Delegate)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: RemoveHandler
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 158
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nRemoves the specified routed event handler from this <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void RemoveHandler(RoutedEvent routedEvent, Delegate handler)
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "\nThe identifier of the routed event for which the handler is attached.\n"
    - id: handler
      type: System.Delegate
      description: "\nThe specific handler implementation to remove from the event handler collection\non this <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public Sub RemoveHandler(routedEvent As RoutedEvent, handler As  Delegate)
  overload: System.Windows.UIElement.RemoveHandler*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nroutedEvent or handler is null.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nroutedEvent does not represent a supported routed event.-or-handler does not\nimplement a supported delegate.\n"
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "\nAttempted to remove handler for an event not supported by the current platform\nvariation.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.MouseMoveEvent
  commentId: F:System.Windows.UIElement.MouseMoveEvent
  id: MouseMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: MouseMoveEvent
  nameWithType: UIElement.MouseMoveEvent
  fullName: System.Windows.UIElement.MouseMoveEvent
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MouseMoveEvent
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 296
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: public static readonly RoutedEvent MouseMoveEvent
    return:
      type: System.Windows.RoutedEvent
    content.vb: Public Shared ReadOnly MouseMoveEvent As RoutedEvent
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.MouseMove
  commentId: E:System.Windows.UIElement.MouseMove
  id: MouseMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: MouseMove
  nameWithType: UIElement.MouseMove
  fullName: System.Windows.UIElement.MouseMove
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MouseMove
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 302
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nOccurs when the pointer device that previously initiated a Press action is\nmoved, while within this element.\n"
  example: []
  syntax:
    content: public event MouseEventHandler MouseMove
    return:
      type: System.Windows.Input.MouseEventHandler
    content.vb: Public Event MouseMove As MouseEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  commentId: M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  id: OnMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: OnMouseMove(MouseEventArgs)
  nameWithType: UIElement.OnMouseMove(MouseEventArgs)
  fullName: System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnMouseMove
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 319
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nRaises the PointerMoved event\n"
  example: []
  syntax:
    content: protected virtual void OnMouseMove(MouseEventArgs eventArgs)
    parameters:
    - id: eventArgs
      type: System.Windows.Input.MouseEventArgs
      description: The arguments for the event.
    content.vb: Protected Overridable Sub OnMouseMove(eventArgs As MouseEventArgs)
  overload: System.Windows.UIElement.OnMouseMove*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.UIElement.MouseLeftButtonDownEvent
  commentId: F:System.Windows.UIElement.MouseLeftButtonDownEvent
  id: MouseLeftButtonDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: MouseLeftButtonDownEvent
  nameWithType: UIElement.MouseLeftButtonDownEvent
  fullName: System.Windows.UIElement.MouseLeftButtonDownEvent
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MouseLeftButtonDownEvent
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 327
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: public static readonly RoutedEvent MouseLeftButtonDownEvent
    return:
      type: System.Windows.RoutedEvent
    content.vb: Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.MouseLeftButtonDown
  commentId: E:System.Windows.UIElement.MouseLeftButtonDown
  id: MouseLeftButtonDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: MouseLeftButtonDown
  nameWithType: UIElement.MouseLeftButtonDown
  fullName: System.Windows.UIElement.MouseLeftButtonDown
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MouseLeftButtonDown
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 333
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nOccurs when the pointer device that previously initiated a Press action is\npressed, while within this element.\n"
  example: []
  syntax:
    content: public event MouseButtonEventHandler MouseLeftButtonDown
    return:
      type: System.Windows.Input.MouseButtonEventHandler
    content.vb: Public Event MouseLeftButtonDown As MouseButtonEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  commentId: M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: OnMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnMouseLeftButtonDown
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 349
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nRaises the PointerPressed event\n"
  example: []
  syntax:
    content: protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs eventArgs)
    parameters:
    - id: eventArgs
      type: System.Windows.Input.MouseButtonEventArgs
      description: The arguments for the event.
    content.vb: Protected Overridable Sub OnMouseLeftButtonDown(eventArgs As MouseButtonEventArgs)
  overload: System.Windows.UIElement.OnMouseLeftButtonDown*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.UIElement.MouseRightButtonDownEvent
  commentId: F:System.Windows.UIElement.MouseRightButtonDownEvent
  id: MouseRightButtonDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: MouseRightButtonDownEvent
  nameWithType: UIElement.MouseRightButtonDownEvent
  fullName: System.Windows.UIElement.MouseRightButtonDownEvent
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MouseRightButtonDownEvent
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 360
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nIdentifies the <xref href=\"System.Windows.UIElement.MouseRightButtonDown\" data-throw-if-not-resolved=\"false\"></xref> routed event.\n"
  example: []
  syntax:
    content: public static readonly RoutedEvent MouseRightButtonDownEvent
    return:
      type: System.Windows.RoutedEvent
    content.vb: Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.MouseRightButtonDown
  commentId: E:System.Windows.UIElement.MouseRightButtonDown
  id: MouseRightButtonDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: MouseRightButtonDown
  nameWithType: UIElement.MouseRightButtonDown
  fullName: System.Windows.UIElement.MouseRightButtonDown
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MouseRightButtonDown
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 362
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: public event MouseButtonEventHandler MouseRightButtonDown
    return:
      type: System.Windows.Input.MouseButtonEventHandler
    content.vb: Public Event MouseRightButtonDown As MouseButtonEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  commentId: M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: OnMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnMouseRightButtonDown
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 378
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nRaises the MouseRightButtonDown event\n"
  example: []
  syntax:
    content: protected virtual void OnMouseRightButtonDown(MouseButtonEventArgs eventArgs)
    parameters:
    - id: eventArgs
      type: System.Windows.Input.MouseButtonEventArgs
      description: The arguments for the event.
    content.vb: Protected Overridable Sub OnMouseRightButtonDown(eventArgs As MouseButtonEventArgs)
  overload: System.Windows.UIElement.OnMouseRightButtonDown*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.UIElement.MouseWheelEvent
  commentId: F:System.Windows.UIElement.MouseWheelEvent
  id: MouseWheelEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: MouseWheelEvent
  nameWithType: UIElement.MouseWheelEvent
  fullName: System.Windows.UIElement.MouseWheelEvent
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MouseWheelEvent
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 389
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nIdentifies the <xref href=\"System.Windows.UIElement.MouseWheel\" data-throw-if-not-resolved=\"false\"></xref> routed event.\n"
  example: []
  syntax:
    content: public static readonly RoutedEvent MouseWheelEvent
    return:
      type: System.Windows.RoutedEvent
    content.vb: Public Shared ReadOnly MouseWheelEvent As RoutedEvent
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.MouseWheel
  commentId: E:System.Windows.UIElement.MouseWheel
  id: MouseWheel
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: MouseWheel
  nameWithType: UIElement.MouseWheel
  fullName: System.Windows.UIElement.MouseWheel
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MouseWheel
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 395
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nOccurs when the user rotates the mouse wheel while the mouse pointer is over\na <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref>, or the <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref> has focus.\n"
  example: []
  syntax:
    content: public event MouseWheelEventHandler MouseWheel
    return:
      type: System.Windows.Input.MouseWheelEventHandler
    content.vb: Public Event MouseWheel As MouseWheelEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  commentId: M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  id: OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: OnMouseWheel(MouseWheelEventArgs)
  nameWithType: UIElement.OnMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnMouseWheel
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 411
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nRaises the PointerWheelChanged event\n"
  example: []
  syntax:
    content: protected virtual void OnMouseWheel(MouseWheelEventArgs eventArgs)
    parameters:
    - id: eventArgs
      type: System.Windows.Input.MouseWheelEventArgs
      description: The arguments for the event.
    content.vb: Protected Overridable Sub OnMouseWheel(eventArgs As MouseWheelEventArgs)
  overload: System.Windows.UIElement.OnMouseWheel*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.UIElement.MouseLeftButtonUpEvent
  commentId: F:System.Windows.UIElement.MouseLeftButtonUpEvent
  id: MouseLeftButtonUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: MouseLeftButtonUpEvent
  nameWithType: UIElement.MouseLeftButtonUpEvent
  fullName: System.Windows.UIElement.MouseLeftButtonUpEvent
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MouseLeftButtonUpEvent
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 420
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: public static readonly RoutedEvent MouseLeftButtonUpEvent
    return:
      type: System.Windows.RoutedEvent
    content.vb: Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.MouseLeftButtonUp
  commentId: E:System.Windows.UIElement.MouseLeftButtonUp
  id: MouseLeftButtonUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: MouseLeftButtonUp
  nameWithType: UIElement.MouseLeftButtonUp
  fullName: System.Windows.UIElement.MouseLeftButtonUp
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MouseLeftButtonUp
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 426
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nOccurs when the pointer device that previously initiated a Press action is\nreleased, while within this element.\n"
  example: []
  syntax:
    content: public event MouseButtonEventHandler MouseLeftButtonUp
    return:
      type: System.Windows.Input.MouseButtonEventHandler
    content.vb: Public Event MouseLeftButtonUp As MouseButtonEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  commentId: M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: OnMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnMouseLeftButtonUp
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 442
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nRaises the PointerReleased event\n"
  example: []
  syntax:
    content: protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs eventArgs)
    parameters:
    - id: eventArgs
      type: System.Windows.Input.MouseButtonEventArgs
      description: The arguments for the event.
    content.vb: Protected Overridable Sub OnMouseLeftButtonUp(eventArgs As MouseButtonEventArgs)
  overload: System.Windows.UIElement.OnMouseLeftButtonUp*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.UIElement.MouseEnterEvent
  commentId: F:System.Windows.UIElement.MouseEnterEvent
  id: MouseEnterEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: MouseEnterEvent
  nameWithType: UIElement.MouseEnterEvent
  fullName: System.Windows.UIElement.MouseEnterEvent
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MouseEnterEvent
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 450
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: public static readonly RoutedEvent MouseEnterEvent
    return:
      type: System.Windows.RoutedEvent
    content.vb: Public Shared ReadOnly MouseEnterEvent As RoutedEvent
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.MouseEnter
  commentId: E:System.Windows.UIElement.MouseEnter
  id: MouseEnter
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: MouseEnter
  nameWithType: UIElement.MouseEnter
  fullName: System.Windows.UIElement.MouseEnter
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MouseEnter
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 455
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nOccurs when a pointer enters the hit test area of this element.\n"
  example: []
  syntax:
    content: public event MouseEventHandler MouseEnter
    return:
      type: System.Windows.Input.MouseEventHandler
    content.vb: Public Event MouseEnter As MouseEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  commentId: M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  id: OnMouseEnter(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: OnMouseEnter(MouseEventArgs)
  nameWithType: UIElement.OnMouseEnter(MouseEventArgs)
  fullName: System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnMouseEnter
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 471
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nRaises the PointerEntered event\n"
  example: []
  syntax:
    content: protected virtual void OnMouseEnter(MouseEventArgs eventArgs)
    parameters:
    - id: eventArgs
      type: System.Windows.Input.MouseEventArgs
      description: The arguments for the event.
    content.vb: Protected Overridable Sub OnMouseEnter(eventArgs As MouseEventArgs)
  overload: System.Windows.UIElement.OnMouseEnter*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.UIElement.MouseLeaveEvent
  commentId: F:System.Windows.UIElement.MouseLeaveEvent
  id: MouseLeaveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: MouseLeaveEvent
  nameWithType: UIElement.MouseLeaveEvent
  fullName: System.Windows.UIElement.MouseLeaveEvent
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MouseLeaveEvent
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 479
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: public static readonly RoutedEvent MouseLeaveEvent
    return:
      type: System.Windows.RoutedEvent
    content.vb: Public Shared ReadOnly MouseLeaveEvent As RoutedEvent
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.MouseLeave
  commentId: E:System.Windows.UIElement.MouseLeave
  id: MouseLeave
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: MouseLeave
  nameWithType: UIElement.MouseLeave
  fullName: System.Windows.UIElement.MouseLeave
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MouseLeave
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 484
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nOccurs when a pointer leaves the hit test area of this element.\n"
  example: []
  syntax:
    content: public event MouseEventHandler MouseLeave
    return:
      type: System.Windows.Input.MouseEventHandler
    content.vb: Public Event MouseLeave As MouseEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  commentId: M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  id: OnMouseLeave(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: OnMouseLeave(MouseEventArgs)
  nameWithType: UIElement.OnMouseLeave(MouseEventArgs)
  fullName: System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnMouseLeave
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 500
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nRaises the PointerExited event\n"
  example: []
  syntax:
    content: protected virtual void OnMouseLeave(MouseEventArgs eventArgs)
    parameters:
    - id: eventArgs
      type: System.Windows.Input.MouseEventArgs
      description: The arguments for the event.
    content.vb: Protected Overridable Sub OnMouseLeave(eventArgs As MouseEventArgs)
  overload: System.Windows.UIElement.OnMouseLeave*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.UIElement.TextInputStartEvent
  commentId: F:System.Windows.UIElement.TextInputStartEvent
  id: TextInputStartEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: TextInputStartEvent
  nameWithType: UIElement.TextInputStartEvent
  fullName: System.Windows.UIElement.TextInputStartEvent
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: TextInputStartEvent
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 511
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nIdentifies the <xref href=\"System.Windows.UIElement.TextInputStart\" data-throw-if-not-resolved=\"false\"></xref> routed event.\n"
  example: []
  syntax:
    content: public static readonly RoutedEvent TextInputStartEvent
    return:
      type: System.Windows.RoutedEvent
    content.vb: Public Shared ReadOnly TextInputStartEvent As RoutedEvent
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.TextInputStart
  commentId: E:System.Windows.UIElement.TextInputStart
  id: TextInputStart
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: TextInputStart
  nameWithType: UIElement.TextInputStart
  fullName: System.Windows.UIElement.TextInputStart
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: TextInputStart
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 516
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nOccurs when a UI element initially gets text in a device-independent manner.\n"
  example: []
  syntax:
    content: public event TextCompositionEventHandler TextInputStart
    return:
      type: System.Windows.Input.TextCompositionEventHandler
    content.vb: Public Event TextInputStart As TextCompositionEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.OnTextInputStart(System.Windows.Input.TextCompositionEventArgs)
  commentId: M:System.Windows.UIElement.OnTextInputStart(System.Windows.Input.TextCompositionEventArgs)
  id: OnTextInputStart(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: OnTextInputStart(TextCompositionEventArgs)
  nameWithType: UIElement.OnTextInputStart(TextCompositionEventArgs)
  fullName: System.Windows.UIElement.OnTextInputStart(System.Windows.Input.TextCompositionEventArgs)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnTextInputStart
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 534
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nCalled before the <xref href=\"System.Windows.UIElement.TextInputStart\" data-throw-if-not-resolved=\"false\"></xref> event occurs.\n"
  example: []
  syntax:
    content: protected virtual void OnTextInputStart(TextCompositionEventArgs e)
    parameters:
    - id: e
      type: System.Windows.Input.TextCompositionEventArgs
      description: "\nA <xref href=\"System.Windows.Input.TextCompositionEventArgs\" data-throw-if-not-resolved=\"false\"></xref> that contains the event data.\n"
    content.vb: Protected Overridable Sub OnTextInputStart(e As TextCompositionEventArgs)
  overload: System.Windows.UIElement.OnTextInputStart*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.UIElement.TextInputEvent
  commentId: F:System.Windows.UIElement.TextInputEvent
  id: TextInputEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: TextInputEvent
  nameWithType: UIElement.TextInputEvent
  fullName: System.Windows.UIElement.TextInputEvent
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: TextInputEvent
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 541
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nIdentifies the <xref href=\"System.Windows.UIElement.TextInput\" data-throw-if-not-resolved=\"false\"></xref> routed event.\n"
  example: []
  syntax:
    content: public static readonly RoutedEvent TextInputEvent
    return:
      type: System.Windows.RoutedEvent
    content.vb: Public Shared ReadOnly TextInputEvent As RoutedEvent
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.TextInput
  commentId: E:System.Windows.UIElement.TextInput
  id: TextInput
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: TextInput
  nameWithType: UIElement.TextInput
  fullName: System.Windows.UIElement.TextInput
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: TextInput
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 549
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nOccurs when a UI element gets text in a device-independent manner.\n"
  example: []
  syntax:
    content: public event TextCompositionEventHandler TextInput
    return:
      type: System.Windows.Input.TextCompositionEventHandler
    content.vb: Public Event TextInput As TextCompositionEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  commentId: M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  id: OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: OnTextInput(TextCompositionEventArgs)
  nameWithType: UIElement.OnTextInput(TextCompositionEventArgs)
  fullName: System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnTextInput
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 567
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nCalled before the <xref href=\"System.Windows.UIElement.TextInput\" data-throw-if-not-resolved=\"false\"></xref> event occurs.\n"
  example: []
  syntax:
    content: protected virtual void OnTextInput(TextCompositionEventArgs eventArgs)
    parameters:
    - id: eventArgs
      type: System.Windows.Input.TextCompositionEventArgs
      description: "\nA <xref href=\"System.Windows.Input.TextCompositionEventArgs\" data-throw-if-not-resolved=\"false\"></xref> that contains the event data.\n"
    content.vb: Protected Overridable Sub OnTextInput(eventArgs As TextCompositionEventArgs)
  overload: System.Windows.UIElement.OnTextInput*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.UIElement.TextInputUpdateEvent
  commentId: F:System.Windows.UIElement.TextInputUpdateEvent
  id: TextInputUpdateEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: TextInputUpdateEvent
  nameWithType: UIElement.TextInputUpdateEvent
  fullName: System.Windows.UIElement.TextInputUpdateEvent
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: TextInputUpdateEvent
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 575
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nIdentifies the <xref href=\"System.Windows.UIElement.TextInputUpdate\" data-throw-if-not-resolved=\"false\"></xref> routed event.\n"
  example: []
  syntax:
    content: >-
      [NotImplemented]

      public static readonly RoutedEvent TextInputUpdateEvent
    return:
      type: System.Windows.RoutedEvent
    content.vb: >-
      <NotImplemented>

      Public Shared ReadOnly TextInputUpdateEvent As RoutedEvent
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.TextInputUpdate
  commentId: E:System.Windows.UIElement.TextInputUpdate
  id: TextInputUpdate
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: TextInputUpdate
  nameWithType: UIElement.TextInputUpdate
  fullName: System.Windows.UIElement.TextInputUpdate
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: TextInputUpdate
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 581
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nOccurs when text continues to be composed via an input method editor (IME).\n"
  example: []
  syntax:
    content: >-
      [NotImplemented]

      public event TextCompositionEventHandler TextInputUpdate
    return:
      type: System.Windows.Input.TextCompositionEventHandler
    content.vb: >-
      <NotImplemented>

      Public Event TextInputUpdate As TextCompositionEventHandler
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.TappedEvent
  commentId: F:System.Windows.UIElement.TappedEvent
  id: TappedEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: TappedEvent
  nameWithType: UIElement.TappedEvent
  fullName: System.Windows.UIElement.TappedEvent
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: TappedEvent
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 587
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: public static readonly RoutedEvent TappedEvent
    return:
      type: System.Windows.RoutedEvent
    content.vb: Public Shared ReadOnly TappedEvent As RoutedEvent
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.Tapped
  commentId: E:System.Windows.UIElement.Tapped
  id: Tapped
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: Tapped
  nameWithType: UIElement.Tapped
  fullName: System.Windows.UIElement.Tapped
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Tapped
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 593
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nOccurs when an otherwise unhandled Tap interaction occurs over the hit test\narea of this element.\n"
  example: []
  syntax:
    content: public event TappedEventHandler Tapped
    return:
      type: System.Windows.Input.TappedEventHandler
    content.vb: Public Event Tapped As TappedEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.OnTapped(System.Windows.Input.TappedRoutedEventArgs)
  commentId: M:System.Windows.UIElement.OnTapped(System.Windows.Input.TappedRoutedEventArgs)
  id: OnTapped(System.Windows.Input.TappedRoutedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: OnTapped(TappedRoutedEventArgs)
  nameWithType: UIElement.OnTapped(TappedRoutedEventArgs)
  fullName: System.Windows.UIElement.OnTapped(System.Windows.Input.TappedRoutedEventArgs)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnTapped
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 609
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nRaises the Tapped event\n"
  example: []
  syntax:
    content: protected virtual void OnTapped(TappedRoutedEventArgs eventArgs)
    parameters:
    - id: eventArgs
      type: System.Windows.Input.TappedRoutedEventArgs
      description: The arguments for the event.
    content.vb: Protected Overridable Sub OnTapped(eventArgs As TappedRoutedEventArgs)
  overload: System.Windows.UIElement.OnTapped*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.UIElement.MouseRightButtonUpEvent
  commentId: F:System.Windows.UIElement.MouseRightButtonUpEvent
  id: MouseRightButtonUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: MouseRightButtonUpEvent
  nameWithType: UIElement.MouseRightButtonUpEvent
  fullName: System.Windows.UIElement.MouseRightButtonUpEvent
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MouseRightButtonUpEvent
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 617
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: public static readonly RoutedEvent MouseRightButtonUpEvent
    return:
      type: System.Windows.RoutedEvent
    content.vb: Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.MouseRightButtonUp
  commentId: E:System.Windows.UIElement.MouseRightButtonUp
  id: MouseRightButtonUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: MouseRightButtonUp
  nameWithType: UIElement.MouseRightButtonUp
  fullName: System.Windows.UIElement.MouseRightButtonUp
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MouseRightButtonUp
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 623
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nOccurs when a right-tap input stimulus happens while the pointer is over\nthe element.\n"
  example: []
  syntax:
    content: public event MouseButtonEventHandler MouseRightButtonUp
    return:
      type: System.Windows.Input.MouseButtonEventHandler
    content.vb: Public Event MouseRightButtonUp As MouseButtonEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  commentId: M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: OnMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnMouseRightButtonUp
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 639
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nRaises the RightTapped event\n"
  example: []
  syntax:
    content: protected virtual void OnMouseRightButtonUp(MouseButtonEventArgs eventArgs)
    parameters:
    - id: eventArgs
      type: System.Windows.Input.MouseButtonEventArgs
      description: The arguments for the event.
    content.vb: Protected Overridable Sub OnMouseRightButtonUp(eventArgs As MouseButtonEventArgs)
  overload: System.Windows.UIElement.OnMouseRightButtonUp*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.UIElement.KeyDownEvent
  commentId: F:System.Windows.UIElement.KeyDownEvent
  id: KeyDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: KeyDownEvent
  nameWithType: UIElement.KeyDownEvent
  fullName: System.Windows.UIElement.KeyDownEvent
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: KeyDownEvent
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 647
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: public static readonly RoutedEvent KeyDownEvent
    return:
      type: System.Windows.RoutedEvent
    content.vb: Public Shared ReadOnly KeyDownEvent As RoutedEvent
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.KeyDown
  commentId: E:System.Windows.UIElement.KeyDown
  id: KeyDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: KeyDown
  nameWithType: UIElement.KeyDown
  fullName: System.Windows.UIElement.KeyDown
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: KeyDown
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 652
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nOccurs when a keyboard key is pressed while the UIElement has focus.\n"
  example: []
  syntax:
    content: public event KeyEventHandler KeyDown
    return:
      type: System.Windows.Input.KeyEventHandler
    content.vb: Public Event KeyDown As KeyEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  commentId: M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  id: OnKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: OnKeyDown(KeyEventArgs)
  nameWithType: UIElement.OnKeyDown(KeyEventArgs)
  fullName: System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnKeyDown
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 668
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nRaises the KeyDown event\n"
  example: []
  syntax:
    content: protected virtual void OnKeyDown(KeyEventArgs eventArgs)
    parameters:
    - id: eventArgs
      type: System.Windows.Input.KeyEventArgs
      description: The arguments for the event.
    content.vb: Protected Overridable Sub OnKeyDown(eventArgs As KeyEventArgs)
  overload: System.Windows.UIElement.OnKeyDown*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.UIElement.KeyUpEvent
  commentId: F:System.Windows.UIElement.KeyUpEvent
  id: KeyUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: KeyUpEvent
  nameWithType: UIElement.KeyUpEvent
  fullName: System.Windows.UIElement.KeyUpEvent
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: KeyUpEvent
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 676
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: public static readonly RoutedEvent KeyUpEvent
    return:
      type: System.Windows.RoutedEvent
    content.vb: Public Shared ReadOnly KeyUpEvent As RoutedEvent
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.KeyUp
  commentId: E:System.Windows.UIElement.KeyUp
  id: KeyUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: KeyUp
  nameWithType: UIElement.KeyUp
  fullName: System.Windows.UIElement.KeyUp
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: KeyUp
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 681
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nOccurs when a keyboard key is released while the UIElement has focus.\n"
  example: []
  syntax:
    content: public event KeyEventHandler KeyUp
    return:
      type: System.Windows.Input.KeyEventHandler
    content.vb: Public Event KeyUp As KeyEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  commentId: M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  id: OnKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: OnKeyUp(KeyEventArgs)
  nameWithType: UIElement.OnKeyUp(KeyEventArgs)
  fullName: System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnKeyUp
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 697
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nRaises the KeyUp event\n"
  example: []
  syntax:
    content: protected virtual void OnKeyUp(KeyEventArgs eventArgs)
    parameters:
    - id: eventArgs
      type: System.Windows.Input.KeyEventArgs
      description: The arguments for the event.
    content.vb: Protected Overridable Sub OnKeyUp(eventArgs As KeyEventArgs)
  overload: System.Windows.UIElement.OnKeyUp*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.UIElement.GotFocusEvent
  commentId: F:System.Windows.UIElement.GotFocusEvent
  id: GotFocusEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: GotFocusEvent
  nameWithType: UIElement.GotFocusEvent
  fullName: System.Windows.UIElement.GotFocusEvent
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GotFocusEvent
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 705
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: public static readonly RoutedEvent GotFocusEvent
    return:
      type: System.Windows.RoutedEvent
    content.vb: Public Shared ReadOnly GotFocusEvent As RoutedEvent
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.GotFocus
  commentId: E:System.Windows.UIElement.GotFocus
  id: GotFocus
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: GotFocus
  nameWithType: UIElement.GotFocus
  fullName: System.Windows.UIElement.GotFocus
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GotFocus
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 712
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nOccurs when the pointer device that previously initiated a Press action is\npressed, while within this element.\nNote that ONLY sender&apos;s informations are currently filled (not pointer&apos;s)\n"
  example: []
  syntax:
    content: public event RoutedEventHandler GotFocus
    return:
      type: System.Windows.RoutedEventHandler
    content.vb: Public Event GotFocus As RoutedEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)
  commentId: M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)
  id: OnGotFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: OnGotFocus(RoutedEventArgs)
  nameWithType: UIElement.OnGotFocus(RoutedEventArgs)
  fullName: System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnGotFocus
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 728
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nRaises the GotFocus event\n"
  example: []
  syntax:
    content: protected virtual void OnGotFocus(RoutedEventArgs eventArgs)
    parameters:
    - id: eventArgs
      type: System.Windows.RoutedEventArgs
      description: The arguments for the event.
    content.vb: Protected Overridable Sub OnGotFocus(eventArgs As RoutedEventArgs)
  overload: System.Windows.UIElement.OnGotFocus*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.UIElement.LostFocusEvent
  commentId: F:System.Windows.UIElement.LostFocusEvent
  id: LostFocusEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: LostFocusEvent
  nameWithType: UIElement.LostFocusEvent
  fullName: System.Windows.UIElement.LostFocusEvent
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: LostFocusEvent
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 736
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: public static readonly RoutedEvent LostFocusEvent
    return:
      type: System.Windows.RoutedEvent
    content.vb: Public Shared ReadOnly LostFocusEvent As RoutedEvent
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.UIElement.LostFocus
  commentId: E:System.Windows.UIElement.LostFocus
  id: LostFocus
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: LostFocus
  nameWithType: UIElement.LostFocus
  fullName: System.Windows.UIElement.LostFocus
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: LostFocus
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 741
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nOccurs when a UIElement loses focus.\n"
  example: []
  syntax:
    content: public event RoutedEventHandler LostFocus
    return:
      type: System.Windows.RoutedEventHandler
    content.vb: Public Event LostFocus As RoutedEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)
  commentId: M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)
  id: OnLostFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: OnLostFocus(RoutedEventArgs)
  nameWithType: UIElement.OnLostFocus(RoutedEventArgs)
  fullName: System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnLostFocus
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 757
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nRaises the LostFocus event\n"
  example: []
  syntax:
    content: protected virtual void OnLostFocus(RoutedEventArgs eventArgs)
    parameters:
    - id: eventArgs
      type: System.Windows.RoutedEventArgs
      description: The arguments for the event.
    content.vb: Protected Overridable Sub OnLostFocus(eventArgs As RoutedEventArgs)
  overload: System.Windows.UIElement.OnLostFocus*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.UIElement.LostMouseCapture
  commentId: E:System.Windows.UIElement.LostMouseCapture
  id: LostMouseCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: LostMouseCapture
  nameWithType: UIElement.LostMouseCapture
  fullName: System.Windows.UIElement.LostMouseCapture
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: LostMouseCapture
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 767
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: public event MouseEventHandler LostMouseCapture
    return:
      type: System.Windows.Input.MouseEventHandler
    content.vb: Public Event LostMouseCapture As MouseEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  commentId: M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  id: OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: OnLostMouseCapture(MouseEventArgs)
  nameWithType: UIElement.OnLostMouseCapture(MouseEventArgs)
  fullName: System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnLostMouseCapture
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 786
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nCalled before the <xref href=\"System.Windows.UIElement.LostMouseCapture\" data-throw-if-not-resolved=\"false\"></xref> event occurs to provide\nhandling for the event in a derived class without attaching a delegate.\n"
  example: []
  syntax:
    content: protected virtual void OnLostMouseCapture(MouseEventArgs e)
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "\nA <xref href=\"System.Windows.Input.MouseEventArgs\" data-throw-if-not-resolved=\"false\"></xref> that contains the event data.\n"
    content.vb: Protected Overridable Sub OnLostMouseCapture(e As MouseEventArgs)
  overload: System.Windows.UIElement.OnLostMouseCapture*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.UIElement.INTERNAL_AttachToDomEvents
  commentId: M:System.Windows.UIElement.INTERNAL_AttachToDomEvents
  id: INTERNAL_AttachToDomEvents
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: INTERNAL_AttachToDomEvents()
  nameWithType: UIElement.INTERNAL_AttachToDomEvents()
  fullName: System.Windows.UIElement.INTERNAL_AttachToDomEvents()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: INTERNAL_AttachToDomEvents
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 792
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: public virtual void INTERNAL_AttachToDomEvents()
    content.vb: Public Overridable Sub INTERNAL_AttachToDomEvents
  overload: System.Windows.UIElement.INTERNAL_AttachToDomEvents*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Windows.UIElement.INTERNAL_DetachFromDomEvents
  commentId: M:System.Windows.UIElement.INTERNAL_DetachFromDomEvents
  id: INTERNAL_DetachFromDomEvents
  parent: System.Windows.UIElement
  langs:
  - csharp
  - vb
  name: INTERNAL_DetachFromDomEvents()
  nameWithType: UIElement.INTERNAL_DetachFromDomEvents()
  fullName: System.Windows.UIElement.INTERNAL_DetachFromDomEvents()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/UIElement_Events.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: INTERNAL_DetachFromDomEvents
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/UIElement_Events.cs
    startLine: 794
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: public virtual void INTERNAL_DetachFromDomEvents()
    content.vb: Public Overridable Sub INTERNAL_DetachFromDomEvents
  overload: System.Windows.UIElement.INTERNAL_DetachFromDomEvents*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Windows
  commentId: N:System.Windows
  name: System.Windows
  nameWithType: System.Windows
  fullName: System.Windows
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.DependencyObject
  commentId: T:System.Windows.DependencyObject
  parent: System.Windows
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  commentId: M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  name: GetValue(DependencyProperty)
  nameWithType: DependencyObject.GetValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  spec.csharp:
  - uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
    name: GetValue
    nameWithType: DependencyObject.GetValue
    fullName: System.Windows.DependencyObject.GetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
    name: GetValue
    nameWithType: DependencyObject.GetValue
    fullName: System.Windows.DependencyObject.GetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  commentId: M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: true
  name: SetCurrentValue(DependencyProperty, Object)
  nameWithType: DependencyObject.SetCurrentValue(DependencyProperty, Object)
  fullName: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty, System.Object)
  spec.csharp:
  - uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
    name: SetCurrentValue
    nameWithType: DependencyObject.SetCurrentValue
    fullName: System.Windows.DependencyObject.SetCurrentValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
    name: SetCurrentValue
    nameWithType: DependencyObject.SetCurrentValue
    fullName: System.Windows.DependencyObject.SetCurrentValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  commentId: M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  name: ReadLocalValue(DependencyProperty)
  nameWithType: DependencyObject.ReadLocalValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  spec.csharp:
  - uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
    name: ReadLocalValue
    nameWithType: DependencyObject.ReadLocalValue
    fullName: System.Windows.DependencyObject.ReadLocalValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
    name: ReadLocalValue
    nameWithType: DependencyObject.ReadLocalValue
    fullName: System.Windows.DependencyObject.ReadLocalValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  commentId: M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: true
  name: SetValue(DependencyProperty, Object)
  nameWithType: DependencyObject.SetValue(DependencyProperty, Object)
  fullName: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty, System.Object)
  spec.csharp:
  - uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
    name: SetValue
    nameWithType: DependencyObject.SetValue
    fullName: System.Windows.DependencyObject.SetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
    name: SetValue
    nameWithType: DependencyObject.SetValue
    fullName: System.Windows.DependencyObject.SetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  commentId: M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: true
  name: SetValue(DependencyPropertyKey, Object)
  nameWithType: DependencyObject.SetValue(DependencyPropertyKey, Object)
  fullName: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey, System.Object)
  spec.csharp:
  - uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
    name: SetValue
    nameWithType: DependencyObject.SetValue
    fullName: System.Windows.DependencyObject.SetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyPropertyKey
    name: DependencyPropertyKey
    nameWithType: DependencyPropertyKey
    fullName: System.Windows.DependencyPropertyKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
    name: SetValue
    nameWithType: DependencyObject.SetValue
    fullName: System.Windows.DependencyObject.SetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyPropertyKey
    name: DependencyPropertyKey
    nameWithType: DependencyPropertyKey
    fullName: System.Windows.DependencyPropertyKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  commentId: M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  name: CoerceValue(DependencyProperty)
  nameWithType: DependencyObject.CoerceValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  spec.csharp:
  - uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
    name: CoerceValue
    nameWithType: DependencyObject.CoerceValue
    fullName: System.Windows.DependencyObject.CoerceValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
    name: CoerceValue
    nameWithType: DependencyObject.CoerceValue
    fullName: System.Windows.DependencyObject.CoerceValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObject.Dispatcher
  commentId: P:System.Windows.DependencyObject.Dispatcher
  parent: System.Windows.DependencyObject
  name: Dispatcher
  nameWithType: DependencyObject.Dispatcher
  fullName: System.Windows.DependencyObject.Dispatcher
- uid: System.Windows.DependencyObject.INTERNAL_OnAttachedToVisualTree
  commentId: M:System.Windows.DependencyObject.INTERNAL_OnAttachedToVisualTree
  parent: System.Windows.DependencyObject
  name: INTERNAL_OnAttachedToVisualTree()
  nameWithType: DependencyObject.INTERNAL_OnAttachedToVisualTree()
  fullName: System.Windows.DependencyObject.INTERNAL_OnAttachedToVisualTree()
  spec.csharp:
  - uid: System.Windows.DependencyObject.INTERNAL_OnAttachedToVisualTree
    name: INTERNAL_OnAttachedToVisualTree
    nameWithType: DependencyObject.INTERNAL_OnAttachedToVisualTree
    fullName: System.Windows.DependencyObject.INTERNAL_OnAttachedToVisualTree
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.INTERNAL_OnAttachedToVisualTree
    name: INTERNAL_OnAttachedToVisualTree
    nameWithType: DependencyObject.INTERNAL_OnAttachedToVisualTree
    fullName: System.Windows.DependencyObject.INTERNAL_OnAttachedToVisualTree
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObject.INTERNAL_OnDetachedFromVisualTree
  commentId: M:System.Windows.DependencyObject.INTERNAL_OnDetachedFromVisualTree
  parent: System.Windows.DependencyObject
  name: INTERNAL_OnDetachedFromVisualTree()
  nameWithType: DependencyObject.INTERNAL_OnDetachedFromVisualTree()
  fullName: System.Windows.DependencyObject.INTERNAL_OnDetachedFromVisualTree()
  spec.csharp:
  - uid: System.Windows.DependencyObject.INTERNAL_OnDetachedFromVisualTree
    name: INTERNAL_OnDetachedFromVisualTree
    nameWithType: DependencyObject.INTERNAL_OnDetachedFromVisualTree
    fullName: System.Windows.DependencyObject.INTERNAL_OnDetachedFromVisualTree
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.INTERNAL_OnDetachedFromVisualTree
    name: INTERNAL_OnDetachedFromVisualTree
    nameWithType: DependencyObject.INTERNAL_OnDetachedFromVisualTree
    fullName: System.Windows.DependencyObject.INTERNAL_OnDetachedFromVisualTree
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  commentId: M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  name: ClearValue(DependencyProperty)
  nameWithType: DependencyObject.ClearValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  spec.csharp:
  - uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
    name: ClearValue
    nameWithType: DependencyObject.ClearValue
    fullName: System.Windows.DependencyObject.ClearValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
    name: ClearValue
    nameWithType: DependencyObject.ClearValue
    fullName: System.Windows.DependencyObject.ClearValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  commentId: M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  parent: System.Windows.DependencyObject
  name: ClearValue(DependencyPropertyKey)
  nameWithType: DependencyObject.ClearValue(DependencyPropertyKey)
  fullName: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  spec.csharp:
  - uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
    name: ClearValue
    nameWithType: DependencyObject.ClearValue
    fullName: System.Windows.DependencyObject.ClearValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyPropertyKey
    name: DependencyPropertyKey
    nameWithType: DependencyPropertyKey
    fullName: System.Windows.DependencyPropertyKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
    name: ClearValue
    nameWithType: DependencyObject.ClearValue
    fullName: System.Windows.DependencyObject.ClearValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyPropertyKey
    name: DependencyPropertyKey
    nameWithType: DependencyPropertyKey
    fullName: System.Windows.DependencyPropertyKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObject.CheckAccess
  commentId: M:System.Windows.DependencyObject.CheckAccess
  parent: System.Windows.DependencyObject
  name: CheckAccess()
  nameWithType: DependencyObject.CheckAccess()
  fullName: System.Windows.DependencyObject.CheckAccess()
  spec.csharp:
  - uid: System.Windows.DependencyObject.CheckAccess
    name: CheckAccess
    nameWithType: DependencyObject.CheckAccess
    fullName: System.Windows.DependencyObject.CheckAccess
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.CheckAccess
    name: CheckAccess
    nameWithType: DependencyObject.CheckAccess
    fullName: System.Windows.DependencyObject.CheckAccess
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObject.GetAnimationBaseValue(System.Windows.DependencyProperty)
  commentId: M:System.Windows.DependencyObject.GetAnimationBaseValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  name: GetAnimationBaseValue(DependencyProperty)
  nameWithType: DependencyObject.GetAnimationBaseValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.GetAnimationBaseValue(System.Windows.DependencyProperty)
  spec.csharp:
  - uid: System.Windows.DependencyObject.GetAnimationBaseValue(System.Windows.DependencyProperty)
    name: GetAnimationBaseValue
    nameWithType: DependencyObject.GetAnimationBaseValue
    fullName: System.Windows.DependencyObject.GetAnimationBaseValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.GetAnimationBaseValue(System.Windows.DependencyProperty)
    name: GetAnimationBaseValue
    nameWithType: DependencyObject.GetAnimationBaseValue
    fullName: System.Windows.DependencyObject.GetAnimationBaseValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.Windows.UIElement.TransformToVisual*
  commentId: Overload:System.Windows.UIElement.TransformToVisual
  name: TransformToVisual
  nameWithType: UIElement.TransformToVisual
  fullName: System.Windows.UIElement.TransformToVisual
- uid: System.Windows.UIElement
  commentId: T:System.Windows.UIElement
  parent: System.Windows
  name: UIElement
  nameWithType: UIElement
  fullName: System.Windows.UIElement
- uid: System.Windows.Media.GeneralTransform
  commentId: T:System.Windows.Media.GeneralTransform
  parent: System.Windows.Media
  name: GeneralTransform
  nameWithType: GeneralTransform
  fullName: System.Windows.Media.GeneralTransform
- uid: System.Windows.Media
  commentId: N:System.Windows.Media
  name: System.Windows.Media
  nameWithType: System.Windows.Media
  fullName: System.Windows.Media
- uid: System.Windows.Automation.Peers.AutomationPeer
  commentId: T:System.Windows.Automation.Peers.AutomationPeer
  parent: System.Windows.Automation.Peers
  name: AutomationPeer
  nameWithType: AutomationPeer
  fullName: System.Windows.Automation.Peers.AutomationPeer
- uid: System.Windows.UIElement.OnCreateAutomationPeer*
  commentId: Overload:System.Windows.UIElement.OnCreateAutomationPeer
  name: OnCreateAutomationPeer
  nameWithType: UIElement.OnCreateAutomationPeer
  fullName: System.Windows.UIElement.OnCreateAutomationPeer
- uid: System.Windows.Automation.Peers
  commentId: N:System.Windows.Automation.Peers
  name: System.Windows.Automation.Peers
  nameWithType: System.Windows.Automation.Peers
  fullName: System.Windows.Automation.Peers
- uid: System.Windows.UIElement.RenderSize*
  commentId: Overload:System.Windows.UIElement.RenderSize
  name: RenderSize
  nameWithType: UIElement.RenderSize
  fullName: System.Windows.UIElement.RenderSize
- uid: System.Windows.Size
  commentId: T:System.Windows.Size
  parent: System.Windows
  name: Size
  nameWithType: Size
  fullName: System.Windows.Size
- uid: System.Windows.UIElement.DesiredSize*
  commentId: Overload:System.Windows.UIElement.DesiredSize
  name: DesiredSize
  nameWithType: UIElement.DesiredSize
  fullName: System.Windows.UIElement.DesiredSize
- uid: System.Windows.UIElement.InvalidateMeasure*
  commentId: Overload:System.Windows.UIElement.InvalidateMeasure
  name: InvalidateMeasure
  nameWithType: UIElement.InvalidateMeasure
  fullName: System.Windows.UIElement.InvalidateMeasure
- uid: System.Windows.UIElement.InvalidateArrange*
  commentId: Overload:System.Windows.UIElement.InvalidateArrange
  name: InvalidateArrange
  nameWithType: UIElement.InvalidateArrange
  fullName: System.Windows.UIElement.InvalidateArrange
- uid: System.Windows.UIElement.DesiredSize
  commentId: P:System.Windows.UIElement.DesiredSize
  parent: System.Windows.UIElement
  name: DesiredSize
  nameWithType: UIElement.DesiredSize
  fullName: System.Windows.UIElement.DesiredSize
- uid: System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)
  commentId: M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)
  parent: System.Windows.FrameworkElement
  name: MeasureOverride(Size)
  nameWithType: FrameworkElement.MeasureOverride(Size)
  fullName: System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)
  spec.csharp:
  - uid: System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)
    name: MeasureOverride
    nameWithType: FrameworkElement.MeasureOverride
    fullName: System.Windows.FrameworkElement.MeasureOverride
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.Size
    name: Size
    nameWithType: Size
    fullName: System.Windows.Size
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)
    name: MeasureOverride
    nameWithType: FrameworkElement.MeasureOverride
    fullName: System.Windows.FrameworkElement.MeasureOverride
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.Size
    name: Size
    nameWithType: Size
    fullName: System.Windows.Size
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double.NaN
  commentId: F:System.Double.NaN
  isExternal: true
- uid: System.Windows.UIElement.Measure(System.Windows.Size)
  commentId: M:System.Windows.UIElement.Measure(System.Windows.Size)
  parent: System.Windows.UIElement
  name: Measure(Size)
  nameWithType: UIElement.Measure(Size)
  fullName: System.Windows.UIElement.Measure(System.Windows.Size)
  spec.csharp:
  - uid: System.Windows.UIElement.Measure(System.Windows.Size)
    name: Measure
    nameWithType: UIElement.Measure
    fullName: System.Windows.UIElement.Measure
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.Size
    name: Size
    nameWithType: Size
    fullName: System.Windows.Size
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.UIElement.Measure(System.Windows.Size)
    name: Measure
    nameWithType: UIElement.Measure
    fullName: System.Windows.UIElement.Measure
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.Size
    name: Size
    nameWithType: Size
    fullName: System.Windows.Size
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.UIElement.Arrange(System.Windows.Rect)
  commentId: M:System.Windows.UIElement.Arrange(System.Windows.Rect)
  parent: System.Windows.UIElement
  name: Arrange(Rect)
  nameWithType: UIElement.Arrange(Rect)
  fullName: System.Windows.UIElement.Arrange(System.Windows.Rect)
  spec.csharp:
  - uid: System.Windows.UIElement.Arrange(System.Windows.Rect)
    name: Arrange
    nameWithType: UIElement.Arrange
    fullName: System.Windows.UIElement.Arrange
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.Rect
    name: Rect
    nameWithType: Rect
    fullName: System.Windows.Rect
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.UIElement.Arrange(System.Windows.Rect)
    name: Arrange
    nameWithType: UIElement.Arrange
    fullName: System.Windows.UIElement.Arrange
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.Rect
    name: Rect
    nameWithType: Rect
    fullName: System.Windows.Rect
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Size.Height
  commentId: P:System.Windows.Size.Height
  isExternal: true
- uid: System.Windows.Size.Width
  commentId: P:System.Windows.Size.Width
  isExternal: true
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: System.Windows.UIElement.Measure*
  commentId: Overload:System.Windows.UIElement.Measure
  name: Measure
  nameWithType: UIElement.Measure
  fullName: System.Windows.UIElement.Measure
- uid: System.Windows.FrameworkElement
  commentId: T:System.Windows.FrameworkElement
  parent: System.Windows
  name: FrameworkElement
  nameWithType: FrameworkElement
  fullName: System.Windows.FrameworkElement
- uid: System.Windows.Rect
  commentId: T:System.Windows.Rect
  parent: System.Windows
  name: Rect
  nameWithType: Rect
  fullName: System.Windows.Rect
- uid: System.Windows.UIElement.Arrange*
  commentId: Overload:System.Windows.UIElement.Arrange
  name: Arrange
  nameWithType: UIElement.Arrange
  fullName: System.Windows.UIElement.Arrange
- uid: System.Windows.UIElement.UpdateLayout*
  commentId: Overload:System.Windows.UIElement.UpdateLayout
  name: UpdateLayout
  nameWithType: UIElement.UpdateLayout
  fullName: System.Windows.UIElement.UpdateLayout
- uid: System.Windows.DragEventHandler
  commentId: T:System.Windows.DragEventHandler
  parent: System.Windows
  name: DragEventHandler
  nameWithType: DragEventHandler
  fullName: System.Windows.DragEventHandler
- uid: System.Windows.Media.CacheMode
  commentId: T:System.Windows.Media.CacheMode
  parent: System.Windows.Media
  name: CacheMode
  nameWithType: CacheMode
  fullName: System.Windows.Media.CacheMode
- uid: System.Windows.UIElement.RenderTransform
  commentId: P:System.Windows.UIElement.RenderTransform
  parent: System.Windows.UIElement
  name: RenderTransform
  nameWithType: UIElement.RenderTransform
  fullName: System.Windows.UIElement.RenderTransform
- uid: System.Windows.UIElement.Opacity
  commentId: P:System.Windows.UIElement.Opacity
  parent: System.Windows.UIElement
  name: Opacity
  nameWithType: UIElement.Opacity
  fullName: System.Windows.UIElement.Opacity
- uid: System.Windows.UIElement.CacheMode*
  commentId: Overload:System.Windows.UIElement.CacheMode
  name: CacheMode
  nameWithType: UIElement.CacheMode
  fullName: System.Windows.UIElement.CacheMode
- uid: System.Windows.UIElement.CacheMode
  commentId: P:System.Windows.UIElement.CacheMode
  parent: System.Windows.UIElement
  name: CacheMode
  nameWithType: UIElement.CacheMode
  fullName: System.Windows.UIElement.CacheMode
- uid: System.Windows.DependencyProperty
  commentId: T:System.Windows.DependencyProperty
  parent: System.Windows
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.UIElement.Projection*
  commentId: Overload:System.Windows.UIElement.Projection
  name: Projection
  nameWithType: UIElement.Projection
  fullName: System.Windows.UIElement.Projection
- uid: System.Windows.Media.Projection
  commentId: T:System.Windows.Media.Projection
  parent: System.Windows.Media
  name: Projection
  nameWithType: Projection
  fullName: System.Windows.Media.Projection
- uid: System.Windows.UIElement.VisualParent*
  commentId: Overload:System.Windows.UIElement.VisualParent
  name: VisualParent
  nameWithType: UIElement.VisualParent
  fullName: System.Windows.UIElement.VisualParent
- uid: System.Windows.UIElement.GetVisualChild*
  commentId: Overload:System.Windows.UIElement.GetVisualChild
  name: GetVisualChild
  nameWithType: UIElement.GetVisualChild
  fullName: System.Windows.UIElement.GetVisualChild
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.UIElement.VisualChildrenCount*
  commentId: Overload:System.Windows.UIElement.VisualChildrenCount
  name: VisualChildrenCount
  nameWithType: UIElement.VisualChildrenCount
  fullName: System.Windows.UIElement.VisualChildrenCount
- uid: System.Windows.UIElement.AddVisualChild*
  commentId: Overload:System.Windows.UIElement.AddVisualChild
  name: AddVisualChild
  nameWithType: UIElement.AddVisualChild
  fullName: System.Windows.UIElement.AddVisualChild
- uid: System.Windows.UIElement.RemoveVisualChild*
  commentId: Overload:System.Windows.UIElement.RemoveVisualChild
  name: RemoveVisualChild
  nameWithType: UIElement.RemoveVisualChild
  fullName: System.Windows.UIElement.RemoveVisualChild
- uid: System.Windows.UIElement.OnVisualParentChanged*
  commentId: Overload:System.Windows.UIElement.OnVisualParentChanged
  name: OnVisualParentChanged
  nameWithType: UIElement.OnVisualParentChanged
  fullName: System.Windows.UIElement.OnVisualParentChanged
- uid: System.Windows.UIElement.OnVisualChildrenChanged*
  commentId: Overload:System.Windows.UIElement.OnVisualChildrenChanged
  name: OnVisualChildrenChanged
  nameWithType: UIElement.OnVisualChildrenChanged
  fullName: System.Windows.UIElement.OnVisualChildrenChanged
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.UIElement.#ctor*
  commentId: Overload:System.Windows.UIElement.#ctor
  name: UIElement
  nameWithType: UIElement.UIElement
  fullName: System.Windows.UIElement.UIElement
- uid: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  commentId: M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.DependencyObject
  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)
  nameWithType: DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  spec.csharp:
  - uid: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
    name: OnPropertyChanged
    nameWithType: DependencyObject.OnPropertyChanged
    fullName: System.Windows.DependencyObject.OnPropertyChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyPropertyChangedEventArgs
    name: DependencyPropertyChangedEventArgs
    nameWithType: DependencyPropertyChangedEventArgs
    fullName: System.Windows.DependencyPropertyChangedEventArgs
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
    name: OnPropertyChanged
    nameWithType: DependencyObject.OnPropertyChanged
    fullName: System.Windows.DependencyObject.OnPropertyChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyPropertyChangedEventArgs
    name: DependencyPropertyChangedEventArgs
    nameWithType: DependencyPropertyChangedEventArgs
    fullName: System.Windows.DependencyPropertyChangedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.UIElement.OnPropertyChanged*
  commentId: Overload:System.Windows.UIElement.OnPropertyChanged
  name: OnPropertyChanged
  nameWithType: UIElement.OnPropertyChanged
  fullName: System.Windows.UIElement.OnPropertyChanged
- uid: System.Windows.DependencyPropertyChangedEventArgs
  commentId: T:System.Windows.DependencyPropertyChangedEventArgs
  parent: System.Windows
  name: DependencyPropertyChangedEventArgs
  nameWithType: DependencyPropertyChangedEventArgs
  fullName: System.Windows.DependencyPropertyChangedEventArgs
- uid: System.Windows.UIElement.ClipToBounds*
  commentId: Overload:System.Windows.UIElement.ClipToBounds
  name: ClipToBounds
  nameWithType: UIElement.ClipToBounds
  fullName: System.Windows.UIElement.ClipToBounds
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.UIElement.ClipToBounds
  commentId: P:System.Windows.UIElement.ClipToBounds
  parent: System.Windows.UIElement
  name: ClipToBounds
  nameWithType: UIElement.ClipToBounds
  fullName: System.Windows.UIElement.ClipToBounds
- uid: System.Windows.UIElement.Clip
  commentId: P:System.Windows.UIElement.Clip
  parent: System.Windows.UIElement
  name: Clip
  nameWithType: UIElement.Clip
  fullName: System.Windows.UIElement.Clip
- uid: System.Windows.Media.Geometry
  commentId: T:System.Windows.Media.Geometry
  parent: System.Windows.Media
  name: Geometry
  nameWithType: Geometry
  fullName: System.Windows.Media.Geometry
- uid: System.Windows.UIElement.Clip*
  commentId: Overload:System.Windows.UIElement.Clip
  name: Clip
  nameWithType: UIElement.Clip
  fullName: System.Windows.UIElement.Clip
- uid: System.Windows.UIElement.CreateDomElement*
  commentId: Overload:System.Windows.UIElement.CreateDomElement
  name: CreateDomElement
  nameWithType: UIElement.CreateDomElement
  fullName: System.Windows.UIElement.CreateDomElement
- uid: System.Windows.UIElement.IsEnabled
  commentId: P:System.Windows.UIElement.IsEnabled
  parent: System.Windows.UIElement
  name: IsEnabled
  nameWithType: UIElement.IsEnabled
  fullName: System.Windows.UIElement.IsEnabled
- uid: System.Windows.UIElement.IsEnabled*
  commentId: Overload:System.Windows.UIElement.IsEnabled
  name: IsEnabled
  nameWithType: UIElement.IsEnabled
  fullName: System.Windows.UIElement.IsEnabled
- uid: System.Windows.DependencyPropertyChangedEventHandler
  commentId: T:System.Windows.DependencyPropertyChangedEventHandler
  parent: System.Windows
  name: DependencyPropertyChangedEventHandler
  nameWithType: DependencyPropertyChangedEventHandler
  fullName: System.Windows.DependencyPropertyChangedEventHandler
- uid: System.Windows.UIElement.ManageIsEnabled*
  commentId: Overload:System.Windows.UIElement.ManageIsEnabled
  name: ManageIsEnabled
  nameWithType: UIElement.ManageIsEnabled
  fullName: System.Windows.UIElement.ManageIsEnabled
- uid: System.Windows.UIElement.Effect
  commentId: P:System.Windows.UIElement.Effect
  parent: System.Windows.UIElement
  name: Effect
  nameWithType: UIElement.Effect
  fullName: System.Windows.UIElement.Effect
- uid: System.Windows.UIElement.Effect*
  commentId: Overload:System.Windows.UIElement.Effect
  name: Effect
  nameWithType: UIElement.Effect
  fullName: System.Windows.UIElement.Effect
- uid: System.Windows.Media.Effects.Effect
  commentId: T:System.Windows.Media.Effects.Effect
  parent: System.Windows.Media.Effects
  name: Effect
  nameWithType: Effect
  fullName: System.Windows.Media.Effects.Effect
- uid: System.Windows.Media.Effects
  commentId: N:System.Windows.Media.Effects
  name: System.Windows.Media.Effects
  nameWithType: System.Windows.Media.Effects
  fullName: System.Windows.Media.Effects
- uid: System.Windows.UIElement.RenderTransform*
  commentId: Overload:System.Windows.UIElement.RenderTransform
  name: RenderTransform
  nameWithType: UIElement.RenderTransform
  fullName: System.Windows.UIElement.RenderTransform
- uid: System.Windows.Media.Transform
  commentId: T:System.Windows.Media.Transform
  parent: System.Windows.Media
  name: Transform
  nameWithType: Transform
  fullName: System.Windows.Media.Transform
- uid: System.Windows.UIElement.RenderTransformOrigin
  commentId: P:System.Windows.UIElement.RenderTransformOrigin
  parent: System.Windows.UIElement
  name: RenderTransformOrigin
  nameWithType: UIElement.RenderTransformOrigin
  fullName: System.Windows.UIElement.RenderTransformOrigin
- uid: System.Windows.UIElement.RenderTransformOrigin*
  commentId: Overload:System.Windows.UIElement.RenderTransformOrigin
  name: RenderTransformOrigin
  nameWithType: UIElement.RenderTransformOrigin
  fullName: System.Windows.UIElement.RenderTransformOrigin
- uid: System.Windows.Point
  commentId: T:System.Windows.Point
  parent: System.Windows
  name: Point
  nameWithType: Point
  fullName: System.Windows.Point
- uid: System.Windows.UIElement.UseLayoutRounding*
  commentId: Overload:System.Windows.UIElement.UseLayoutRounding
  name: UseLayoutRounding
  nameWithType: UIElement.UseLayoutRounding
  fullName: System.Windows.UIElement.UseLayoutRounding
- uid: System.Windows.UIElement.UseLayoutRounding
  commentId: P:System.Windows.UIElement.UseLayoutRounding
  parent: System.Windows.UIElement
  name: UseLayoutRounding
  nameWithType: UIElement.UseLayoutRounding
  fullName: System.Windows.UIElement.UseLayoutRounding
- uid: System.Windows.UIElement.Visibility*
  commentId: Overload:System.Windows.UIElement.Visibility
  name: Visibility
  nameWithType: UIElement.Visibility
  fullName: System.Windows.UIElement.Visibility
- uid: System.Windows.Visibility
  commentId: T:System.Windows.Visibility
  parent: System.Windows
  name: Visibility
  nameWithType: Visibility
  fullName: System.Windows.Visibility
- uid: System.Windows.UIElement.Visibility
  commentId: P:System.Windows.UIElement.Visibility
  parent: System.Windows.UIElement
  name: Visibility
  nameWithType: UIElement.Visibility
  fullName: System.Windows.UIElement.Visibility
- uid: System.Windows.UIElement.IsVisible
  commentId: P:System.Windows.UIElement.IsVisible
  parent: System.Windows.UIElement
  name: IsVisible
  nameWithType: UIElement.IsVisible
  fullName: System.Windows.UIElement.IsVisible
- uid: System.Windows.UIElement.IsVisible*
  commentId: Overload:System.Windows.UIElement.IsVisible
  name: IsVisible
  nameWithType: UIElement.IsVisible
  fullName: System.Windows.UIElement.IsVisible
- uid: System.Windows.UIElement.Opacity*
  commentId: Overload:System.Windows.UIElement.Opacity
  name: Opacity
  nameWithType: UIElement.Opacity
  fullName: System.Windows.UIElement.Opacity
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.UIElement.OpacityMask
  commentId: P:System.Windows.UIElement.OpacityMask
  parent: System.Windows.UIElement
  name: OpacityMask
  nameWithType: UIElement.OpacityMask
  fullName: System.Windows.UIElement.OpacityMask
- uid: System.Windows.UIElement.OpacityMask*
  commentId: Overload:System.Windows.UIElement.OpacityMask
  name: OpacityMask
  nameWithType: UIElement.OpacityMask
  fullName: System.Windows.UIElement.OpacityMask
- uid: System.Windows.Media.Brush
  commentId: T:System.Windows.Media.Brush
  parent: System.Windows.Media
  name: Brush
  nameWithType: Brush
  fullName: System.Windows.Media.Brush
- uid: System.Windows.UIElement.IsHitTestVisible*
  commentId: Overload:System.Windows.UIElement.IsHitTestVisible
  name: IsHitTestVisible
  nameWithType: UIElement.IsHitTestVisible
  fullName: System.Windows.UIElement.IsHitTestVisible
- uid: System.Windows.UIElement.IsHitTestVisible
  commentId: P:System.Windows.UIElement.IsHitTestVisible
  parent: System.Windows.UIElement
  name: IsHitTestVisible
  nameWithType: UIElement.IsHitTestVisible
  fullName: System.Windows.UIElement.IsHitTestVisible
- uid: System.Windows.UIElement.AllowDrop*
  commentId: Overload:System.Windows.UIElement.AllowDrop
  name: AllowDrop
  nameWithType: UIElement.AllowDrop
  fullName: System.Windows.UIElement.AllowDrop
- uid: System.Windows.UIElement.AllowDrop
  commentId: P:System.Windows.UIElement.AllowDrop
  parent: System.Windows.UIElement
  name: AllowDrop
  nameWithType: UIElement.AllowDrop
  fullName: System.Windows.UIElement.AllowDrop
- uid: System.Windows.UIElement.CaptureMouse*
  commentId: Overload:System.Windows.UIElement.CaptureMouse
  name: CaptureMouse
  nameWithType: UIElement.CaptureMouse
  fullName: System.Windows.UIElement.CaptureMouse
- uid: System.Windows.UIElement.IsMouseCaptured*
  commentId: Overload:System.Windows.UIElement.IsMouseCaptured
  name: IsMouseCaptured
  nameWithType: UIElement.IsMouseCaptured
  fullName: System.Windows.UIElement.IsMouseCaptured
- uid: System.Windows.UIElement.ReleaseMouseCapture*
  commentId: Overload:System.Windows.UIElement.ReleaseMouseCapture
  name: ReleaseMouseCapture
  nameWithType: UIElement.ReleaseMouseCapture
  fullName: System.Windows.UIElement.ReleaseMouseCapture
- uid: System.Windows.UIElement.AllowScrollOnTouchMove*
  commentId: Overload:System.Windows.UIElement.AllowScrollOnTouchMove
  name: AllowScrollOnTouchMove
  nameWithType: UIElement.AllowScrollOnTouchMove
  fullName: System.Windows.UIElement.AllowScrollOnTouchMove
- uid: System.Windows.UIElement.AllowScrollOnTouchMove
  commentId: P:System.Windows.UIElement.AllowScrollOnTouchMove
  parent: System.Windows.UIElement
  name: AllowScrollOnTouchMove
  nameWithType: UIElement.AllowScrollOnTouchMove
  fullName: System.Windows.UIElement.AllowScrollOnTouchMove
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: System.NotImplementedException
  commentId: T:System.NotImplementedException
  isExternal: true
- uid: System.Windows.UIElement.AddHandler*
  commentId: Overload:System.Windows.UIElement.AddHandler
  name: AddHandler
  nameWithType: UIElement.AddHandler
  fullName: System.Windows.UIElement.AddHandler
- uid: System.Windows.RoutedEvent
  commentId: T:System.Windows.RoutedEvent
  parent: System.Windows
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Delegate
  commentId: T:System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Windows.UIElement.RemoveHandler*
  commentId: Overload:System.Windows.UIElement.RemoveHandler
  name: RemoveHandler
  nameWithType: UIElement.RemoveHandler
  fullName: System.Windows.UIElement.RemoveHandler
- uid: System.Windows.Input.MouseEventHandler
  commentId: T:System.Windows.Input.MouseEventHandler
  parent: System.Windows.Input
  name: MouseEventHandler
  nameWithType: MouseEventHandler
  fullName: System.Windows.Input.MouseEventHandler
- uid: System.Windows.Input
  commentId: N:System.Windows.Input
  name: System.Windows.Input
  nameWithType: System.Windows.Input
  fullName: System.Windows.Input
- uid: System.Windows.UIElement.OnMouseMove*
  commentId: Overload:System.Windows.UIElement.OnMouseMove
  name: OnMouseMove
  nameWithType: UIElement.OnMouseMove
  fullName: System.Windows.UIElement.OnMouseMove
- uid: System.Windows.Input.MouseEventArgs
  commentId: T:System.Windows.Input.MouseEventArgs
  parent: System.Windows.Input
  name: MouseEventArgs
  nameWithType: MouseEventArgs
  fullName: System.Windows.Input.MouseEventArgs
- uid: System.Windows.Input.MouseButtonEventHandler
  commentId: T:System.Windows.Input.MouseButtonEventHandler
  parent: System.Windows.Input
  name: MouseButtonEventHandler
  nameWithType: MouseButtonEventHandler
  fullName: System.Windows.Input.MouseButtonEventHandler
- uid: System.Windows.UIElement.OnMouseLeftButtonDown*
  commentId: Overload:System.Windows.UIElement.OnMouseLeftButtonDown
  name: OnMouseLeftButtonDown
  nameWithType: UIElement.OnMouseLeftButtonDown
  fullName: System.Windows.UIElement.OnMouseLeftButtonDown
- uid: System.Windows.Input.MouseButtonEventArgs
  commentId: T:System.Windows.Input.MouseButtonEventArgs
  parent: System.Windows.Input
  name: MouseButtonEventArgs
  nameWithType: MouseButtonEventArgs
  fullName: System.Windows.Input.MouseButtonEventArgs
- uid: System.Windows.UIElement.MouseRightButtonDown
  commentId: E:System.Windows.UIElement.MouseRightButtonDown
  parent: System.Windows.UIElement
  name: MouseRightButtonDown
  nameWithType: UIElement.MouseRightButtonDown
  fullName: System.Windows.UIElement.MouseRightButtonDown
- uid: System.Windows.UIElement.OnMouseRightButtonDown*
  commentId: Overload:System.Windows.UIElement.OnMouseRightButtonDown
  name: OnMouseRightButtonDown
  nameWithType: UIElement.OnMouseRightButtonDown
  fullName: System.Windows.UIElement.OnMouseRightButtonDown
- uid: System.Windows.UIElement.MouseWheel
  commentId: E:System.Windows.UIElement.MouseWheel
  parent: System.Windows.UIElement
  name: MouseWheel
  nameWithType: UIElement.MouseWheel
  fullName: System.Windows.UIElement.MouseWheel
- uid: System.Windows.Input.MouseWheelEventHandler
  commentId: T:System.Windows.Input.MouseWheelEventHandler
  parent: System.Windows.Input
  name: MouseWheelEventHandler
  nameWithType: MouseWheelEventHandler
  fullName: System.Windows.Input.MouseWheelEventHandler
- uid: System.Windows.UIElement.OnMouseWheel*
  commentId: Overload:System.Windows.UIElement.OnMouseWheel
  name: OnMouseWheel
  nameWithType: UIElement.OnMouseWheel
  fullName: System.Windows.UIElement.OnMouseWheel
- uid: System.Windows.Input.MouseWheelEventArgs
  commentId: T:System.Windows.Input.MouseWheelEventArgs
  parent: System.Windows.Input
  name: MouseWheelEventArgs
  nameWithType: MouseWheelEventArgs
  fullName: System.Windows.Input.MouseWheelEventArgs
- uid: System.Windows.UIElement.OnMouseLeftButtonUp*
  commentId: Overload:System.Windows.UIElement.OnMouseLeftButtonUp
  name: OnMouseLeftButtonUp
  nameWithType: UIElement.OnMouseLeftButtonUp
  fullName: System.Windows.UIElement.OnMouseLeftButtonUp
- uid: System.Windows.UIElement.OnMouseEnter*
  commentId: Overload:System.Windows.UIElement.OnMouseEnter
  name: OnMouseEnter
  nameWithType: UIElement.OnMouseEnter
  fullName: System.Windows.UIElement.OnMouseEnter
- uid: System.Windows.UIElement.OnMouseLeave*
  commentId: Overload:System.Windows.UIElement.OnMouseLeave
  name: OnMouseLeave
  nameWithType: UIElement.OnMouseLeave
  fullName: System.Windows.UIElement.OnMouseLeave
- uid: System.Windows.UIElement.TextInputStart
  commentId: E:System.Windows.UIElement.TextInputStart
  parent: System.Windows.UIElement
  name: TextInputStart
  nameWithType: UIElement.TextInputStart
  fullName: System.Windows.UIElement.TextInputStart
- uid: System.Windows.Input.TextCompositionEventHandler
  commentId: T:System.Windows.Input.TextCompositionEventHandler
  parent: System.Windows.Input
  name: TextCompositionEventHandler
  nameWithType: TextCompositionEventHandler
  fullName: System.Windows.Input.TextCompositionEventHandler
- uid: System.Windows.Input.TextCompositionEventArgs
  commentId: T:System.Windows.Input.TextCompositionEventArgs
  parent: System.Windows.Input
  name: TextCompositionEventArgs
  nameWithType: TextCompositionEventArgs
  fullName: System.Windows.Input.TextCompositionEventArgs
- uid: System.Windows.UIElement.OnTextInputStart*
  commentId: Overload:System.Windows.UIElement.OnTextInputStart
  name: OnTextInputStart
  nameWithType: UIElement.OnTextInputStart
  fullName: System.Windows.UIElement.OnTextInputStart
- uid: System.Windows.UIElement.TextInput
  commentId: E:System.Windows.UIElement.TextInput
  parent: System.Windows.UIElement
  name: TextInput
  nameWithType: UIElement.TextInput
  fullName: System.Windows.UIElement.TextInput
- uid: System.Windows.UIElement.OnTextInput*
  commentId: Overload:System.Windows.UIElement.OnTextInput
  name: OnTextInput
  nameWithType: UIElement.OnTextInput
  fullName: System.Windows.UIElement.OnTextInput
- uid: System.Windows.UIElement.TextInputUpdate
  commentId: E:System.Windows.UIElement.TextInputUpdate
  parent: System.Windows.UIElement
  name: TextInputUpdate
  nameWithType: UIElement.TextInputUpdate
  fullName: System.Windows.UIElement.TextInputUpdate
- uid: System.Windows.Input.TappedEventHandler
  commentId: T:System.Windows.Input.TappedEventHandler
  parent: System.Windows.Input
  name: TappedEventHandler
  nameWithType: TappedEventHandler
  fullName: System.Windows.Input.TappedEventHandler
- uid: System.Windows.UIElement.OnTapped*
  commentId: Overload:System.Windows.UIElement.OnTapped
  name: OnTapped
  nameWithType: UIElement.OnTapped
  fullName: System.Windows.UIElement.OnTapped
- uid: System.Windows.Input.TappedRoutedEventArgs
  commentId: T:System.Windows.Input.TappedRoutedEventArgs
  parent: System.Windows.Input
  name: TappedRoutedEventArgs
  nameWithType: TappedRoutedEventArgs
  fullName: System.Windows.Input.TappedRoutedEventArgs
- uid: System.Windows.UIElement.OnMouseRightButtonUp*
  commentId: Overload:System.Windows.UIElement.OnMouseRightButtonUp
  name: OnMouseRightButtonUp
  nameWithType: UIElement.OnMouseRightButtonUp
  fullName: System.Windows.UIElement.OnMouseRightButtonUp
- uid: System.Windows.Input.KeyEventHandler
  commentId: T:System.Windows.Input.KeyEventHandler
  parent: System.Windows.Input
  name: KeyEventHandler
  nameWithType: KeyEventHandler
  fullName: System.Windows.Input.KeyEventHandler
- uid: System.Windows.UIElement.OnKeyDown*
  commentId: Overload:System.Windows.UIElement.OnKeyDown
  name: OnKeyDown
  nameWithType: UIElement.OnKeyDown
  fullName: System.Windows.UIElement.OnKeyDown
- uid: System.Windows.Input.KeyEventArgs
  commentId: T:System.Windows.Input.KeyEventArgs
  parent: System.Windows.Input
  name: KeyEventArgs
  nameWithType: KeyEventArgs
  fullName: System.Windows.Input.KeyEventArgs
- uid: System.Windows.UIElement.OnKeyUp*
  commentId: Overload:System.Windows.UIElement.OnKeyUp
  name: OnKeyUp
  nameWithType: UIElement.OnKeyUp
  fullName: System.Windows.UIElement.OnKeyUp
- uid: System.Windows.RoutedEventHandler
  commentId: T:System.Windows.RoutedEventHandler
  parent: System.Windows
  name: RoutedEventHandler
  nameWithType: RoutedEventHandler
  fullName: System.Windows.RoutedEventHandler
- uid: System.Windows.UIElement.OnGotFocus*
  commentId: Overload:System.Windows.UIElement.OnGotFocus
  name: OnGotFocus
  nameWithType: UIElement.OnGotFocus
  fullName: System.Windows.UIElement.OnGotFocus
- uid: System.Windows.RoutedEventArgs
  commentId: T:System.Windows.RoutedEventArgs
  parent: System.Windows
  name: RoutedEventArgs
  nameWithType: RoutedEventArgs
  fullName: System.Windows.RoutedEventArgs
- uid: System.Windows.UIElement.OnLostFocus*
  commentId: Overload:System.Windows.UIElement.OnLostFocus
  name: OnLostFocus
  nameWithType: UIElement.OnLostFocus
  fullName: System.Windows.UIElement.OnLostFocus
- uid: System.Windows.UIElement.LostMouseCapture
  commentId: E:System.Windows.UIElement.LostMouseCapture
  parent: System.Windows.UIElement
  name: LostMouseCapture
  nameWithType: UIElement.LostMouseCapture
  fullName: System.Windows.UIElement.LostMouseCapture
- uid: System.Windows.UIElement.OnLostMouseCapture*
  commentId: Overload:System.Windows.UIElement.OnLostMouseCapture
  name: OnLostMouseCapture
  nameWithType: UIElement.OnLostMouseCapture
  fullName: System.Windows.UIElement.OnLostMouseCapture
- uid: System.Windows.UIElement.INTERNAL_AttachToDomEvents*
  commentId: Overload:System.Windows.UIElement.INTERNAL_AttachToDomEvents
  name: INTERNAL_AttachToDomEvents
  nameWithType: UIElement.INTERNAL_AttachToDomEvents
  fullName: System.Windows.UIElement.INTERNAL_AttachToDomEvents
- uid: System.Windows.UIElement.INTERNAL_DetachFromDomEvents*
  commentId: Overload:System.Windows.UIElement.INTERNAL_DetachFromDomEvents
  name: INTERNAL_DetachFromDomEvents
  nameWithType: UIElement.INTERNAL_DetachFromDomEvents
  fullName: System.Windows.UIElement.INTERNAL_DetachFromDomEvents
