### YamlMime:ManagedReference
items:
- uid: TinyPG.ParseTree
  commentId: T:TinyPG.ParseTree
  id: ParseTree
  parent: TinyPG
  children:
  - TinyPG.ParseTree.#ctor
  - TinyPG.ParseTree.Errors
  - TinyPG.ParseTree.Eval(System.Object[])
  - TinyPG.ParseTree.PrintTree
  - TinyPG.ParseTree.Skipped
  langs:
  - csharp
  - vb
  name: ParseTree
  nameWithType: ParseTree
  fullName: TinyPG.ParseTree
  type: Class
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ParseTree
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 70
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: >-
      [Serializable]

      public class ParseTree : ParseNode
    content.vb: >-
      <Serializable>

      Public Class ParseTree
          Inherits ParseNode
  inheritance:
  - System.Object
  - TinyPG.ParseNode
  inheritedMembers:
  - TinyPG.ParseNode.text
  - TinyPG.ParseNode.nodes
  - TinyPG.ParseNode.Nodes
  - TinyPG.ParseNode.Parent
  - TinyPG.ParseNode.Token
  - TinyPG.ParseNode.Text
  - TinyPG.ParseNode.CreateNode(TinyPG.Token,System.String)
  - TinyPG.ParseNode.GetValue(TinyPG.ParseTree,TinyPG.TokenType,System.Int32)
  - TinyPG.ParseNode.GetValue(TinyPG.ParseTree,TinyPG.TokenType,System.Int32@)
  - TinyPG.ParseNode.EvalStart(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalNamespace(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalNamespaceContent(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalGeneric(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalFunctionType(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalTypeof(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalAnonymousType(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalType(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalVariable(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalIndexer(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalParamList(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalFunction(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalBlockElement(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalInterface(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalClass(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalAccessTag(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalGetter(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalSetter(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalExtends(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalExport(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalImport(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalEnum(TinyPG.ParseTree,System.Object[])
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyPG.ParseTree.Errors
  commentId: F:TinyPG.ParseTree.Errors
  id: Errors
  parent: TinyPG.ParseTree
  langs:
  - csharp
  - vb
  name: Errors
  nameWithType: ParseTree.Errors
  fullName: TinyPG.ParseTree.Errors
  type: Field
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Errors
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 73
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: public ParseErrors Errors
    return:
      type: TinyPG.ParseErrors
    content.vb: Public Errors As ParseErrors
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyPG.ParseTree.Skipped
  commentId: F:TinyPG.ParseTree.Skipped
  id: Skipped
  parent: TinyPG.ParseTree
  langs:
  - csharp
  - vb
  name: Skipped
  nameWithType: ParseTree.Skipped
  fullName: TinyPG.ParseTree.Skipped
  type: Field
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Skipped
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 75
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: public List<Token> Skipped
    return:
      type: System.Collections.Generic.List{TinyPG.Token}
    content.vb: Public Skipped As List(Of Token)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyPG.ParseTree.#ctor
  commentId: M:TinyPG.ParseTree.#ctor
  id: '#ctor'
  parent: TinyPG.ParseTree
  langs:
  - csharp
  - vb
  name: ParseTree()
  nameWithType: ParseTree.ParseTree()
  fullName: TinyPG.ParseTree.ParseTree()
  type: Constructor
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 77
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: public ParseTree()
    content.vb: Public Sub New
  overload: TinyPG.ParseTree.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyPG.ParseTree.PrintTree
  commentId: M:TinyPG.ParseTree.PrintTree
  id: PrintTree
  parent: TinyPG.ParseTree
  langs:
  - csharp
  - vb
  name: PrintTree()
  nameWithType: ParseTree.PrintTree()
  fullName: TinyPG.ParseTree.PrintTree()
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: PrintTree
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 84
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: public string PrintTree()
    return:
      type: System.String
    content.vb: Public Function PrintTree As String
  overload: TinyPG.ParseTree.PrintTree*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyPG.ParseTree.Eval(System.Object[])
  commentId: M:TinyPG.ParseTree.Eval(System.Object[])
  id: Eval(System.Object[])
  parent: TinyPG.ParseTree
  langs:
  - csharp
  - vb
  name: Eval(Object[])
  nameWithType: ParseTree.Eval(Object[])
  fullName: TinyPG.ParseTree.Eval(System.Object[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Eval
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 109
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  summary: "\nthis is the entry point for executing and evaluating the parse tree.\n"
  example: []
  syntax:
    content: public object Eval(params object[] paramlist)
    parameters:
    - id: paramlist
      type: System.Object[]
      description: additional optional input parameters
    return:
      type: System.Object
      description: the output of the evaluation function
    content.vb: Public Function Eval(ParamArray paramlist As Object()) As Object
  overload: TinyPG.ParseTree.Eval*
  nameWithType.vb: ParseTree.Eval(Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyPG.ParseTree.Eval(System.Object())
  name.vb: Eval(Object())
references:
- uid: TinyPG
  commentId: N:TinyPG
  name: TinyPG
  nameWithType: TinyPG
  fullName: TinyPG
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyPG.ParseNode
  commentId: T:TinyPG.ParseNode
  parent: TinyPG
  name: ParseNode
  nameWithType: ParseNode
  fullName: TinyPG.ParseNode
- uid: TinyPG.ParseNode.text
  commentId: F:TinyPG.ParseNode.text
  parent: TinyPG.ParseNode
  name: text
  nameWithType: ParseNode.text
  fullName: TinyPG.ParseNode.text
- uid: TinyPG.ParseNode.nodes
  commentId: F:TinyPG.ParseNode.nodes
  parent: TinyPG.ParseNode
  name: nodes
  nameWithType: ParseNode.nodes
  fullName: TinyPG.ParseNode.nodes
- uid: TinyPG.ParseNode.Nodes
  commentId: P:TinyPG.ParseNode.Nodes
  parent: TinyPG.ParseNode
  name: Nodes
  nameWithType: ParseNode.Nodes
  fullName: TinyPG.ParseNode.Nodes
- uid: TinyPG.ParseNode.Parent
  commentId: F:TinyPG.ParseNode.Parent
  parent: TinyPG.ParseNode
  name: Parent
  nameWithType: ParseNode.Parent
  fullName: TinyPG.ParseNode.Parent
- uid: TinyPG.ParseNode.Token
  commentId: F:TinyPG.ParseNode.Token
  parent: TinyPG.ParseNode
  name: Token
  nameWithType: ParseNode.Token
  fullName: TinyPG.ParseNode.Token
- uid: TinyPG.ParseNode.Text
  commentId: P:TinyPG.ParseNode.Text
  parent: TinyPG.ParseNode
  name: Text
  nameWithType: ParseNode.Text
  fullName: TinyPG.ParseNode.Text
- uid: TinyPG.ParseNode.CreateNode(TinyPG.Token,System.String)
  commentId: M:TinyPG.ParseNode.CreateNode(TinyPG.Token,System.String)
  parent: TinyPG.ParseNode
  isExternal: true
  name: CreateNode(Token, String)
  nameWithType: ParseNode.CreateNode(Token, String)
  fullName: TinyPG.ParseNode.CreateNode(TinyPG.Token, System.String)
  spec.csharp:
  - uid: TinyPG.ParseNode.CreateNode(TinyPG.Token,System.String)
    name: CreateNode
    nameWithType: ParseNode.CreateNode
    fullName: TinyPG.ParseNode.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.Token
    name: Token
    nameWithType: Token
    fullName: TinyPG.Token
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.CreateNode(TinyPG.Token,System.String)
    name: CreateNode
    nameWithType: ParseNode.CreateNode
    fullName: TinyPG.ParseNode.CreateNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.Token
    name: Token
    nameWithType: Token
    fullName: TinyPG.Token
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.GetValue(TinyPG.ParseTree,TinyPG.TokenType,System.Int32)
  commentId: M:TinyPG.ParseNode.GetValue(TinyPG.ParseTree,TinyPG.TokenType,System.Int32)
  parent: TinyPG.ParseNode
  isExternal: true
  name: GetValue(ParseTree, TokenType, Int32)
  nameWithType: ParseNode.GetValue(ParseTree, TokenType, Int32)
  fullName: TinyPG.ParseNode.GetValue(TinyPG.ParseTree, TinyPG.TokenType, System.Int32)
  spec.csharp:
  - uid: TinyPG.ParseNode.GetValue(TinyPG.ParseTree,TinyPG.TokenType,System.Int32)
    name: GetValue
    nameWithType: ParseNode.GetValue
    fullName: TinyPG.ParseNode.GetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyPG.TokenType
    name: TokenType
    nameWithType: TokenType
    fullName: TinyPG.TokenType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.GetValue(TinyPG.ParseTree,TinyPG.TokenType,System.Int32)
    name: GetValue
    nameWithType: ParseNode.GetValue
    fullName: TinyPG.ParseNode.GetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyPG.TokenType
    name: TokenType
    nameWithType: TokenType
    fullName: TinyPG.TokenType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.GetValue(TinyPG.ParseTree,TinyPG.TokenType,System.Int32@)
  commentId: M:TinyPG.ParseNode.GetValue(TinyPG.ParseTree,TinyPG.TokenType,System.Int32@)
  parent: TinyPG.ParseNode
  isExternal: true
  name: GetValue(ParseTree, TokenType, Int32)
  nameWithType: ParseNode.GetValue(ParseTree, TokenType, Int32)
  fullName: TinyPG.ParseNode.GetValue(TinyPG.ParseTree, TinyPG.TokenType, System.Int32)
  spec.csharp:
  - uid: TinyPG.ParseNode.GetValue(TinyPG.ParseTree,TinyPG.TokenType,System.Int32@)
    name: GetValue
    nameWithType: ParseNode.GetValue
    fullName: TinyPG.ParseNode.GetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyPG.TokenType
    name: TokenType
    nameWithType: TokenType
    fullName: TinyPG.TokenType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.GetValue(TinyPG.ParseTree,TinyPG.TokenType,System.Int32@)
    name: GetValue
    nameWithType: ParseNode.GetValue
    fullName: TinyPG.ParseNode.GetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyPG.TokenType
    name: TokenType
    nameWithType: TokenType
    fullName: TinyPG.TokenType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.EvalStart(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalStart(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  isExternal: true
  name: EvalStart(ParseTree, Object[])
  nameWithType: ParseNode.EvalStart(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalStart(TinyPG.ParseTree, System.Object[])
  nameWithType.vb: ParseNode.EvalStart(ParseTree, Object())
  fullName.vb: TinyPG.ParseNode.EvalStart(TinyPG.ParseTree, System.Object())
  name.vb: EvalStart(ParseTree, Object())
  spec.csharp:
  - uid: TinyPG.ParseNode.EvalStart(TinyPG.ParseTree,System.Object[])
    name: EvalStart
    nameWithType: ParseNode.EvalStart
    fullName: TinyPG.ParseNode.EvalStart
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.EvalStart(TinyPG.ParseTree,System.Object[])
    name: EvalStart
    nameWithType: ParseNode.EvalStart
    fullName: TinyPG.ParseNode.EvalStart
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.EvalNamespace(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalNamespace(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  isExternal: true
  name: EvalNamespace(ParseTree, Object[])
  nameWithType: ParseNode.EvalNamespace(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalNamespace(TinyPG.ParseTree, System.Object[])
  nameWithType.vb: ParseNode.EvalNamespace(ParseTree, Object())
  fullName.vb: TinyPG.ParseNode.EvalNamespace(TinyPG.ParseTree, System.Object())
  name.vb: EvalNamespace(ParseTree, Object())
  spec.csharp:
  - uid: TinyPG.ParseNode.EvalNamespace(TinyPG.ParseTree,System.Object[])
    name: EvalNamespace
    nameWithType: ParseNode.EvalNamespace
    fullName: TinyPG.ParseNode.EvalNamespace
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.EvalNamespace(TinyPG.ParseTree,System.Object[])
    name: EvalNamespace
    nameWithType: ParseNode.EvalNamespace
    fullName: TinyPG.ParseNode.EvalNamespace
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.EvalNamespaceContent(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalNamespaceContent(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  isExternal: true
  name: EvalNamespaceContent(ParseTree, Object[])
  nameWithType: ParseNode.EvalNamespaceContent(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalNamespaceContent(TinyPG.ParseTree, System.Object[])
  nameWithType.vb: ParseNode.EvalNamespaceContent(ParseTree, Object())
  fullName.vb: TinyPG.ParseNode.EvalNamespaceContent(TinyPG.ParseTree, System.Object())
  name.vb: EvalNamespaceContent(ParseTree, Object())
  spec.csharp:
  - uid: TinyPG.ParseNode.EvalNamespaceContent(TinyPG.ParseTree,System.Object[])
    name: EvalNamespaceContent
    nameWithType: ParseNode.EvalNamespaceContent
    fullName: TinyPG.ParseNode.EvalNamespaceContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.EvalNamespaceContent(TinyPG.ParseTree,System.Object[])
    name: EvalNamespaceContent
    nameWithType: ParseNode.EvalNamespaceContent
    fullName: TinyPG.ParseNode.EvalNamespaceContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.EvalGeneric(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalGeneric(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  isExternal: true
  name: EvalGeneric(ParseTree, Object[])
  nameWithType: ParseNode.EvalGeneric(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalGeneric(TinyPG.ParseTree, System.Object[])
  nameWithType.vb: ParseNode.EvalGeneric(ParseTree, Object())
  fullName.vb: TinyPG.ParseNode.EvalGeneric(TinyPG.ParseTree, System.Object())
  name.vb: EvalGeneric(ParseTree, Object())
  spec.csharp:
  - uid: TinyPG.ParseNode.EvalGeneric(TinyPG.ParseTree,System.Object[])
    name: EvalGeneric
    nameWithType: ParseNode.EvalGeneric
    fullName: TinyPG.ParseNode.EvalGeneric
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.EvalGeneric(TinyPG.ParseTree,System.Object[])
    name: EvalGeneric
    nameWithType: ParseNode.EvalGeneric
    fullName: TinyPG.ParseNode.EvalGeneric
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.EvalFunctionType(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalFunctionType(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  isExternal: true
  name: EvalFunctionType(ParseTree, Object[])
  nameWithType: ParseNode.EvalFunctionType(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalFunctionType(TinyPG.ParseTree, System.Object[])
  nameWithType.vb: ParseNode.EvalFunctionType(ParseTree, Object())
  fullName.vb: TinyPG.ParseNode.EvalFunctionType(TinyPG.ParseTree, System.Object())
  name.vb: EvalFunctionType(ParseTree, Object())
  spec.csharp:
  - uid: TinyPG.ParseNode.EvalFunctionType(TinyPG.ParseTree,System.Object[])
    name: EvalFunctionType
    nameWithType: ParseNode.EvalFunctionType
    fullName: TinyPG.ParseNode.EvalFunctionType
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.EvalFunctionType(TinyPG.ParseTree,System.Object[])
    name: EvalFunctionType
    nameWithType: ParseNode.EvalFunctionType
    fullName: TinyPG.ParseNode.EvalFunctionType
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.EvalTypeof(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalTypeof(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  isExternal: true
  name: EvalTypeof(ParseTree, Object[])
  nameWithType: ParseNode.EvalTypeof(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalTypeof(TinyPG.ParseTree, System.Object[])
  nameWithType.vb: ParseNode.EvalTypeof(ParseTree, Object())
  fullName.vb: TinyPG.ParseNode.EvalTypeof(TinyPG.ParseTree, System.Object())
  name.vb: EvalTypeof(ParseTree, Object())
  spec.csharp:
  - uid: TinyPG.ParseNode.EvalTypeof(TinyPG.ParseTree,System.Object[])
    name: EvalTypeof
    nameWithType: ParseNode.EvalTypeof
    fullName: TinyPG.ParseNode.EvalTypeof
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.EvalTypeof(TinyPG.ParseTree,System.Object[])
    name: EvalTypeof
    nameWithType: ParseNode.EvalTypeof
    fullName: TinyPG.ParseNode.EvalTypeof
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.EvalAnonymousType(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalAnonymousType(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  isExternal: true
  name: EvalAnonymousType(ParseTree, Object[])
  nameWithType: ParseNode.EvalAnonymousType(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalAnonymousType(TinyPG.ParseTree, System.Object[])
  nameWithType.vb: ParseNode.EvalAnonymousType(ParseTree, Object())
  fullName.vb: TinyPG.ParseNode.EvalAnonymousType(TinyPG.ParseTree, System.Object())
  name.vb: EvalAnonymousType(ParseTree, Object())
  spec.csharp:
  - uid: TinyPG.ParseNode.EvalAnonymousType(TinyPG.ParseTree,System.Object[])
    name: EvalAnonymousType
    nameWithType: ParseNode.EvalAnonymousType
    fullName: TinyPG.ParseNode.EvalAnonymousType
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.EvalAnonymousType(TinyPG.ParseTree,System.Object[])
    name: EvalAnonymousType
    nameWithType: ParseNode.EvalAnonymousType
    fullName: TinyPG.ParseNode.EvalAnonymousType
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.EvalType(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalType(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  isExternal: true
  name: EvalType(ParseTree, Object[])
  nameWithType: ParseNode.EvalType(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalType(TinyPG.ParseTree, System.Object[])
  nameWithType.vb: ParseNode.EvalType(ParseTree, Object())
  fullName.vb: TinyPG.ParseNode.EvalType(TinyPG.ParseTree, System.Object())
  name.vb: EvalType(ParseTree, Object())
  spec.csharp:
  - uid: TinyPG.ParseNode.EvalType(TinyPG.ParseTree,System.Object[])
    name: EvalType
    nameWithType: ParseNode.EvalType
    fullName: TinyPG.ParseNode.EvalType
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.EvalType(TinyPG.ParseTree,System.Object[])
    name: EvalType
    nameWithType: ParseNode.EvalType
    fullName: TinyPG.ParseNode.EvalType
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.EvalVariable(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalVariable(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  isExternal: true
  name: EvalVariable(ParseTree, Object[])
  nameWithType: ParseNode.EvalVariable(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalVariable(TinyPG.ParseTree, System.Object[])
  nameWithType.vb: ParseNode.EvalVariable(ParseTree, Object())
  fullName.vb: TinyPG.ParseNode.EvalVariable(TinyPG.ParseTree, System.Object())
  name.vb: EvalVariable(ParseTree, Object())
  spec.csharp:
  - uid: TinyPG.ParseNode.EvalVariable(TinyPG.ParseTree,System.Object[])
    name: EvalVariable
    nameWithType: ParseNode.EvalVariable
    fullName: TinyPG.ParseNode.EvalVariable
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.EvalVariable(TinyPG.ParseTree,System.Object[])
    name: EvalVariable
    nameWithType: ParseNode.EvalVariable
    fullName: TinyPG.ParseNode.EvalVariable
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.EvalIndexer(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalIndexer(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  isExternal: true
  name: EvalIndexer(ParseTree, Object[])
  nameWithType: ParseNode.EvalIndexer(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalIndexer(TinyPG.ParseTree, System.Object[])
  nameWithType.vb: ParseNode.EvalIndexer(ParseTree, Object())
  fullName.vb: TinyPG.ParseNode.EvalIndexer(TinyPG.ParseTree, System.Object())
  name.vb: EvalIndexer(ParseTree, Object())
  spec.csharp:
  - uid: TinyPG.ParseNode.EvalIndexer(TinyPG.ParseTree,System.Object[])
    name: EvalIndexer
    nameWithType: ParseNode.EvalIndexer
    fullName: TinyPG.ParseNode.EvalIndexer
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.EvalIndexer(TinyPG.ParseTree,System.Object[])
    name: EvalIndexer
    nameWithType: ParseNode.EvalIndexer
    fullName: TinyPG.ParseNode.EvalIndexer
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.EvalParamList(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalParamList(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  isExternal: true
  name: EvalParamList(ParseTree, Object[])
  nameWithType: ParseNode.EvalParamList(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalParamList(TinyPG.ParseTree, System.Object[])
  nameWithType.vb: ParseNode.EvalParamList(ParseTree, Object())
  fullName.vb: TinyPG.ParseNode.EvalParamList(TinyPG.ParseTree, System.Object())
  name.vb: EvalParamList(ParseTree, Object())
  spec.csharp:
  - uid: TinyPG.ParseNode.EvalParamList(TinyPG.ParseTree,System.Object[])
    name: EvalParamList
    nameWithType: ParseNode.EvalParamList
    fullName: TinyPG.ParseNode.EvalParamList
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.EvalParamList(TinyPG.ParseTree,System.Object[])
    name: EvalParamList
    nameWithType: ParseNode.EvalParamList
    fullName: TinyPG.ParseNode.EvalParamList
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.EvalFunction(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalFunction(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  isExternal: true
  name: EvalFunction(ParseTree, Object[])
  nameWithType: ParseNode.EvalFunction(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalFunction(TinyPG.ParseTree, System.Object[])
  nameWithType.vb: ParseNode.EvalFunction(ParseTree, Object())
  fullName.vb: TinyPG.ParseNode.EvalFunction(TinyPG.ParseTree, System.Object())
  name.vb: EvalFunction(ParseTree, Object())
  spec.csharp:
  - uid: TinyPG.ParseNode.EvalFunction(TinyPG.ParseTree,System.Object[])
    name: EvalFunction
    nameWithType: ParseNode.EvalFunction
    fullName: TinyPG.ParseNode.EvalFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.EvalFunction(TinyPG.ParseTree,System.Object[])
    name: EvalFunction
    nameWithType: ParseNode.EvalFunction
    fullName: TinyPG.ParseNode.EvalFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.EvalBlockElement(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalBlockElement(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  isExternal: true
  name: EvalBlockElement(ParseTree, Object[])
  nameWithType: ParseNode.EvalBlockElement(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalBlockElement(TinyPG.ParseTree, System.Object[])
  nameWithType.vb: ParseNode.EvalBlockElement(ParseTree, Object())
  fullName.vb: TinyPG.ParseNode.EvalBlockElement(TinyPG.ParseTree, System.Object())
  name.vb: EvalBlockElement(ParseTree, Object())
  spec.csharp:
  - uid: TinyPG.ParseNode.EvalBlockElement(TinyPG.ParseTree,System.Object[])
    name: EvalBlockElement
    nameWithType: ParseNode.EvalBlockElement
    fullName: TinyPG.ParseNode.EvalBlockElement
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.EvalBlockElement(TinyPG.ParseTree,System.Object[])
    name: EvalBlockElement
    nameWithType: ParseNode.EvalBlockElement
    fullName: TinyPG.ParseNode.EvalBlockElement
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.EvalInterface(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalInterface(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  isExternal: true
  name: EvalInterface(ParseTree, Object[])
  nameWithType: ParseNode.EvalInterface(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalInterface(TinyPG.ParseTree, System.Object[])
  nameWithType.vb: ParseNode.EvalInterface(ParseTree, Object())
  fullName.vb: TinyPG.ParseNode.EvalInterface(TinyPG.ParseTree, System.Object())
  name.vb: EvalInterface(ParseTree, Object())
  spec.csharp:
  - uid: TinyPG.ParseNode.EvalInterface(TinyPG.ParseTree,System.Object[])
    name: EvalInterface
    nameWithType: ParseNode.EvalInterface
    fullName: TinyPG.ParseNode.EvalInterface
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.EvalInterface(TinyPG.ParseTree,System.Object[])
    name: EvalInterface
    nameWithType: ParseNode.EvalInterface
    fullName: TinyPG.ParseNode.EvalInterface
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.EvalClass(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalClass(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  isExternal: true
  name: EvalClass(ParseTree, Object[])
  nameWithType: ParseNode.EvalClass(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalClass(TinyPG.ParseTree, System.Object[])
  nameWithType.vb: ParseNode.EvalClass(ParseTree, Object())
  fullName.vb: TinyPG.ParseNode.EvalClass(TinyPG.ParseTree, System.Object())
  name.vb: EvalClass(ParseTree, Object())
  spec.csharp:
  - uid: TinyPG.ParseNode.EvalClass(TinyPG.ParseTree,System.Object[])
    name: EvalClass
    nameWithType: ParseNode.EvalClass
    fullName: TinyPG.ParseNode.EvalClass
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.EvalClass(TinyPG.ParseTree,System.Object[])
    name: EvalClass
    nameWithType: ParseNode.EvalClass
    fullName: TinyPG.ParseNode.EvalClass
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.EvalAccessTag(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalAccessTag(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  isExternal: true
  name: EvalAccessTag(ParseTree, Object[])
  nameWithType: ParseNode.EvalAccessTag(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalAccessTag(TinyPG.ParseTree, System.Object[])
  nameWithType.vb: ParseNode.EvalAccessTag(ParseTree, Object())
  fullName.vb: TinyPG.ParseNode.EvalAccessTag(TinyPG.ParseTree, System.Object())
  name.vb: EvalAccessTag(ParseTree, Object())
  spec.csharp:
  - uid: TinyPG.ParseNode.EvalAccessTag(TinyPG.ParseTree,System.Object[])
    name: EvalAccessTag
    nameWithType: ParseNode.EvalAccessTag
    fullName: TinyPG.ParseNode.EvalAccessTag
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.EvalAccessTag(TinyPG.ParseTree,System.Object[])
    name: EvalAccessTag
    nameWithType: ParseNode.EvalAccessTag
    fullName: TinyPG.ParseNode.EvalAccessTag
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.EvalGetter(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalGetter(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  isExternal: true
  name: EvalGetter(ParseTree, Object[])
  nameWithType: ParseNode.EvalGetter(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalGetter(TinyPG.ParseTree, System.Object[])
  nameWithType.vb: ParseNode.EvalGetter(ParseTree, Object())
  fullName.vb: TinyPG.ParseNode.EvalGetter(TinyPG.ParseTree, System.Object())
  name.vb: EvalGetter(ParseTree, Object())
  spec.csharp:
  - uid: TinyPG.ParseNode.EvalGetter(TinyPG.ParseTree,System.Object[])
    name: EvalGetter
    nameWithType: ParseNode.EvalGetter
    fullName: TinyPG.ParseNode.EvalGetter
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.EvalGetter(TinyPG.ParseTree,System.Object[])
    name: EvalGetter
    nameWithType: ParseNode.EvalGetter
    fullName: TinyPG.ParseNode.EvalGetter
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.EvalSetter(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalSetter(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  isExternal: true
  name: EvalSetter(ParseTree, Object[])
  nameWithType: ParseNode.EvalSetter(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalSetter(TinyPG.ParseTree, System.Object[])
  nameWithType.vb: ParseNode.EvalSetter(ParseTree, Object())
  fullName.vb: TinyPG.ParseNode.EvalSetter(TinyPG.ParseTree, System.Object())
  name.vb: EvalSetter(ParseTree, Object())
  spec.csharp:
  - uid: TinyPG.ParseNode.EvalSetter(TinyPG.ParseTree,System.Object[])
    name: EvalSetter
    nameWithType: ParseNode.EvalSetter
    fullName: TinyPG.ParseNode.EvalSetter
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.EvalSetter(TinyPG.ParseTree,System.Object[])
    name: EvalSetter
    nameWithType: ParseNode.EvalSetter
    fullName: TinyPG.ParseNode.EvalSetter
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.EvalExtends(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalExtends(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  isExternal: true
  name: EvalExtends(ParseTree, Object[])
  nameWithType: ParseNode.EvalExtends(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalExtends(TinyPG.ParseTree, System.Object[])
  nameWithType.vb: ParseNode.EvalExtends(ParseTree, Object())
  fullName.vb: TinyPG.ParseNode.EvalExtends(TinyPG.ParseTree, System.Object())
  name.vb: EvalExtends(ParseTree, Object())
  spec.csharp:
  - uid: TinyPG.ParseNode.EvalExtends(TinyPG.ParseTree,System.Object[])
    name: EvalExtends
    nameWithType: ParseNode.EvalExtends
    fullName: TinyPG.ParseNode.EvalExtends
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.EvalExtends(TinyPG.ParseTree,System.Object[])
    name: EvalExtends
    nameWithType: ParseNode.EvalExtends
    fullName: TinyPG.ParseNode.EvalExtends
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.EvalExport(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalExport(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  isExternal: true
  name: EvalExport(ParseTree, Object[])
  nameWithType: ParseNode.EvalExport(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalExport(TinyPG.ParseTree, System.Object[])
  nameWithType.vb: ParseNode.EvalExport(ParseTree, Object())
  fullName.vb: TinyPG.ParseNode.EvalExport(TinyPG.ParseTree, System.Object())
  name.vb: EvalExport(ParseTree, Object())
  spec.csharp:
  - uid: TinyPG.ParseNode.EvalExport(TinyPG.ParseTree,System.Object[])
    name: EvalExport
    nameWithType: ParseNode.EvalExport
    fullName: TinyPG.ParseNode.EvalExport
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.EvalExport(TinyPG.ParseTree,System.Object[])
    name: EvalExport
    nameWithType: ParseNode.EvalExport
    fullName: TinyPG.ParseNode.EvalExport
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.EvalImport(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalImport(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  isExternal: true
  name: EvalImport(ParseTree, Object[])
  nameWithType: ParseNode.EvalImport(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalImport(TinyPG.ParseTree, System.Object[])
  nameWithType.vb: ParseNode.EvalImport(ParseTree, Object())
  fullName.vb: TinyPG.ParseNode.EvalImport(TinyPG.ParseTree, System.Object())
  name.vb: EvalImport(ParseTree, Object())
  spec.csharp:
  - uid: TinyPG.ParseNode.EvalImport(TinyPG.ParseTree,System.Object[])
    name: EvalImport
    nameWithType: ParseNode.EvalImport
    fullName: TinyPG.ParseNode.EvalImport
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.EvalImport(TinyPG.ParseTree,System.Object[])
    name: EvalImport
    nameWithType: ParseNode.EvalImport
    fullName: TinyPG.ParseNode.EvalImport
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyPG.ParseNode.EvalEnum(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalEnum(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  isExternal: true
  name: EvalEnum(ParseTree, Object[])
  nameWithType: ParseNode.EvalEnum(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalEnum(TinyPG.ParseTree, System.Object[])
  nameWithType.vb: ParseNode.EvalEnum(ParseTree, Object())
  fullName.vb: TinyPG.ParseNode.EvalEnum(TinyPG.ParseTree, System.Object())
  name.vb: EvalEnum(ParseTree, Object())
  spec.csharp:
  - uid: TinyPG.ParseNode.EvalEnum(TinyPG.ParseTree,System.Object[])
    name: EvalEnum
    nameWithType: ParseNode.EvalEnum
    fullName: TinyPG.ParseNode.EvalEnum
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyPG.ParseNode.EvalEnum(TinyPG.ParseTree,System.Object[])
    name: EvalEnum
    nameWithType: ParseNode.EvalEnum
    fullName: TinyPG.ParseNode.EvalEnum
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyPG.ParseTree
    name: ParseTree
    nameWithType: ParseTree
    fullName: TinyPG.ParseTree
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: TinyPG.ParseErrors
  commentId: T:TinyPG.ParseErrors
  parent: TinyPG
  name: ParseErrors
  nameWithType: ParseErrors
  fullName: TinyPG.ParseErrors
- uid: System.Collections.Generic.List{TinyPG.Token}
  commentId: T:System.Collections.Generic.List{TinyPG.Token}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Token>
  nameWithType: List<Token>
  fullName: System.Collections.Generic.List<TinyPG.Token>
  nameWithType.vb: List(Of Token)
  fullName.vb: System.Collections.Generic.List(Of TinyPG.Token)
  name.vb: List(Of Token)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyPG.Token
    name: Token
    nameWithType: Token
    fullName: TinyPG.Token
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyPG.Token
    name: Token
    nameWithType: Token
    fullName: TinyPG.Token
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyPG.ParseTree.#ctor*
  commentId: Overload:TinyPG.ParseTree.#ctor
  name: ParseTree
  nameWithType: ParseTree.ParseTree
  fullName: TinyPG.ParseTree.ParseTree
- uid: TinyPG.ParseTree.PrintTree*
  commentId: Overload:TinyPG.ParseTree.PrintTree
  name: PrintTree
  nameWithType: ParseTree.PrintTree
  fullName: TinyPG.ParseTree.PrintTree
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyPG.ParseTree.Eval*
  commentId: Overload:TinyPG.ParseTree.Eval
  name: Eval
  nameWithType: ParseTree.Eval
  fullName: TinyPG.ParseTree.Eval
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
