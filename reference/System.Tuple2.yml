### YamlMime:ManagedReference
items:
- uid: System.Tuple2
  commentId: T:System.Tuple2
  id: Tuple2
  parent: System
  children:
  - System.Tuple2.Create``2(``0,``1)
  - System.Tuple2.Create``3(``0,``1,``2)
  - System.Tuple2.Create``4(``0,``1,``2,``3)
  - System.Tuple2.Create``5(``0,``1,``2,``3,``4)
  - System.Tuple2.Create``6(``0,``1,``2,``3,``4,``5)
  langs:
  - csharp
  - vb
  name: Tuple2
  nameWithType: Tuple2
  fullName: System.Tuple2
  type: Class
  source:
    remote:
      path: src/Runtime/Runtime/Core/Other/Tuple2.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Tuple2
    path: ../OpenSilverGit/src/Runtime/Runtime/Core/Other/Tuple2.cs
    startLine: 23
  assemblies:
  - OpenSilver
  namespace: System
  summary: "\nUtility class that simplifies cration of tuples by using\nmethod calls instead of constructor calls\n"
  example: []
  syntax:
    content: >-
      [Obsolete]

      public static class Tuple2
    content.vb: >-
      <Obsolete>

      Public Module Tuple2
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: System.Tuple2.Create``2(``0,``1)
  commentId: M:System.Tuple2.Create``2(``0,``1)
  id: Create``2(``0,``1)
  parent: System.Tuple2
  langs:
  - csharp
  - vb
  name: Create<T1, T2>(T1, T2)
  nameWithType: Tuple2.Create<T1, T2>(T1, T2)
  fullName: System.Tuple2.Create<T1, T2>(T1, T2)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/Core/Other/Tuple2.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Create
    path: ../OpenSilverGit/src/Runtime/Runtime/Core/Other/Tuple2.cs
    startLine: 34
  assemblies:
  - OpenSilver
  namespace: System
  summary: "\nCreates a new tuple value with the specified elements. The method\ncan be used without specifying the generic parameters, because C#\ncompiler can usually infer the actual types.\n"
  example: []
  syntax:
    content: >-
      [Obsolete]

      public static Tuple2<T1, T2> Create<T1, T2>(T1 item1, T2 second)
    parameters:
    - id: item1
      type: '{T1}'
      description: First element of the tuple
    - id: second
      type: '{T2}'
      description: Second element of the tuple
    typeParameters:
    - id: T1
    - id: T2
    return:
      type: System.Tuple2{{T1},{T2}}
      description: A newly created tuple
    content.vb: >-
      <Obsolete>

      Public Shared Function Create(Of T1, T2)(item1 As T1, second As T2) As Tuple2(Of T1, T2)
  overload: System.Tuple2.Create*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor
    arguments: []
  nameWithType.vb: Tuple2.Create(Of T1, T2)(T1, T2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Tuple2.Create(Of T1, T2)(T1, T2)
  name.vb: Create(Of T1, T2)(T1, T2)
- uid: System.Tuple2.Create``3(``0,``1,``2)
  commentId: M:System.Tuple2.Create``3(``0,``1,``2)
  id: Create``3(``0,``1,``2)
  parent: System.Tuple2
  langs:
  - csharp
  - vb
  name: Create<T1, T2, T3>(T1, T2, T3)
  nameWithType: Tuple2.Create<T1, T2, T3>(T1, T2, T3)
  fullName: System.Tuple2.Create<T1, T2, T3>(T1, T2, T3)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/Core/Other/Tuple2.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Create
    path: ../OpenSilverGit/src/Runtime/Runtime/Core/Other/Tuple2.cs
    startLine: 49
  assemblies:
  - OpenSilver
  namespace: System
  summary: "\nCreates a new tuple value with the specified elements. The method\ncan be used without specifying the generic parameters, because C#\ncompiler can usually infer the actual types.\n"
  example: []
  syntax:
    content: >-
      [Obsolete]

      public static Tuple2<T1, T2, T3> Create<T1, T2, T3>(T1 item1, T2 second, T3 third)
    parameters:
    - id: item1
      type: '{T1}'
      description: First element of the tuple
    - id: second
      type: '{T2}'
      description: Second element of the tuple
    - id: third
      type: '{T3}'
      description: Third element of the tuple
    typeParameters:
    - id: T1
    - id: T2
    - id: T3
    return:
      type: System.Tuple2{{T1},{T2},{T3}}
      description: A newly created tuple
    content.vb: >-
      <Obsolete>

      Public Shared Function Create(Of T1, T2, T3)(item1 As T1, second As T2, third As T3) As Tuple2(Of T1, T2, T3)
  overload: System.Tuple2.Create*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor
    arguments: []
  nameWithType.vb: Tuple2.Create(Of T1, T2, T3)(T1, T2, T3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Tuple2.Create(Of T1, T2, T3)(T1, T2, T3)
  name.vb: Create(Of T1, T2, T3)(T1, T2, T3)
- uid: System.Tuple2.Create``4(``0,``1,``2,``3)
  commentId: M:System.Tuple2.Create``4(``0,``1,``2,``3)
  id: Create``4(``0,``1,``2,``3)
  parent: System.Tuple2
  langs:
  - csharp
  - vb
  name: Create<T1, T2, T3, T4>(T1, T2, T3, T4)
  nameWithType: Tuple2.Create<T1, T2, T3, T4>(T1, T2, T3, T4)
  fullName: System.Tuple2.Create<T1, T2, T3, T4>(T1, T2, T3, T4)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/Core/Other/Tuple2.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Create
    path: ../OpenSilverGit/src/Runtime/Runtime/Core/Other/Tuple2.cs
    startLine: 65
  assemblies:
  - OpenSilver
  namespace: System
  summary: "\nCreates a new tuple value with the specified elements. The method\ncan be used without specifying the generic parameters, because C#\ncompiler can usually infer the actual types.\n"
  example: []
  syntax:
    content: >-
      [Obsolete]

      public static Tuple2<T1, T2, T3, T4> Create<T1, T2, T3, T4>(T1 item1, T2 second, T3 third, T4 fourth)
    parameters:
    - id: item1
      type: '{T1}'
      description: First element of the tuple
    - id: second
      type: '{T2}'
      description: Second element of the tuple
    - id: third
      type: '{T3}'
      description: Third element of the tuple
    - id: fourth
      type: '{T4}'
      description: Fourth element of the tuple
    typeParameters:
    - id: T1
    - id: T2
    - id: T3
    - id: T4
    return:
      type: System.Tuple2{{T1},{T2},{T3},{T4}}
      description: A newly created tuple
    content.vb: >-
      <Obsolete>

      Public Shared Function Create(Of T1, T2, T3, T4)(item1 As T1, second As T2, third As T3, fourth As T4) As Tuple2(Of T1, T2, T3, T4)
  overload: System.Tuple2.Create*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor
    arguments: []
  nameWithType.vb: Tuple2.Create(Of T1, T2, T3, T4)(T1, T2, T3, T4)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Tuple2.Create(Of T1, T2, T3, T4)(T1, T2, T3, T4)
  name.vb: Create(Of T1, T2, T3, T4)(T1, T2, T3, T4)
- uid: System.Tuple2.Create``5(``0,``1,``2,``3,``4)
  commentId: M:System.Tuple2.Create``5(``0,``1,``2,``3,``4)
  id: Create``5(``0,``1,``2,``3,``4)
  parent: System.Tuple2
  langs:
  - csharp
  - vb
  name: Create<T1, T2, T3, T4, T5>(T1, T2, T3, T4, T5)
  nameWithType: Tuple2.Create<T1, T2, T3, T4, T5>(T1, T2, T3, T4, T5)
  fullName: System.Tuple2.Create<T1, T2, T3, T4, T5>(T1, T2, T3, T4, T5)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/Core/Other/Tuple2.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Create
    path: ../OpenSilverGit/src/Runtime/Runtime/Core/Other/Tuple2.cs
    startLine: 82
  assemblies:
  - OpenSilver
  namespace: System
  summary: "\nCreates a new tuple value with the specified elements. The method\ncan be used without specifying the generic parameters, because C#\ncompiler can usually infer the actual types.\n"
  example: []
  syntax:
    content: >-
      [Obsolete]

      public static Tuple2<T1, T2, T3, T4, T5> Create<T1, T2, T3, T4, T5>(T1 item1, T2 second, T3 third, T4 fourth, T5 fifth)
    parameters:
    - id: item1
      type: '{T1}'
      description: First element of the tuple
    - id: second
      type: '{T2}'
      description: Second element of the tuple
    - id: third
      type: '{T3}'
      description: Third element of the tuple
    - id: fourth
      type: '{T4}'
      description: Fourth element of the tuple
    - id: fifth
      type: '{T5}'
      description: Fifth element of the tuple
    typeParameters:
    - id: T1
    - id: T2
    - id: T3
    - id: T4
    - id: T5
    return:
      type: System.Tuple2{{T1},{T2},{T3},{T4},{T5}}
      description: A newly created tuple
    content.vb: >-
      <Obsolete>

      Public Shared Function Create(Of T1, T2, T3, T4, T5)(item1 As T1, second As T2, third As T3, fourth As T4, fifth As T5) As Tuple2(Of T1, T2, T3, T4, T5)
  overload: System.Tuple2.Create*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor
    arguments: []
  nameWithType.vb: Tuple2.Create(Of T1, T2, T3, T4, T5)(T1, T2, T3, T4, T5)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Tuple2.Create(Of T1, T2, T3, T4, T5)(T1, T2, T3, T4, T5)
  name.vb: Create(Of T1, T2, T3, T4, T5)(T1, T2, T3, T4, T5)
- uid: System.Tuple2.Create``6(``0,``1,``2,``3,``4,``5)
  commentId: M:System.Tuple2.Create``6(``0,``1,``2,``3,``4,``5)
  id: Create``6(``0,``1,``2,``3,``4,``5)
  parent: System.Tuple2
  langs:
  - csharp
  - vb
  name: Create<T1, T2, T3, T4, T5, T6>(T1, T2, T3, T4, T5, T6)
  nameWithType: Tuple2.Create<T1, T2, T3, T4, T5, T6>(T1, T2, T3, T4, T5, T6)
  fullName: System.Tuple2.Create<T1, T2, T3, T4, T5, T6>(T1, T2, T3, T4, T5, T6)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/Core/Other/Tuple2.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Create
    path: ../OpenSilverGit/src/Runtime/Runtime/Core/Other/Tuple2.cs
    startLine: 100
  assemblies:
  - OpenSilver
  namespace: System
  summary: "\nCreates a new tuple value with the specified elements. The method\ncan be used without specifying the generic parameters, because C#\ncompiler can usually infer the actual types.\n"
  example: []
  syntax:
    content: >-
      [Obsolete]

      public static Tuple2<T1, T2, T3, T4, T5, T6> Create<T1, T2, T3, T4, T5, T6>(T1 item1, T2 second, T3 third, T4 fourth, T5 fifth, T6 sixth)
    parameters:
    - id: item1
      type: '{T1}'
      description: First element of the tuple
    - id: second
      type: '{T2}'
      description: Second element of the tuple
    - id: third
      type: '{T3}'
      description: Third element of the tuple
    - id: fourth
      type: '{T4}'
      description: Fourth element of the tuple
    - id: fifth
      type: '{T5}'
      description: Fifth element of the tuple
    - id: sixth
      type: '{T6}'
      description: Sixth element of the tuple
    typeParameters:
    - id: T1
    - id: T2
    - id: T3
    - id: T4
    - id: T5
    - id: T6
    return:
      type: System.Tuple2{{T1},{T2},{T3},{T4},{T5},{T6}}
      description: A newly created tuple
    content.vb: >-
      <Obsolete>

      Public Shared Function Create(Of T1, T2, T3, T4, T5, T6)(item1 As T1, second As T2, third As T3, fourth As T4, fifth As T5, sixth As T6) As Tuple2(Of T1, T2, T3, T4, T5, T6)
  overload: System.Tuple2.Create*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor
    arguments: []
  nameWithType.vb: Tuple2.Create(Of T1, T2, T3, T4, T5, T6)(T1, T2, T3, T4, T5, T6)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Tuple2.Create(Of T1, T2, T3, T4, T5, T6)(T1, T2, T3, T4, T5, T6)
  name.vb: Create(Of T1, T2, T3, T4, T5, T6)(T1, T2, T3, T4, T5, T6)
references:
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Tuple2.Create*
  commentId: Overload:System.Tuple2.Create
  name: Create
  nameWithType: Tuple2.Create
  fullName: System.Tuple2.Create
- uid: '{T1}'
  commentId: '!:T1'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: '{T2}'
  commentId: '!:T2'
  definition: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: System.Tuple2{{T1},{T2}}
  commentId: T:System.Tuple2{``0,``1}
  parent: System
  definition: System.Tuple2`2
  name: Tuple2<T1, T2>
  nameWithType: Tuple2<T1, T2>
  fullName: System.Tuple2<T1, T2>
  nameWithType.vb: Tuple2(Of T1, T2)
  fullName.vb: System.Tuple2(Of T1, T2)
  name.vb: Tuple2(Of T1, T2)
  spec.csharp:
  - uid: System.Tuple2`2
    name: Tuple2
    nameWithType: Tuple2
    fullName: System.Tuple2
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple2`2
    name: Tuple2
    nameWithType: Tuple2
    fullName: System.Tuple2
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: System.Tuple2`2
  commentId: T:System.Tuple2`2
  parent: System
  name: Tuple2<T1, T2>
  nameWithType: Tuple2<T1, T2>
  fullName: System.Tuple2<T1, T2>
  nameWithType.vb: Tuple2(Of T1, T2)
  fullName.vb: System.Tuple2(Of T1, T2)
  name.vb: Tuple2(Of T1, T2)
  spec.csharp:
  - uid: System.Tuple2`2
    name: Tuple2
    nameWithType: Tuple2
    fullName: System.Tuple2
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple2`2
    name: Tuple2
    nameWithType: Tuple2
    fullName: System.Tuple2
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T3}'
  commentId: '!:T3'
  definition: T3
  name: T3
  nameWithType: T3
  fullName: T3
- uid: System.Tuple2{{T1},{T2},{T3}}
  commentId: T:System.Tuple2{``0,``1,``2}
  parent: System
  definition: System.Tuple2`3
  name: Tuple2<T1, T2, T3>
  nameWithType: Tuple2<T1, T2, T3>
  fullName: System.Tuple2<T1, T2, T3>
  nameWithType.vb: Tuple2(Of T1, T2, T3)
  fullName.vb: System.Tuple2(Of T1, T2, T3)
  name.vb: Tuple2(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Tuple2`3
    name: Tuple2
    nameWithType: Tuple2
    fullName: System.Tuple2
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple2`3
    name: Tuple2
    nameWithType: Tuple2
    fullName: System.Tuple2
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: T3
  name: T3
  nameWithType: T3
  fullName: T3
- uid: System.Tuple2`3
  commentId: T:System.Tuple2`3
  parent: System
  name: Tuple2<T1, T2, T3>
  nameWithType: Tuple2<T1, T2, T3>
  fullName: System.Tuple2<T1, T2, T3>
  nameWithType.vb: Tuple2(Of T1, T2, T3)
  fullName.vb: System.Tuple2(Of T1, T2, T3)
  name.vb: Tuple2(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Tuple2`3
    name: Tuple2
    nameWithType: Tuple2
    fullName: System.Tuple2
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple2`3
    name: Tuple2
    nameWithType: Tuple2
    fullName: System.Tuple2
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T4}'
  commentId: '!:T4'
  definition: T4
  name: T4
  nameWithType: T4
  fullName: T4
- uid: System.Tuple2{{T1},{T2},{T3},{T4}}
  commentId: T:System.Tuple2{``0,``1,``2,``3}
  parent: System
  definition: System.Tuple2`4
  name: Tuple2<T1, T2, T3, T4>
  nameWithType: Tuple2<T1, T2, T3, T4>
  fullName: System.Tuple2<T1, T2, T3, T4>
  nameWithType.vb: Tuple2(Of T1, T2, T3, T4)
  fullName.vb: System.Tuple2(Of T1, T2, T3, T4)
  name.vb: Tuple2(Of T1, T2, T3, T4)
  spec.csharp:
  - uid: System.Tuple2`4
    name: Tuple2
    nameWithType: Tuple2
    fullName: System.Tuple2
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple2`4
    name: Tuple2
    nameWithType: Tuple2
    fullName: System.Tuple2
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: )
    nameWithType: )
    fullName: )
- uid: T4
  name: T4
  nameWithType: T4
  fullName: T4
- uid: System.Tuple2`4
  commentId: T:System.Tuple2`4
  parent: System
  name: Tuple2<T1, T2, T3, T4>
  nameWithType: Tuple2<T1, T2, T3, T4>
  fullName: System.Tuple2<T1, T2, T3, T4>
  nameWithType.vb: Tuple2(Of T1, T2, T3, T4)
  fullName.vb: System.Tuple2(Of T1, T2, T3, T4)
  name.vb: Tuple2(Of T1, T2, T3, T4)
  spec.csharp:
  - uid: System.Tuple2`4
    name: Tuple2
    nameWithType: Tuple2
    fullName: System.Tuple2
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple2`4
    name: Tuple2
    nameWithType: Tuple2
    fullName: System.Tuple2
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T5}'
  commentId: '!:T5'
  definition: T5
  name: T5
  nameWithType: T5
  fullName: T5
- uid: System.Tuple2{{T1},{T2},{T3},{T4},{T5}}
  commentId: T:System.Tuple2{``0,``1,``2,``3,``4}
  parent: System
  definition: System.Tuple2`5
  name: Tuple2<T1, T2, T3, T4, T5>
  nameWithType: Tuple2<T1, T2, T3, T4, T5>
  fullName: System.Tuple2<T1, T2, T3, T4, T5>
  nameWithType.vb: Tuple2(Of T1, T2, T3, T4, T5)
  fullName.vb: System.Tuple2(Of T1, T2, T3, T4, T5)
  name.vb: Tuple2(Of T1, T2, T3, T4, T5)
  spec.csharp:
  - uid: System.Tuple2`5
    name: Tuple2
    nameWithType: Tuple2
    fullName: System.Tuple2
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple2`5
    name: Tuple2
    nameWithType: Tuple2
    fullName: System.Tuple2
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: )
    nameWithType: )
    fullName: )
- uid: T5
  name: T5
  nameWithType: T5
  fullName: T5
- uid: System.Tuple2`5
  commentId: T:System.Tuple2`5
  parent: System
  name: Tuple2<T1, T2, T3, T4, T5>
  nameWithType: Tuple2<T1, T2, T3, T4, T5>
  fullName: System.Tuple2<T1, T2, T3, T4, T5>
  nameWithType.vb: Tuple2(Of T1, T2, T3, T4, T5)
  fullName.vb: System.Tuple2(Of T1, T2, T3, T4, T5)
  name.vb: Tuple2(Of T1, T2, T3, T4, T5)
  spec.csharp:
  - uid: System.Tuple2`5
    name: Tuple2
    nameWithType: Tuple2
    fullName: System.Tuple2
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple2`5
    name: Tuple2
    nameWithType: Tuple2
    fullName: System.Tuple2
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T6}'
  commentId: '!:T6'
  definition: T6
  name: T6
  nameWithType: T6
  fullName: T6
- uid: System.Tuple2{{T1},{T2},{T3},{T4},{T5},{T6}}
  commentId: T:System.Tuple2{``0,``1,``2,``3,``4,``5}
  parent: System
  definition: System.Tuple2`6
  name: Tuple2<T1, T2, T3, T4, T5, T6>
  nameWithType: Tuple2<T1, T2, T3, T4, T5, T6>
  fullName: System.Tuple2<T1, T2, T3, T4, T5, T6>
  nameWithType.vb: Tuple2(Of T1, T2, T3, T4, T5, T6)
  fullName.vb: System.Tuple2(Of T1, T2, T3, T4, T5, T6)
  name.vb: Tuple2(Of T1, T2, T3, T4, T5, T6)
  spec.csharp:
  - uid: System.Tuple2`6
    name: Tuple2
    nameWithType: Tuple2
    fullName: System.Tuple2
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple2`6
    name: Tuple2
    nameWithType: Tuple2
    fullName: System.Tuple2
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: )
    nameWithType: )
    fullName: )
- uid: T6
  name: T6
  nameWithType: T6
  fullName: T6
- uid: System.Tuple2`6
  commentId: T:System.Tuple2`6
  parent: System
  name: Tuple2<T1, T2, T3, T4, T5, T6>
  nameWithType: Tuple2<T1, T2, T3, T4, T5, T6>
  fullName: System.Tuple2<T1, T2, T3, T4, T5, T6>
  nameWithType.vb: Tuple2(Of T1, T2, T3, T4, T5, T6)
  fullName.vb: System.Tuple2(Of T1, T2, T3, T4, T5, T6)
  name.vb: Tuple2(Of T1, T2, T3, T4, T5, T6)
  spec.csharp:
  - uid: System.Tuple2`6
    name: Tuple2
    nameWithType: Tuple2
    fullName: System.Tuple2
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple2`6
    name: Tuple2
    nameWithType: Tuple2
    fullName: System.Tuple2
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: )
    nameWithType: )
    fullName: )
