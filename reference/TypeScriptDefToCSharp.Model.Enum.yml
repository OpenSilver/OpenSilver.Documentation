### YamlMime:ManagedReference
items:
- uid: TypeScriptDefToCSharp.Model.Enum
  commentId: T:TypeScriptDefToCSharp.Model.Enum
  id: Enum
  parent: TypeScriptDefToCSharp.Model
  children:
  - TypeScriptDefToCSharp.Model.Enum.#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration},TypeScriptDefToCSharp.TypeScriptDefContext)
  - TypeScriptDefToCSharp.Model.Enum.#ctor(TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration})
  - TypeScriptDefToCSharp.Model.Enum.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  - TypeScriptDefToCSharp.Model.Enum.New(System.String)
  - TypeScriptDefToCSharp.Model.Enum.ToString
  - TypeScriptDefToCSharp.Model.Enum.Values
  langs:
  - csharp
  - vb
  name: Enum
  nameWithType: Enum
  fullName: TypeScriptDefToCSharp.Model.Enum
  type: Class
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Enum.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Enum
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Enum.cs
    startLine: 27
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: 'public class Enum : TypeDeclaration, IDeclaration, TSType'
    content.vb: >-
      Public Class Enum
          Inherits TypeDeclaration
          Implements IDeclaration, TSType
  inheritance:
  - System.Object
  - TypeScriptDefToCSharp.Model.Declaration
  - TypeScriptDefToCSharp.Model.TypeDeclaration
  implements:
  - TypeScriptDefToCSharp.Model.IDeclaration
  - TypeScriptDefToCSharp.Model.TSType
  inheritedMembers:
  - TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp#Model#TSType#Name
  - TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp#Model#TSType#ToString
  - TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration},TypeScriptDefToCSharp.TypeScriptDefContext)
  - TypeScriptDefToCSharp.Model.Declaration.Name
  - TypeScriptDefToCSharp.Model.Declaration.Super
  - TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
  - TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String,System.Int32)
  - TypeScriptDefToCSharp.Model.Declaration.FirstAncestor``1
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TypeScriptDefToCSharp.Model.Enum.Values
  commentId: P:TypeScriptDefToCSharp.Model.Enum.Values
  id: Values
  parent: TypeScriptDefToCSharp.Model.Enum
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: Enum.Values
  fullName: TypeScriptDefToCSharp.Model.Enum.Values
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Enum.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Values
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Enum.cs
    startLine: 29
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public List<string> Values { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public Property Values As List(Of String)
  overload: TypeScriptDefToCSharp.Model.Enum.Values*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Enum.#ctor(TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration})
  commentId: M:TypeScriptDefToCSharp.Model.Enum.#ctor(TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration})
  id: '#ctor(TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration})'
  parent: TypeScriptDefToCSharp.Model.Enum
  langs:
  - csharp
  - vb
  name: Enum(Declaration.Container<Declaration>)
  nameWithType: Enum.Enum(Declaration.Container<Declaration>)
  fullName: TypeScriptDefToCSharp.Model.Enum.Enum(TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Declaration>)
  type: Constructor
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Enum.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Enum.cs
    startLine: 36
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public Enum(Declaration.Container<Declaration> super)
    parameters:
    - id: super
      type: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration}
    content.vb: Public Sub New(super As Declaration.Container(Of Declaration))
  overload: TypeScriptDefToCSharp.Model.Enum.#ctor*
  nameWithType.vb: Enum.Enum(Declaration.Container(Of Declaration))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TypeScriptDefToCSharp.Model.Enum.Enum(TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Declaration))
  name.vb: Enum(Declaration.Container(Of Declaration))
- uid: TypeScriptDefToCSharp.Model.Enum.#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration},TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Enum.#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration},TypeScriptDefToCSharp.TypeScriptDefContext)
  id: '#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration},TypeScriptDefToCSharp.TypeScriptDefContext)'
  parent: TypeScriptDefToCSharp.Model.Enum
  langs:
  - csharp
  - vb
  name: Enum(XElement, Declaration.Container<Declaration>, TypeScriptDefContext)
  nameWithType: Enum.Enum(XElement, Declaration.Container<Declaration>, TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Enum.Enum(System.Xml.Linq.XElement, TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Declaration>, TypeScriptDefToCSharp.TypeScriptDefContext)
  type: Constructor
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Enum.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Enum.cs
    startLine: 42
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public Enum(XElement elem, Declaration.Container<Declaration> super, TypeScriptDefContext context)
    parameters:
    - id: elem
      type: System.Xml.Linq.XElement
    - id: super
      type: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration}
    - id: context
      type: TypeScriptDefToCSharp.TypeScriptDefContext
    content.vb: Public Sub New(elem As XElement, super As Declaration.Container(Of Declaration), context As TypeScriptDefContext)
  overload: TypeScriptDefToCSharp.Model.Enum.#ctor*
  nameWithType.vb: Enum.Enum(XElement, Declaration.Container(Of Declaration), TypeScriptDefContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TypeScriptDefToCSharp.Model.Enum.Enum(System.Xml.Linq.XElement, TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Declaration), TypeScriptDefToCSharp.TypeScriptDefContext)
  name.vb: Enum(XElement, Declaration.Container(Of Declaration), TypeScriptDefContext)
- uid: TypeScriptDefToCSharp.Model.Enum.ToString
  commentId: M:TypeScriptDefToCSharp.Model.Enum.ToString
  id: ToString
  parent: TypeScriptDefToCSharp.Model.Enum
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Enum.ToString()
  fullName: TypeScriptDefToCSharp.Model.Enum.ToString()
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Enum.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ToString
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Enum.cs
    startLine: 58
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: TypeScriptDefToCSharp.Model.Declaration.ToString
  overload: TypeScriptDefToCSharp.Model.Enum.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TypeScriptDefToCSharp.Model.Enum.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Enum.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  id: Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  parent: TypeScriptDefToCSharp.Model.Enum
  langs:
  - csharp
  - vb
  name: Export(TypeScriptDefContext)
  nameWithType: Enum.Export(TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Enum.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Enum.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Export
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Enum.cs
    startLine: 131
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public override void Export(TypeScriptDefContext context)
    parameters:
    - id: context
      type: TypeScriptDefToCSharp.TypeScriptDefContext
    content.vb: Public Overrides Sub Export(context As TypeScriptDefContext)
  overridden: TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  overload: TypeScriptDefToCSharp.Model.Enum.Export*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TypeScriptDefToCSharp.Model.Enum.New(System.String)
  commentId: M:TypeScriptDefToCSharp.Model.Enum.New(System.String)
  id: New(System.String)
  parent: TypeScriptDefToCSharp.Model.Enum
  langs:
  - csharp
  - vb
  name: New(String)
  nameWithType: Enum.New(String)
  fullName: TypeScriptDefToCSharp.Model.Enum.New(System.String)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Enum.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: New
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Enum.cs
    startLine: 166
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public override string New(string jsObj)
    parameters:
    - id: jsObj
      type: System.String
    return:
      type: System.String
    content.vb: Public Overrides Function New(jsObj As String) As String
  overridden: TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.String)
  overload: TypeScriptDefToCSharp.Model.Enum.New*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: TypeScriptDefToCSharp.Model
  commentId: N:TypeScriptDefToCSharp.Model
  name: TypeScriptDefToCSharp.Model
  nameWithType: TypeScriptDefToCSharp.Model
  fullName: TypeScriptDefToCSharp.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TypeScriptDefToCSharp.Model.Declaration
  commentId: T:TypeScriptDefToCSharp.Model.Declaration
  parent: TypeScriptDefToCSharp.Model
  name: Declaration
  nameWithType: Declaration
  fullName: TypeScriptDefToCSharp.Model.Declaration
- uid: TypeScriptDefToCSharp.Model.TypeDeclaration
  commentId: T:TypeScriptDefToCSharp.Model.TypeDeclaration
  parent: TypeScriptDefToCSharp.Model
  name: TypeDeclaration
  nameWithType: TypeDeclaration
  fullName: TypeScriptDefToCSharp.Model.TypeDeclaration
- uid: TypeScriptDefToCSharp.Model.IDeclaration
  commentId: T:TypeScriptDefToCSharp.Model.IDeclaration
  parent: TypeScriptDefToCSharp.Model
  name: IDeclaration
  nameWithType: IDeclaration
  fullName: TypeScriptDefToCSharp.Model.IDeclaration
- uid: TypeScriptDefToCSharp.Model.TSType
  commentId: T:TypeScriptDefToCSharp.Model.TSType
  parent: TypeScriptDefToCSharp.Model
  name: TSType
  nameWithType: TSType
  fullName: TypeScriptDefToCSharp.Model.TSType
- uid: TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp#Model#TSType#Name
  commentId: P:TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp#Model#TSType#Name
  parent: TypeScriptDefToCSharp.Model.TypeDeclaration
  name: TSType.Name
  nameWithType: TypeDeclaration.TSType.Name
  fullName: TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp.Model.TSType.Name
  nameWithType.vb: TypeDeclaration.TypeScriptDefToCSharp.Model.TSType.Name
  name.vb: TypeScriptDefToCSharp.Model.TSType.Name
- uid: TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp#Model#TSType#ToString
  commentId: M:TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp#Model#TSType#ToString
  parent: TypeScriptDefToCSharp.Model.TypeDeclaration
  name: TSType.ToString()
  nameWithType: TypeDeclaration.TSType.ToString()
  fullName: TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp.Model.TSType.ToString()
  nameWithType.vb: TypeDeclaration.TypeScriptDefToCSharp.Model.TSType.ToString()
  name.vb: TypeScriptDefToCSharp.Model.TSType.ToString()
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp#Model#TSType#ToString
    name: TSType.ToString
    nameWithType: TypeDeclaration.TSType.ToString
    fullName: TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp.Model.TSType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp#Model#TSType#ToString
    name: TypeScriptDefToCSharp.Model.TSType.ToString
    nameWithType: TypeDeclaration.TypeScriptDefToCSharp.Model.TSType.ToString
    fullName: TypeScriptDefToCSharp.Model.TypeDeclaration.TypeScriptDefToCSharp.Model.TSType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration},TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration},TypeScriptDefToCSharp.TypeScriptDefContext)
  parent: TypeScriptDefToCSharp.Model.TypeDeclaration
  isExternal: true
  name: New(XElement, Declaration.Container<Declaration>, TypeScriptDefContext)
  nameWithType: TypeDeclaration.New(XElement, Declaration.Container<Declaration>, TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.Xml.Linq.XElement, TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Declaration>, TypeScriptDefToCSharp.TypeScriptDefContext)
  nameWithType.vb: TypeDeclaration.New(XElement, Declaration.Container(Of Declaration), TypeScriptDefContext)
  fullName.vb: TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.Xml.Linq.XElement, TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Declaration), TypeScriptDefToCSharp.TypeScriptDefContext)
  name.vb: New(XElement, Declaration.Container(Of Declaration), TypeScriptDefContext)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration},TypeScriptDefToCSharp.TypeScriptDefContext)
    name: New
    nameWithType: TypeDeclaration.New
    fullName: TypeScriptDefToCSharp.Model.TypeDeclaration.New
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Declaration
    name: Declaration
    nameWithType: Declaration
    fullName: TypeScriptDefToCSharp.Model.Declaration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration},TypeScriptDefToCSharp.TypeScriptDefContext)
    name: New
    nameWithType: TypeDeclaration.New
    fullName: TypeScriptDefToCSharp.Model.TypeDeclaration.New
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Declaration
    name: Declaration
    nameWithType: Declaration
    fullName: TypeScriptDefToCSharp.Model.Declaration
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.Name
  commentId: P:TypeScriptDefToCSharp.Model.Declaration.Name
  parent: TypeScriptDefToCSharp.Model.Declaration
  name: Name
  nameWithType: Declaration.Name
  fullName: TypeScriptDefToCSharp.Model.Declaration.Name
- uid: TypeScriptDefToCSharp.Model.Declaration.Super
  commentId: P:TypeScriptDefToCSharp.Model.Declaration.Super
  parent: TypeScriptDefToCSharp.Model.Declaration
  name: Super
  nameWithType: Declaration.Super
  fullName: TypeScriptDefToCSharp.Model.Declaration.Super
- uid: TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
  parent: TypeScriptDefToCSharp.Model.Declaration
  isExternal: true
  name: FullName(String)
  nameWithType: Declaration.FullName(String)
  fullName: TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
    name: FullName
    nameWithType: Declaration.FullName
    fullName: TypeScriptDefToCSharp.Model.Declaration.FullName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
    name: FullName
    nameWithType: Declaration.FullName
    fullName: TypeScriptDefToCSharp.Model.Declaration.FullName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String,System.Int32)
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String,System.Int32)
  parent: TypeScriptDefToCSharp.Model.Declaration
  isExternal: true
  name: SkippedFullName(String, Int32)
  nameWithType: Declaration.SkippedFullName(String, Int32)
  fullName: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String, System.Int32)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String,System.Int32)
    name: SkippedFullName
    nameWithType: Declaration.SkippedFullName
    fullName: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String,System.Int32)
    name: SkippedFullName
    nameWithType: Declaration.SkippedFullName
    fullName: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor``1
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.FirstAncestor``1
  parent: TypeScriptDefToCSharp.Model.Declaration
  name: FirstAncestor<TContainer>()
  nameWithType: Declaration.FirstAncestor<TContainer>()
  fullName: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor<TContainer>()
  nameWithType.vb: Declaration.FirstAncestor(Of TContainer)()
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor(Of TContainer)()
  name.vb: FirstAncestor(Of TContainer)()
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor``1
    name: FirstAncestor<TContainer>
    nameWithType: Declaration.FirstAncestor<TContainer>
    fullName: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor<TContainer>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor``1
    name: FirstAncestor(Of TContainer)
    nameWithType: Declaration.FirstAncestor(Of TContainer)
    fullName: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor(Of TContainer)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: TypeScriptDefToCSharp.Model.Enum.Values*
  commentId: Overload:TypeScriptDefToCSharp.Model.Enum.Values
  name: Values
  nameWithType: Enum.Values
  fullName: TypeScriptDefToCSharp.Model.Enum.Values
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TypeScriptDefToCSharp.Model.Enum.#ctor*
  commentId: Overload:TypeScriptDefToCSharp.Model.Enum.#ctor
  name: Enum
  nameWithType: Enum.Enum
  fullName: TypeScriptDefToCSharp.Model.Enum.Enum
- uid: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration}
  commentId: T:TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration}
  parent: TypeScriptDefToCSharp.Model
  definition: TypeScriptDefToCSharp.Model.Declaration.Container`1
  name: Declaration.Container<Declaration>
  nameWithType: Declaration.Container<Declaration>
  fullName: TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Declaration>
  nameWithType.vb: Declaration.Container(Of Declaration)
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Declaration)
  name.vb: Declaration.Container(Of Declaration)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Declaration
    name: Declaration
    nameWithType: Declaration
    fullName: TypeScriptDefToCSharp.Model.Declaration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Declaration
    name: Declaration
    nameWithType: Declaration
    fullName: TypeScriptDefToCSharp.Model.Declaration
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
  commentId: T:TypeScriptDefToCSharp.Model.Declaration.Container`1
  name: Declaration.Container<T>
  nameWithType: Declaration.Container<T>
  fullName: TypeScriptDefToCSharp.Model.Declaration.Container<T>
  nameWithType.vb: Declaration.Container(Of T)
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.Container(Of T)
  name.vb: Declaration.Container(Of T)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Linq.XElement
  commentId: T:System.Xml.Linq.XElement
  parent: System.Xml.Linq
  isExternal: true
  name: XElement
  nameWithType: XElement
  fullName: System.Xml.Linq.XElement
- uid: TypeScriptDefToCSharp.TypeScriptDefContext
  commentId: T:TypeScriptDefToCSharp.TypeScriptDefContext
  parent: TypeScriptDefToCSharp
  name: TypeScriptDefContext
  nameWithType: TypeScriptDefContext
  fullName: TypeScriptDefToCSharp.TypeScriptDefContext
- uid: System.Xml.Linq
  commentId: N:System.Xml.Linq
  isExternal: true
  name: System.Xml.Linq
  nameWithType: System.Xml.Linq
  fullName: System.Xml.Linq
- uid: TypeScriptDefToCSharp
  commentId: N:TypeScriptDefToCSharp
  name: TypeScriptDefToCSharp
  nameWithType: TypeScriptDefToCSharp
  fullName: TypeScriptDefToCSharp
- uid: TypeScriptDefToCSharp.Model.Declaration.ToString
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.ToString
  parent: TypeScriptDefToCSharp.Model.Declaration
  name: ToString()
  nameWithType: Declaration.ToString()
  fullName: TypeScriptDefToCSharp.Model.Declaration.ToString()
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.ToString
    name: ToString
    nameWithType: Declaration.ToString
    fullName: TypeScriptDefToCSharp.Model.Declaration.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.ToString
    name: ToString
    nameWithType: Declaration.ToString
    fullName: TypeScriptDefToCSharp.Model.Declaration.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Enum.ToString*
  commentId: Overload:TypeScriptDefToCSharp.Model.Enum.ToString
  name: ToString
  nameWithType: Enum.ToString
  fullName: TypeScriptDefToCSharp.Model.Enum.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  parent: TypeScriptDefToCSharp.Model.Declaration
  name: Export(TypeScriptDefContext)
  nameWithType: Declaration.Export(TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
    name: Export
    nameWithType: Declaration.Export
    fullName: TypeScriptDefToCSharp.Model.Declaration.Export
  - name: (
    nameWithType: (
    fullName: (
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
    name: Export
    nameWithType: Declaration.Export
    fullName: TypeScriptDefToCSharp.Model.Declaration.Export
  - name: (
    nameWithType: (
    fullName: (
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Enum.Export*
  commentId: Overload:TypeScriptDefToCSharp.Model.Enum.Export
  name: Export
  nameWithType: Enum.Export
  fullName: TypeScriptDefToCSharp.Model.Enum.Export
- uid: TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.String)
  commentId: M:TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.String)
  parent: TypeScriptDefToCSharp.Model.TypeDeclaration
  isExternal: true
  name: New(String)
  nameWithType: TypeDeclaration.New(String)
  fullName: TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.String)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.String)
    name: New
    nameWithType: TypeDeclaration.New
    fullName: TypeScriptDefToCSharp.Model.TypeDeclaration.New
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.TypeDeclaration.New(System.String)
    name: New
    nameWithType: TypeDeclaration.New
    fullName: TypeScriptDefToCSharp.Model.TypeDeclaration.New
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Enum.New*
  commentId: Overload:TypeScriptDefToCSharp.Model.Enum.New
  name: New
  nameWithType: Enum.New
  fullName: TypeScriptDefToCSharp.Model.Enum.New
