### YamlMime:ManagedReference
items:
- uid: System.Windows.Markup.TypeExtension
  commentId: T:System.Windows.Markup.TypeExtension
  id: TypeExtension
  parent: System.Windows.Markup
  children:
  - System.Windows.Markup.TypeExtension.#ctor
  - System.Windows.Markup.TypeExtension.#ctor(System.String)
  - System.Windows.Markup.TypeExtension.#ctor(System.Type)
  - System.Windows.Markup.TypeExtension.ProvideValue(System.IServiceProvider)
  - System.Windows.Markup.TypeExtension.Type
  - System.Windows.Markup.TypeExtension.TypeName
  langs:
  - csharp
  - vb
  name: TypeExtension
  nameWithType: TypeExtension
  fullName: System.Windows.Markup.TypeExtension
  type: Class
  source:
    remote:
      path: src/Runtime/OpenSilver.Xaml/System.Xaml.Markup/TypeExtension.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: TypeExtension
    path: ../OpenSilverGit/src/Runtime/OpenSilver.Xaml/System.Xaml.Markup/TypeExtension.cs
    startLine: 13
  assemblies:
  - OpenSilver
  namespace: System.Windows.Markup
  summary: "\nImplements a markup extension that returns a <xref href=\"System.Windows.Markup.TypeExtension.Type\" data-throw-if-not-resolved=\"false\"></xref> based on a string input.\n"
  example: []
  syntax:
    content: >-
      [TypeConverter(typeof(TypeExtensionConverter))]

      public class TypeExtension : MarkupExtension, IMarkupExtension<object>
    content.vb: >-
      <TypeConverter(GetType(TypeExtensionConverter))>

      Public Class TypeExtension
          Inherits MarkupExtension
          Implements IMarkupExtension(Of Object)
  inheritance:
  - System.Object
  - System.Windows.Markup.MarkupExtension
  implements:
  - System.Xaml.IMarkupExtension{System.Object}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Windows.Markup.TypeExtension.#ctor
  commentId: M:System.Windows.Markup.TypeExtension.#ctor
  id: '#ctor'
  parent: System.Windows.Markup.TypeExtension
  langs:
  - csharp
  - vb
  name: TypeExtension()
  nameWithType: TypeExtension.TypeExtension()
  fullName: System.Windows.Markup.TypeExtension.TypeExtension()
  type: Constructor
  source:
    remote:
      path: src/Runtime/OpenSilver.Xaml/System.Xaml.Markup/TypeExtension.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/OpenSilver.Xaml/System.Xaml.Markup/TypeExtension.cs
    startLine: 24
  assemblies:
  - OpenSilver
  namespace: System.Windows.Markup
  summary: "\nInitializes a new instance of the <xref href=\"System.Windows.Markup.TypeExtension\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public TypeExtension()
    content.vb: Public Sub New
  overload: System.Windows.Markup.TypeExtension.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.Markup.TypeExtension.#ctor(System.String)
  commentId: M:System.Windows.Markup.TypeExtension.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Windows.Markup.TypeExtension
  langs:
  - csharp
  - vb
  name: TypeExtension(String)
  nameWithType: TypeExtension.TypeExtension(String)
  fullName: System.Windows.Markup.TypeExtension.TypeExtension(System.String)
  type: Constructor
  source:
    remote:
      path: src/Runtime/OpenSilver.Xaml/System.Xaml.Markup/TypeExtension.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/OpenSilver.Xaml/System.Xaml.Markup/TypeExtension.cs
    startLine: 40
  assemblies:
  - OpenSilver
  namespace: System.Windows.Markup
  summary: "\nInitializes a new instance of the <xref href=\"System.Windows.Markup.TypeExtension\" data-throw-if-not-resolved=\"false\"></xref> class, initializing the <xref href=\"System.Windows.Markup.TypeExtension.TypeName\" data-throw-if-not-resolved=\"false\"></xref> \nvalue based on the provided typeName string.\n"
  example: []
  syntax:
    content: public TypeExtension(string typeName)
    parameters:
    - id: typeName
      type: System.String
      description: "\nA string that identifies the type to make a reference to. This string uses the format prefix:className. prefix \nis the mapping prefix for a XAML namespace, and is only required to reference types that are not mapped to the \ndefault XAML namespace.\n"
    content.vb: Public Sub New(typeName As String)
  overload: System.Windows.Markup.TypeExtension.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nAttempted to specify typeName as null.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.Markup.TypeExtension.#ctor(System.Type)
  commentId: M:System.Windows.Markup.TypeExtension.#ctor(System.Type)
  id: '#ctor(System.Type)'
  parent: System.Windows.Markup.TypeExtension
  langs:
  - csharp
  - vb
  name: TypeExtension(Type)
  nameWithType: TypeExtension.TypeExtension(Type)
  fullName: System.Windows.Markup.TypeExtension.TypeExtension(System.Type)
  type: Constructor
  source:
    remote:
      path: src/Runtime/OpenSilver.Xaml/System.Xaml.Markup/TypeExtension.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/OpenSilver.Xaml/System.Xaml.Markup/TypeExtension.cs
    startLine: 54
  assemblies:
  - OpenSilver
  namespace: System.Windows.Markup
  summary: "\nInitializes a new instance of the <xref href=\"System.Windows.Markup.TypeExtension\" data-throw-if-not-resolved=\"false\"></xref> class, declaring the type directly.\n"
  example: []
  syntax:
    content: public TypeExtension(Type type)
    parameters:
    - id: type
      type: System.Type
      description: "\nThe type to be represented by this <xref href=\"System.Windows.Markup.TypeExtension\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public Sub New(type As Type)
  overload: System.Windows.Markup.TypeExtension.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\ntype is null\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.Markup.TypeExtension.Type
  commentId: P:System.Windows.Markup.TypeExtension.Type
  id: Type
  parent: System.Windows.Markup.TypeExtension
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: TypeExtension.Type
  fullName: System.Windows.Markup.TypeExtension.Type
  type: Property
  source:
    remote:
      path: src/Runtime/OpenSilver.Xaml/System.Xaml.Markup/TypeExtension.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Type
    path: ../OpenSilverGit/src/Runtime/OpenSilver.Xaml/System.Xaml.Markup/TypeExtension.cs
    startLine: 68
  assemblies:
  - OpenSilver
  namespace: System.Windows.Markup
  summary: "\nGets or sets the type information for this extension.\n"
  example: []
  syntax:
    content: public Type Type { get; set; }
    parameters: []
    return:
      type: System.Type
      description: "\nThe established type. For runtime purposes, this may be null for get access, but cannot be set to null.\n"
    content.vb: Public Property Type As Type
  overload: System.Windows.Markup.TypeExtension.Type*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nAttempted to set to null.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.Markup.TypeExtension.TypeName
  commentId: P:System.Windows.Markup.TypeExtension.TypeName
  id: TypeName
  parent: System.Windows.Markup.TypeExtension
  langs:
  - csharp
  - vb
  name: TypeName
  nameWithType: TypeExtension.TypeName
  fullName: System.Windows.Markup.TypeExtension.TypeName
  type: Property
  source:
    remote:
      path: src/Runtime/OpenSilver.Xaml/System.Xaml.Markup/TypeExtension.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: TypeName
    path: ../OpenSilverGit/src/Runtime/OpenSilver.Xaml/System.Xaml.Markup/TypeExtension.cs
    startLine: 89
  assemblies:
  - OpenSilver
  namespace: System.Windows.Markup
  summary: "\nGets or sets the type name represented by this markup extension.\n"
  example: []
  syntax:
    content: public string TypeName { get; set; }
    parameters: []
    return:
      type: System.String
      description: "\nA string that identifies the type. This string uses the format prefix:className. (prefix is the mapping prefix\nfor an XML namespace and is only required to reference types that are not mapped to the default XML namespace \nfor WPF (http://schemas.microsoft.com/winfx/2006/xaml/presentation).\n"
    content.vb: Public Property TypeName As String
  overload: System.Windows.Markup.TypeExtension.TypeName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.Markup.TypeExtension.ProvideValue(System.IServiceProvider)
  commentId: M:System.Windows.Markup.TypeExtension.ProvideValue(System.IServiceProvider)
  id: ProvideValue(System.IServiceProvider)
  parent: System.Windows.Markup.TypeExtension
  langs:
  - csharp
  - vb
  name: ProvideValue(IServiceProvider)
  nameWithType: TypeExtension.ProvideValue(IServiceProvider)
  fullName: System.Windows.Markup.TypeExtension.ProvideValue(System.IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Runtime/OpenSilver.Xaml/System.Xaml.Markup/TypeExtension.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ProvideValue
    path: ../OpenSilverGit/src/Runtime/OpenSilver.Xaml/System.Xaml.Markup/TypeExtension.cs
    startLine: 121
  assemblies:
  - OpenSilver
  namespace: System.Windows.Markup
  summary: "\nReturns an object that should be set on the property where this extension is applied. For <xref href=\"System.Windows.Markup.TypeExtension\" data-throw-if-not-resolved=\"false\"></xref>,\nthis is the <xref href=\"System.Windows.Markup.TypeExtension.Type\" data-throw-if-not-resolved=\"false\"></xref> value as evaluated for the requested type name.\n"
  example: []
  syntax:
    content: public override object ProvideValue(IServiceProvider serviceProvider)
    parameters:
    - id: serviceProvider
      type: System.IServiceProvider
      description: "\nObject that can provide services for the markup extension. The provider is expected to provide a service for \n<xref href=\"System.Windows.Markup.IXamlTypeResolver\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    return:
      type: System.Object
      description: "\nThe <xref href=\"System.Windows.Markup.TypeExtension.Type\" data-throw-if-not-resolved=\"false\"></xref> to set on the property where the extension is applied.\n"
    content.vb: Public Overrides Function ProvideValue(serviceProvider As IServiceProvider) As Object
  overridden: System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)
  overload: System.Windows.Markup.TypeExtension.ProvideValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nmember value for the extension is null.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nSome part of the typeName string did not parse properly. -or- serviceProvider did not provide a service for \n<xref href=\"System.Windows.Markup.IXamlTypeResolver\" data-throw-if-not-resolved=\"false\"></xref> -or- typeName value did not resolve to a type.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nserviceProvider is null.\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Windows.Markup.TypeExtension.Type
  commentId: P:System.Windows.Markup.TypeExtension.Type
  isExternal: true
- uid: System.Windows.Markup
  commentId: N:System.Windows.Markup
  name: System.Windows.Markup
  nameWithType: System.Windows.Markup
  fullName: System.Windows.Markup
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Markup.MarkupExtension
  commentId: T:System.Windows.Markup.MarkupExtension
  parent: System.Windows.Markup
  name: MarkupExtension
  nameWithType: MarkupExtension
  fullName: System.Windows.Markup.MarkupExtension
- uid: System.Xaml.IMarkupExtension{System.Object}
  commentId: T:System.Xaml.IMarkupExtension{System.Object}
  parent: System.Xaml
  definition: System.Xaml.IMarkupExtension`1
  name: IMarkupExtension<Object>
  nameWithType: IMarkupExtension<Object>
  fullName: System.Xaml.IMarkupExtension<System.Object>
  nameWithType.vb: IMarkupExtension(Of Object)
  fullName.vb: System.Xaml.IMarkupExtension(Of System.Object)
  name.vb: IMarkupExtension(Of Object)
  spec.csharp:
  - uid: System.Xaml.IMarkupExtension`1
    name: IMarkupExtension
    nameWithType: IMarkupExtension
    fullName: System.Xaml.IMarkupExtension
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Xaml.IMarkupExtension`1
    name: IMarkupExtension
    nameWithType: IMarkupExtension
    fullName: System.Xaml.IMarkupExtension
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.Xaml.IMarkupExtension`1
  commentId: T:System.Xaml.IMarkupExtension`1
  name: IMarkupExtension<T>
  nameWithType: IMarkupExtension<T>
  fullName: System.Xaml.IMarkupExtension<T>
  nameWithType.vb: IMarkupExtension(Of T)
  fullName.vb: System.Xaml.IMarkupExtension(Of T)
  name.vb: IMarkupExtension(Of T)
  spec.csharp:
  - uid: System.Xaml.IMarkupExtension`1
    name: IMarkupExtension
    nameWithType: IMarkupExtension
    fullName: System.Xaml.IMarkupExtension
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Xaml.IMarkupExtension`1
    name: IMarkupExtension
    nameWithType: IMarkupExtension
    fullName: System.Xaml.IMarkupExtension
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xaml
  commentId: N:System.Xaml
  name: System.Xaml
  nameWithType: System.Xaml
  fullName: System.Xaml
- uid: System.Windows.Markup.TypeExtension
  commentId: T:System.Windows.Markup.TypeExtension
  name: TypeExtension
  nameWithType: TypeExtension
  fullName: System.Windows.Markup.TypeExtension
- uid: System.Windows.Markup.TypeExtension.#ctor*
  commentId: Overload:System.Windows.Markup.TypeExtension.#ctor
  name: TypeExtension
  nameWithType: TypeExtension.TypeExtension
  fullName: System.Windows.Markup.TypeExtension.TypeExtension
- uid: System.Windows.Markup.TypeExtension.TypeName
  commentId: P:System.Windows.Markup.TypeExtension.TypeName
  isExternal: true
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.Markup.TypeExtension.Type*
  commentId: Overload:System.Windows.Markup.TypeExtension.Type
  name: Type
  nameWithType: TypeExtension.Type
  fullName: System.Windows.Markup.TypeExtension.Type
- uid: System.Windows.Markup.TypeExtension.TypeName*
  commentId: Overload:System.Windows.Markup.TypeExtension.TypeName
  name: TypeName
  nameWithType: TypeExtension.TypeName
  fullName: System.Windows.Markup.TypeExtension.TypeName
- uid: System.Windows.Markup.IXamlTypeResolver
  commentId: T:System.Windows.Markup.IXamlTypeResolver
  name: IXamlTypeResolver
  nameWithType: IXamlTypeResolver
  fullName: System.Windows.Markup.IXamlTypeResolver
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)
  commentId: M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)
  parent: System.Windows.Markup.MarkupExtension
  isExternal: true
  name: ProvideValue(IServiceProvider)
  nameWithType: MarkupExtension.ProvideValue(IServiceProvider)
  fullName: System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)
  spec.csharp:
  - uid: System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)
    name: ProvideValue
    nameWithType: MarkupExtension.ProvideValue
    fullName: System.Windows.Markup.MarkupExtension.ProvideValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)
    name: ProvideValue
    nameWithType: MarkupExtension.ProvideValue
    fullName: System.Windows.Markup.MarkupExtension.ProvideValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Markup.TypeExtension.ProvideValue*
  commentId: Overload:System.Windows.Markup.TypeExtension.ProvideValue
  name: ProvideValue
  nameWithType: TypeExtension.ProvideValue
  fullName: System.Windows.Markup.TypeExtension.ProvideValue
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
