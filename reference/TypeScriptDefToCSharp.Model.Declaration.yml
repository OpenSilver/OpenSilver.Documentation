### YamlMime:ManagedReference
items:
- uid: TypeScriptDefToCSharp.Model.Declaration
  commentId: T:TypeScriptDefToCSharp.Model.Declaration
  id: Declaration
  parent: TypeScriptDefToCSharp.Model
  children:
  - TypeScriptDefToCSharp.Model.Declaration.#ctor
  - TypeScriptDefToCSharp.Model.Declaration.#ctor(TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration})
  - TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  - TypeScriptDefToCSharp.Model.Declaration.FirstAncestor``1
  - TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
  - TypeScriptDefToCSharp.Model.Declaration.Name
  - TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String,System.Int32)
  - TypeScriptDefToCSharp.Model.Declaration.Super
  - TypeScriptDefToCSharp.Model.Declaration.ToString
  langs:
  - csharp
  - vb
  name: Declaration
  nameWithType: Declaration
  fullName: TypeScriptDefToCSharp.Model.Declaration
  type: Class
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Declaration.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Declaration
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Declaration.cs
    startLine: 37
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: 'public abstract class Declaration : IDeclaration'
    content.vb: >-
      Public MustInherit Class Declaration
          Implements IDeclaration
  inheritance:
  - System.Object
  derivedClasses:
  - TypeScriptDefToCSharp.Model.Function
  - TypeScriptDefToCSharp.Model.Namespace
  - TypeScriptDefToCSharp.Model.TypeDeclaration
  - TypeScriptDefToCSharp.Model.Variable
  implements:
  - TypeScriptDefToCSharp.Model.IDeclaration
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: TypeScriptDefToCSharp.Model.Declaration.Name
  commentId: P:TypeScriptDefToCSharp.Model.Declaration.Name
  id: Name
  parent: TypeScriptDefToCSharp.Model.Declaration
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Declaration.Name
  fullName: TypeScriptDefToCSharp.Model.Declaration.Name
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Declaration.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Name
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Declaration.cs
    startLine: 45
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: TypeScriptDefToCSharp.Model.Declaration.Name*
  implements:
  - TypeScriptDefToCSharp.Model.IDeclaration.Name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Declaration.Super
  commentId: P:TypeScriptDefToCSharp.Model.Declaration.Super
  id: Super
  parent: TypeScriptDefToCSharp.Model.Declaration
  langs:
  - csharp
  - vb
  name: Super
  nameWithType: Declaration.Super
  fullName: TypeScriptDefToCSharp.Model.Declaration.Super
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Declaration.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Super
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Declaration.cs
    startLine: 46
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public Declaration.Container<Declaration> Super { get; set; }
    parameters: []
    return:
      type: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration}
    content.vb: Public Property Super As Declaration.Container(Of Declaration)
  overload: TypeScriptDefToCSharp.Model.Declaration.Super*
  implements:
  - TypeScriptDefToCSharp.Model.IDeclaration.Super
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Declaration.#ctor
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.#ctor
  id: '#ctor'
  parent: TypeScriptDefToCSharp.Model.Declaration
  langs:
  - csharp
  - vb
  name: Declaration()
  nameWithType: Declaration.Declaration()
  fullName: TypeScriptDefToCSharp.Model.Declaration.Declaration()
  type: Constructor
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Declaration.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Declaration.cs
    startLine: 48
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public Declaration()
    content.vb: Public Sub New
  overload: TypeScriptDefToCSharp.Model.Declaration.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Declaration.#ctor(TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration})
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.#ctor(TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration})
  id: '#ctor(TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration})'
  parent: TypeScriptDefToCSharp.Model.Declaration
  langs:
  - csharp
  - vb
  name: Declaration(Declaration.Container<Declaration>)
  nameWithType: Declaration.Declaration(Declaration.Container<Declaration>)
  fullName: TypeScriptDefToCSharp.Model.Declaration.Declaration(TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Declaration>)
  type: Constructor
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Declaration.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Declaration.cs
    startLine: 50
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public Declaration(Declaration.Container<Declaration> super)
    parameters:
    - id: super
      type: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration}
    content.vb: Public Sub New(super As Declaration.Container(Of Declaration))
  overload: TypeScriptDefToCSharp.Model.Declaration.#ctor*
  nameWithType.vb: Declaration.Declaration(Declaration.Container(Of Declaration))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.Declaration(TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Declaration))
  name.vb: Declaration(Declaration.Container(Of Declaration))
- uid: TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
  id: FullName(System.String)
  parent: TypeScriptDefToCSharp.Model.Declaration
  langs:
  - csharp
  - vb
  name: FullName(String)
  nameWithType: Declaration.FullName(String)
  fullName: TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Declaration.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: FullName
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Declaration.cs
    startLine: 55
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public string FullName(string sep)
    parameters:
    - id: sep
      type: System.String
    return:
      type: System.String
    content.vb: Public Function FullName(sep As String) As String
  overload: TypeScriptDefToCSharp.Model.Declaration.FullName*
  implements:
  - TypeScriptDefToCSharp.Model.IDeclaration.FullName(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String,System.Int32)
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String,System.Int32)
  id: SkippedFullName(System.String,System.Int32)
  parent: TypeScriptDefToCSharp.Model.Declaration
  langs:
  - csharp
  - vb
  name: SkippedFullName(String, Int32)
  nameWithType: Declaration.SkippedFullName(String, Int32)
  fullName: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Declaration.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: SkippedFullName
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Declaration.cs
    startLine: 63
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public string SkippedFullName(string sep, int count)
    parameters:
    - id: sep
      type: System.String
    - id: count
      type: System.Int32
    return:
      type: System.String
    content.vb: Public Function SkippedFullName(sep As String, count As Integer) As String
  overload: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName*
  implements:
  - TypeScriptDefToCSharp.Model.IDeclaration.SkippedFullName(System.String,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor``1
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.FirstAncestor``1
  id: FirstAncestor``1
  parent: TypeScriptDefToCSharp.Model.Declaration
  langs:
  - csharp
  - vb
  name: FirstAncestor<TContainer>()
  nameWithType: Declaration.FirstAncestor<TContainer>()
  fullName: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor<TContainer>()
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Declaration.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: FirstAncestor
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Declaration.cs
    startLine: 68
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: >-
      public TContainer FirstAncestor<TContainer>()
          where TContainer : Declaration.Container<Declaration>
    typeParameters:
    - id: TContainer
    return:
      type: '{TContainer}'
    content.vb: Public Function FirstAncestor(Of TContainer As Declaration.Container(Of Declaration)) As TContainer
  overload: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor*
  implements:
  - TypeScriptDefToCSharp.Model.IDeclaration.FirstAncestor``1
  nameWithType.vb: Declaration.FirstAncestor(Of TContainer)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor(Of TContainer)()
  name.vb: FirstAncestor(Of TContainer)()
- uid: TypeScriptDefToCSharp.Model.Declaration.ToString
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.ToString
  id: ToString
  parent: TypeScriptDefToCSharp.Model.Declaration
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Declaration.ToString()
  fullName: TypeScriptDefToCSharp.Model.Declaration.ToString()
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Declaration.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ToString
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Declaration.cs
    startLine: 79
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public abstract override string ToString()
    return:
      type: System.String
    content.vb: Public MustOverride Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: TypeScriptDefToCSharp.Model.Declaration.ToString*
  modifiers.csharp:
  - public
  - abstract
  - override
  modifiers.vb:
  - Public
  - MustOverride
  - Overrides
- uid: TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  id: Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  parent: TypeScriptDefToCSharp.Model.Declaration
  langs:
  - csharp
  - vb
  name: Export(TypeScriptDefContext)
  nameWithType: Declaration.Export(TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Declaration.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Export
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Declaration.cs
    startLine: 81
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public virtual void Export(TypeScriptDefContext context)
    parameters:
    - id: context
      type: TypeScriptDefToCSharp.TypeScriptDefContext
    content.vb: Public Overridable Sub Export(context As TypeScriptDefContext)
  overload: TypeScriptDefToCSharp.Model.Declaration.Export*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: TypeScriptDefToCSharp.Model
  commentId: N:TypeScriptDefToCSharp.Model
  name: TypeScriptDefToCSharp.Model
  nameWithType: TypeScriptDefToCSharp.Model
  fullName: TypeScriptDefToCSharp.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TypeScriptDefToCSharp.Model.IDeclaration
  commentId: T:TypeScriptDefToCSharp.Model.IDeclaration
  parent: TypeScriptDefToCSharp.Model
  name: IDeclaration
  nameWithType: IDeclaration
  fullName: TypeScriptDefToCSharp.Model.IDeclaration
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: TypeScriptDefToCSharp.Model.Declaration.Name*
  commentId: Overload:TypeScriptDefToCSharp.Model.Declaration.Name
  name: Name
  nameWithType: Declaration.Name
  fullName: TypeScriptDefToCSharp.Model.Declaration.Name
- uid: TypeScriptDefToCSharp.Model.IDeclaration.Name
  commentId: P:TypeScriptDefToCSharp.Model.IDeclaration.Name
  parent: TypeScriptDefToCSharp.Model.IDeclaration
  name: Name
  nameWithType: IDeclaration.Name
  fullName: TypeScriptDefToCSharp.Model.IDeclaration.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TypeScriptDefToCSharp.Model.Declaration.Super*
  commentId: Overload:TypeScriptDefToCSharp.Model.Declaration.Super
  name: Super
  nameWithType: Declaration.Super
  fullName: TypeScriptDefToCSharp.Model.Declaration.Super
- uid: TypeScriptDefToCSharp.Model.IDeclaration.Super
  commentId: P:TypeScriptDefToCSharp.Model.IDeclaration.Super
  parent: TypeScriptDefToCSharp.Model.IDeclaration
  name: Super
  nameWithType: IDeclaration.Super
  fullName: TypeScriptDefToCSharp.Model.IDeclaration.Super
- uid: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration}
  commentId: T:TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration}
  parent: TypeScriptDefToCSharp.Model
  definition: TypeScriptDefToCSharp.Model.Declaration.Container`1
  name: Declaration.Container<Declaration>
  nameWithType: Declaration.Container<Declaration>
  fullName: TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Declaration>
  nameWithType.vb: Declaration.Container(Of Declaration)
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Declaration)
  name.vb: Declaration.Container(Of Declaration)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Declaration
    name: Declaration
    nameWithType: Declaration
    fullName: TypeScriptDefToCSharp.Model.Declaration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Declaration
    name: Declaration
    nameWithType: Declaration
    fullName: TypeScriptDefToCSharp.Model.Declaration
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
  commentId: T:TypeScriptDefToCSharp.Model.Declaration.Container`1
  name: Declaration.Container<T>
  nameWithType: Declaration.Container<T>
  fullName: TypeScriptDefToCSharp.Model.Declaration.Container<T>
  nameWithType.vb: Declaration.Container(Of T)
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.Container(Of T)
  name.vb: Declaration.Container(Of T)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.#ctor*
  commentId: Overload:TypeScriptDefToCSharp.Model.Declaration.#ctor
  name: Declaration
  nameWithType: Declaration.Declaration
  fullName: TypeScriptDefToCSharp.Model.Declaration.Declaration
- uid: TypeScriptDefToCSharp.Model.Declaration.FullName*
  commentId: Overload:TypeScriptDefToCSharp.Model.Declaration.FullName
  name: FullName
  nameWithType: Declaration.FullName
  fullName: TypeScriptDefToCSharp.Model.Declaration.FullName
- uid: TypeScriptDefToCSharp.Model.IDeclaration.FullName(System.String)
  commentId: M:TypeScriptDefToCSharp.Model.IDeclaration.FullName(System.String)
  parent: TypeScriptDefToCSharp.Model.IDeclaration
  isExternal: true
  name: FullName(String)
  nameWithType: IDeclaration.FullName(String)
  fullName: TypeScriptDefToCSharp.Model.IDeclaration.FullName(System.String)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.IDeclaration.FullName(System.String)
    name: FullName
    nameWithType: IDeclaration.FullName
    fullName: TypeScriptDefToCSharp.Model.IDeclaration.FullName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.IDeclaration.FullName(System.String)
    name: FullName
    nameWithType: IDeclaration.FullName
    fullName: TypeScriptDefToCSharp.Model.IDeclaration.FullName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName*
  commentId: Overload:TypeScriptDefToCSharp.Model.Declaration.SkippedFullName
  name: SkippedFullName
  nameWithType: Declaration.SkippedFullName
  fullName: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName
- uid: TypeScriptDefToCSharp.Model.IDeclaration.SkippedFullName(System.String,System.Int32)
  commentId: M:TypeScriptDefToCSharp.Model.IDeclaration.SkippedFullName(System.String,System.Int32)
  parent: TypeScriptDefToCSharp.Model.IDeclaration
  isExternal: true
  name: SkippedFullName(String, Int32)
  nameWithType: IDeclaration.SkippedFullName(String, Int32)
  fullName: TypeScriptDefToCSharp.Model.IDeclaration.SkippedFullName(System.String, System.Int32)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.IDeclaration.SkippedFullName(System.String,System.Int32)
    name: SkippedFullName
    nameWithType: IDeclaration.SkippedFullName
    fullName: TypeScriptDefToCSharp.Model.IDeclaration.SkippedFullName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.IDeclaration.SkippedFullName(System.String,System.Int32)
    name: SkippedFullName
    nameWithType: IDeclaration.SkippedFullName
    fullName: TypeScriptDefToCSharp.Model.IDeclaration.SkippedFullName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor*
  commentId: Overload:TypeScriptDefToCSharp.Model.Declaration.FirstAncestor
  name: FirstAncestor
  nameWithType: Declaration.FirstAncestor
  fullName: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor
- uid: TypeScriptDefToCSharp.Model.IDeclaration.FirstAncestor``1
  commentId: M:TypeScriptDefToCSharp.Model.IDeclaration.FirstAncestor``1
  parent: TypeScriptDefToCSharp.Model.IDeclaration
  name: FirstAncestor<TContainer>()
  nameWithType: IDeclaration.FirstAncestor<TContainer>()
  fullName: TypeScriptDefToCSharp.Model.IDeclaration.FirstAncestor<TContainer>()
  nameWithType.vb: IDeclaration.FirstAncestor(Of TContainer)()
  fullName.vb: TypeScriptDefToCSharp.Model.IDeclaration.FirstAncestor(Of TContainer)()
  name.vb: FirstAncestor(Of TContainer)()
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.IDeclaration.FirstAncestor``1
    name: FirstAncestor<TContainer>
    nameWithType: IDeclaration.FirstAncestor<TContainer>
    fullName: TypeScriptDefToCSharp.Model.IDeclaration.FirstAncestor<TContainer>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.IDeclaration.FirstAncestor``1
    name: FirstAncestor(Of TContainer)
    nameWithType: IDeclaration.FirstAncestor(Of TContainer)
    fullName: TypeScriptDefToCSharp.Model.IDeclaration.FirstAncestor(Of TContainer)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TContainer}'
  commentId: '!:TContainer'
  definition: TContainer
  name: TContainer
  nameWithType: TContainer
  fullName: TContainer
- uid: TContainer
  name: TContainer
  nameWithType: TContainer
  fullName: TContainer
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.ToString*
  commentId: Overload:TypeScriptDefToCSharp.Model.Declaration.ToString
  name: ToString
  nameWithType: Declaration.ToString
  fullName: TypeScriptDefToCSharp.Model.Declaration.ToString
- uid: TypeScriptDefToCSharp.Model.Declaration.Export*
  commentId: Overload:TypeScriptDefToCSharp.Model.Declaration.Export
  name: Export
  nameWithType: Declaration.Export
  fullName: TypeScriptDefToCSharp.Model.Declaration.Export
- uid: TypeScriptDefToCSharp.TypeScriptDefContext
  commentId: T:TypeScriptDefToCSharp.TypeScriptDefContext
  parent: TypeScriptDefToCSharp
  name: TypeScriptDefContext
  nameWithType: TypeScriptDefContext
  fullName: TypeScriptDefToCSharp.TypeScriptDefContext
- uid: TypeScriptDefToCSharp
  commentId: N:TypeScriptDefToCSharp
  name: TypeScriptDefToCSharp
  nameWithType: TypeScriptDefToCSharp
  fullName: TypeScriptDefToCSharp
