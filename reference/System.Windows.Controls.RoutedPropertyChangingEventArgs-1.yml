### YamlMime:ManagedReference
items:
- uid: System.Windows.Controls.RoutedPropertyChangingEventArgs`1
  commentId: T:System.Windows.Controls.RoutedPropertyChangingEventArgs`1
  id: RoutedPropertyChangingEventArgs`1
  parent: System.Windows.Controls
  children:
  - System.Windows.Controls.RoutedPropertyChangingEventArgs`1.#ctor(System.Windows.DependencyProperty,`0,`0,System.Boolean)
  - System.Windows.Controls.RoutedPropertyChangingEventArgs`1.Cancel
  - System.Windows.Controls.RoutedPropertyChangingEventArgs`1.InCoercion
  - System.Windows.Controls.RoutedPropertyChangingEventArgs`1.IsCancelable
  - System.Windows.Controls.RoutedPropertyChangingEventArgs`1.NewValue
  - System.Windows.Controls.RoutedPropertyChangingEventArgs`1.OldValue
  - System.Windows.Controls.RoutedPropertyChangingEventArgs`1.Property
  langs:
  - csharp
  - vb
  name: RoutedPropertyChangingEventArgs<T>
  nameWithType: RoutedPropertyChangingEventArgs<T>
  fullName: System.Windows.Controls.RoutedPropertyChangingEventArgs<T>
  type: Class
  source:
    remote:
      path: src/Runtime/Controls/Common/RoutedPropertyChangingEventArgs.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: RoutedPropertyChangingEventArgs
    path: ../OpenSilverGit/src/Runtime/Controls/Common/RoutedPropertyChangingEventArgs.cs
    startLine: 17
  assemblies:
  - OpenSilver.Controls
  namespace: System.Windows.Controls
  summary: "\nProvides event data for various routed events that track property values\nchanging.  Typically the events denote a cancellable action.\n"
  example: []
  syntax:
    content: 'public class RoutedPropertyChangingEventArgs<T> : RoutedEventArgs'
    typeParameters:
    - id: T
      description: "\nThe type of the value for the dependency property that is changing.\n"
    content.vb: >-
      Public Class RoutedPropertyChangingEventArgs(Of T)
          Inherits RoutedEventArgs
  inheritance:
  - System.Object
  - System.EventArgs
  - System.Windows.RoutedEventArgs
  inheritedMembers:
  - System.Windows.RoutedEventArgs.OriginalSource
  - System.EventArgs.Empty
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: RoutedPropertyChangingEventArgs(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Windows.Controls.RoutedPropertyChangingEventArgs(Of T)
  name.vb: RoutedPropertyChangingEventArgs(Of T)
- uid: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.Property
  commentId: P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.Property
  id: Property
  parent: System.Windows.Controls.RoutedPropertyChangingEventArgs`1
  langs:
  - csharp
  - vb
  name: Property
  nameWithType: RoutedPropertyChangingEventArgs<T>.Property
  fullName: System.Windows.Controls.RoutedPropertyChangingEventArgs<T>.Property
  type: Property
  source:
    remote:
      path: src/Runtime/Controls/Common/RoutedPropertyChangingEventArgs.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Property
    path: ../OpenSilverGit/src/Runtime/Controls/Common/RoutedPropertyChangingEventArgs.cs
    startLine: 25
  assemblies:
  - OpenSilver.Controls
  namespace: System.Windows.Controls
  summary: "\nGets the <xref href=\"System.Windows.DependencyProperty\" data-throw-if-not-resolved=\"false\"></xref> identifier for the property that is changing.\n"
  example: []
  syntax:
    content: public DependencyProperty Property { get; }
    parameters: []
    return:
      type: System.Windows.DependencyProperty
      description: "\nThe <xref href=\"System.Windows.DependencyProperty\" data-throw-if-not-resolved=\"false\"></xref> identifier for the property that is changing.\n"
    content.vb: Public ReadOnly Property Property As DependencyProperty
  overload: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.Property*
  nameWithType.vb: RoutedPropertyChangingEventArgs(Of T).Property
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Windows.Controls.RoutedPropertyChangingEventArgs(Of T).Property
- uid: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.OldValue
  commentId: P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.OldValue
  id: OldValue
  parent: System.Windows.Controls.RoutedPropertyChangingEventArgs`1
  langs:
  - csharp
  - vb
  name: OldValue
  nameWithType: RoutedPropertyChangingEventArgs<T>.OldValue
  fullName: System.Windows.Controls.RoutedPropertyChangingEventArgs<T>.OldValue
  type: Property
  source:
    remote:
      path: src/Runtime/Controls/Common/RoutedPropertyChangingEventArgs.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OldValue
    path: ../OpenSilverGit/src/Runtime/Controls/Common/RoutedPropertyChangingEventArgs.cs
    startLine: 33
  assemblies:
  - OpenSilver.Controls
  namespace: System.Windows.Controls
  summary: "\nGets a value that reports the previous value of the changing property.\n"
  example: []
  syntax:
    content: public T OldValue { get; }
    parameters: []
    return:
      type: '{T}'
      description: "\nThe previous value of the changing property.\n"
    content.vb: Public ReadOnly Property OldValue As T
  overload: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.OldValue*
  nameWithType.vb: RoutedPropertyChangingEventArgs(Of T).OldValue
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Windows.Controls.RoutedPropertyChangingEventArgs(Of T).OldValue
- uid: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.NewValue
  commentId: P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.NewValue
  id: NewValue
  parent: System.Windows.Controls.RoutedPropertyChangingEventArgs`1
  langs:
  - csharp
  - vb
  name: NewValue
  nameWithType: RoutedPropertyChangingEventArgs<T>.NewValue
  fullName: System.Windows.Controls.RoutedPropertyChangingEventArgs<T>.NewValue
  type: Property
  source:
    remote:
      path: src/Runtime/Controls/Common/RoutedPropertyChangingEventArgs.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: NewValue
    path: ../OpenSilverGit/src/Runtime/Controls/Common/RoutedPropertyChangingEventArgs.cs
    startLine: 42
  assemblies:
  - OpenSilver.Controls
  namespace: System.Windows.Controls
  summary: "\nGets or sets a value that reports the new value of the changing\nproperty, assuming that the property change is not cancelled.\n"
  example: []
  syntax:
    content: public T NewValue { get; set; }
    parameters: []
    return:
      type: '{T}'
      description: "\nThe new value of the changing property.\n"
    content.vb: Public Property NewValue As T
  overload: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.NewValue*
  nameWithType.vb: RoutedPropertyChangingEventArgs(Of T).NewValue
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.Controls.RoutedPropertyChangingEventArgs(Of T).NewValue
- uid: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.IsCancelable
  commentId: P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.IsCancelable
  id: IsCancelable
  parent: System.Windows.Controls.RoutedPropertyChangingEventArgs`1
  langs:
  - csharp
  - vb
  name: IsCancelable
  nameWithType: RoutedPropertyChangingEventArgs<T>.IsCancelable
  fullName: System.Windows.Controls.RoutedPropertyChangingEventArgs<T>.IsCancelable
  type: Property
  source:
    remote:
      path: src/Runtime/Controls/Common/RoutedPropertyChangingEventArgs.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IsCancelable
    path: ../OpenSilverGit/src/Runtime/Controls/Common/RoutedPropertyChangingEventArgs.cs
    startLine: 52
  assemblies:
  - OpenSilver.Controls
  namespace: System.Windows.Controls
  summary: "\nGets a value indicating whether the property change that originated\nthe RoutedPropertyChanging event is cancellable.\n"
  example: []
  syntax:
    content: public bool IsCancelable { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\nTrue if the property change is cancellable. false if the property\nchange is not cancellable.\n"
    content.vb: Public ReadOnly Property IsCancelable As Boolean
  overload: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.IsCancelable*
  nameWithType.vb: RoutedPropertyChangingEventArgs(Of T).IsCancelable
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Windows.Controls.RoutedPropertyChangingEventArgs(Of T).IsCancelable
- uid: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.Cancel
  commentId: P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.Cancel
  id: Cancel
  parent: System.Windows.Controls.RoutedPropertyChangingEventArgs`1
  langs:
  - csharp
  - vb
  name: Cancel
  nameWithType: RoutedPropertyChangingEventArgs<T>.Cancel
  fullName: System.Windows.Controls.RoutedPropertyChangingEventArgs<T>.Cancel
  type: Property
  source:
    remote:
      path: src/Runtime/Controls/Common/RoutedPropertyChangingEventArgs.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Cancel
    path: ../OpenSilverGit/src/Runtime/Controls/Common/RoutedPropertyChangingEventArgs.cs
    startLine: 66
  assemblies:
  - OpenSilver.Controls
  namespace: System.Windows.Controls
  summary: "\nGets or sets a value indicating whether the property change that\noriginated the RoutedPropertyChanging event should be cancelled.\n"
  example: []
  syntax:
    content: public bool Cancel { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: "\nTrue to cancel the property change; this resets the property to <xref href=\"System.Windows.Controls.RoutedPropertyChangingEventArgs%601.OldValue\" data-throw-if-not-resolved=\"false\"></xref>.\nfalse to not cancel the property change; the value changes to <xref href=\"System.Windows.Controls.RoutedPropertyChangingEventArgs%601.NewValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public Property Cancel As Boolean
  overload: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.Cancel*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nAttempted to cancel in an instance where <xref href=\"System.Windows.Controls.RoutedPropertyChangingEventArgs%601.IsCancelable\" data-throw-if-not-resolved=\"false\"></xref>\nis false.\n"
  nameWithType.vb: RoutedPropertyChangingEventArgs(Of T).Cancel
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.Controls.RoutedPropertyChangingEventArgs(Of T).Cancel
- uid: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.InCoercion
  commentId: P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.InCoercion
  id: InCoercion
  parent: System.Windows.Controls.RoutedPropertyChangingEventArgs`1
  langs:
  - csharp
  - vb
  name: InCoercion
  nameWithType: RoutedPropertyChangingEventArgs<T>.InCoercion
  fullName: System.Windows.Controls.RoutedPropertyChangingEventArgs<T>.InCoercion
  type: Property
  source:
    remote:
      path: src/Runtime/Controls/Common/RoutedPropertyChangingEventArgs.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: InCoercion
    path: ../OpenSilverGit/src/Runtime/Controls/Common/RoutedPropertyChangingEventArgs.cs
    startLine: 99
  assemblies:
  - OpenSilver.Controls
  namespace: System.Windows.Controls
  summary: "\nGets or sets a value indicating whether internal value coercion is\nacting on the property change that originated the\nRoutedPropertyChanging event.\n"
  remarks: "\nThis is a total hack to work around the class hierarchy for Value\ncoercion in NumericUpDown.\n"
  example: []
  syntax:
    content: public bool InCoercion { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: "\nTrue if coercion is active. false if coercion is not active.\n"
    content.vb: Public Property InCoercion As Boolean
  overload: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.InCoercion*
  nameWithType.vb: RoutedPropertyChangingEventArgs(Of T).InCoercion
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.Controls.RoutedPropertyChangingEventArgs(Of T).InCoercion
- uid: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.#ctor(System.Windows.DependencyProperty,`0,`0,System.Boolean)
  commentId: M:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.#ctor(System.Windows.DependencyProperty,`0,`0,System.Boolean)
  id: '#ctor(System.Windows.DependencyProperty,`0,`0,System.Boolean)'
  parent: System.Windows.Controls.RoutedPropertyChangingEventArgs`1
  langs:
  - csharp
  - vb
  name: RoutedPropertyChangingEventArgs(DependencyProperty, T, T, Boolean)
  nameWithType: RoutedPropertyChangingEventArgs<T>.RoutedPropertyChangingEventArgs(DependencyProperty, T, T, Boolean)
  fullName: System.Windows.Controls.RoutedPropertyChangingEventArgs<T>.RoutedPropertyChangingEventArgs(System.Windows.DependencyProperty, T, T, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Controls/Common/RoutedPropertyChangingEventArgs.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Controls/Common/RoutedPropertyChangingEventArgs.cs
    startLine: 115
  assemblies:
  - OpenSilver.Controls
  namespace: System.Windows.Controls
  summary: "\nInitializes a new instance of the <xref href=\"System.Windows.Controls.RoutedPropertyChangingEventArgs%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public RoutedPropertyChangingEventArgs(DependencyProperty property, T oldValue, T newValue, bool isCancelable)
    parameters:
    - id: property
      type: System.Windows.DependencyProperty
      description: "\nThe <xref href=\"System.Windows.DependencyProperty\" data-throw-if-not-resolved=\"false\"></xref> identifier for the property that is changing.\n"
    - id: oldValue
      type: '{T}'
      description: The previous value of the property.
    - id: newValue
      type: '{T}'
      description: "\nThe new value of the property, assuming that the property change is not cancelled.\n"
    - id: isCancelable
      type: System.Boolean
      description: "\nTrue if the property change is cancellable by setting <xref href=\"System.Windows.Controls.RoutedPropertyChangingEventArgs%601.Cancel\" data-throw-if-not-resolved=\"false\"></xref>\nto true in event handling. false if the property change is not cancellable.\n"
    content.vb: Public Sub New(property As DependencyProperty, oldValue As T, newValue As T, isCancelable As Boolean)
  overload: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.#ctor*
  nameWithType.vb: RoutedPropertyChangingEventArgs(Of T).RoutedPropertyChangingEventArgs(DependencyProperty, T, T, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.Controls.RoutedPropertyChangingEventArgs(Of T).RoutedPropertyChangingEventArgs(System.Windows.DependencyProperty, T, T, System.Boolean)
references:
- uid: System.Windows.Controls
  commentId: N:System.Windows.Controls
  name: System.Windows.Controls
  nameWithType: System.Windows.Controls
  fullName: System.Windows.Controls
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  commentId: T:System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.RoutedEventArgs
  commentId: T:System.Windows.RoutedEventArgs
  parent: System.Windows
  name: RoutedEventArgs
  nameWithType: RoutedEventArgs
  fullName: System.Windows.RoutedEventArgs
- uid: System.Windows.RoutedEventArgs.OriginalSource
  commentId: P:System.Windows.RoutedEventArgs.OriginalSource
  parent: System.Windows.RoutedEventArgs
  name: OriginalSource
  nameWithType: RoutedEventArgs.OriginalSource
  fullName: System.Windows.RoutedEventArgs.OriginalSource
- uid: System.EventArgs.Empty
  commentId: F:System.EventArgs.Empty
  parent: System.EventArgs
  isExternal: true
  name: Empty
  nameWithType: EventArgs.Empty
  fullName: System.EventArgs.Empty
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.Windows
  commentId: N:System.Windows
  name: System.Windows
  nameWithType: System.Windows
  fullName: System.Windows
- uid: System.Windows.DependencyProperty
  commentId: T:System.Windows.DependencyProperty
  parent: System.Windows
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.Property*
  commentId: Overload:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.Property
  name: Property
  nameWithType: RoutedPropertyChangingEventArgs<T>.Property
  fullName: System.Windows.Controls.RoutedPropertyChangingEventArgs<T>.Property
  nameWithType.vb: RoutedPropertyChangingEventArgs(Of T).Property
  fullName.vb: System.Windows.Controls.RoutedPropertyChangingEventArgs(Of T).Property
- uid: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.OldValue*
  commentId: Overload:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.OldValue
  name: OldValue
  nameWithType: RoutedPropertyChangingEventArgs<T>.OldValue
  fullName: System.Windows.Controls.RoutedPropertyChangingEventArgs<T>.OldValue
  nameWithType.vb: RoutedPropertyChangingEventArgs(Of T).OldValue
  fullName.vb: System.Windows.Controls.RoutedPropertyChangingEventArgs(Of T).OldValue
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.NewValue*
  commentId: Overload:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.NewValue
  name: NewValue
  nameWithType: RoutedPropertyChangingEventArgs<T>.NewValue
  fullName: System.Windows.Controls.RoutedPropertyChangingEventArgs<T>.NewValue
  nameWithType.vb: RoutedPropertyChangingEventArgs(Of T).NewValue
  fullName.vb: System.Windows.Controls.RoutedPropertyChangingEventArgs(Of T).NewValue
- uid: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.IsCancelable*
  commentId: Overload:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.IsCancelable
  name: IsCancelable
  nameWithType: RoutedPropertyChangingEventArgs<T>.IsCancelable
  fullName: System.Windows.Controls.RoutedPropertyChangingEventArgs<T>.IsCancelable
  nameWithType.vb: RoutedPropertyChangingEventArgs(Of T).IsCancelable
  fullName.vb: System.Windows.Controls.RoutedPropertyChangingEventArgs(Of T).IsCancelable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.OldValue
  commentId: P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.OldValue
  isExternal: true
- uid: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.NewValue
  commentId: P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.NewValue
  isExternal: true
- uid: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.IsCancelable
  commentId: P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.IsCancelable
  isExternal: true
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.Cancel*
  commentId: Overload:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.Cancel
  name: Cancel
  nameWithType: RoutedPropertyChangingEventArgs<T>.Cancel
  fullName: System.Windows.Controls.RoutedPropertyChangingEventArgs<T>.Cancel
  nameWithType.vb: RoutedPropertyChangingEventArgs(Of T).Cancel
  fullName.vb: System.Windows.Controls.RoutedPropertyChangingEventArgs(Of T).Cancel
- uid: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.InCoercion*
  commentId: Overload:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.InCoercion
  name: InCoercion
  nameWithType: RoutedPropertyChangingEventArgs<T>.InCoercion
  fullName: System.Windows.Controls.RoutedPropertyChangingEventArgs<T>.InCoercion
  nameWithType.vb: RoutedPropertyChangingEventArgs(Of T).InCoercion
  fullName.vb: System.Windows.Controls.RoutedPropertyChangingEventArgs(Of T).InCoercion
- uid: System.Windows.Controls.RoutedPropertyChangingEventArgs`1
  commentId: T:System.Windows.Controls.RoutedPropertyChangingEventArgs`1
  name: RoutedPropertyChangingEventArgs<T>
  nameWithType: RoutedPropertyChangingEventArgs<T>
  fullName: System.Windows.Controls.RoutedPropertyChangingEventArgs<T>
  nameWithType.vb: RoutedPropertyChangingEventArgs(Of T)
  fullName.vb: System.Windows.Controls.RoutedPropertyChangingEventArgs(Of T)
  name.vb: RoutedPropertyChangingEventArgs(Of T)
  spec.csharp:
  - uid: System.Windows.Controls.RoutedPropertyChangingEventArgs`1
    name: RoutedPropertyChangingEventArgs
    nameWithType: RoutedPropertyChangingEventArgs
    fullName: System.Windows.Controls.RoutedPropertyChangingEventArgs
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Windows.Controls.RoutedPropertyChangingEventArgs`1
    name: RoutedPropertyChangingEventArgs
    nameWithType: RoutedPropertyChangingEventArgs
    fullName: System.Windows.Controls.RoutedPropertyChangingEventArgs
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.Cancel
  commentId: P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.Cancel
  isExternal: true
- uid: System.Windows.Controls.RoutedPropertyChangingEventArgs`1.#ctor*
  commentId: Overload:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.#ctor
  name: RoutedPropertyChangingEventArgs
  nameWithType: RoutedPropertyChangingEventArgs<T>.RoutedPropertyChangingEventArgs
  fullName: System.Windows.Controls.RoutedPropertyChangingEventArgs<T>.RoutedPropertyChangingEventArgs
  nameWithType.vb: RoutedPropertyChangingEventArgs(Of T).RoutedPropertyChangingEventArgs
  fullName.vb: System.Windows.Controls.RoutedPropertyChangingEventArgs(Of T).RoutedPropertyChangingEventArgs
