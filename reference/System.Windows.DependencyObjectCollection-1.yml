### YamlMime:ManagedReference
items:
- uid: System.Windows.DependencyObjectCollection`1
  commentId: T:System.Windows.DependencyObjectCollection`1
  id: DependencyObjectCollection`1
  parent: System.Windows
  children:
  - System.Windows.DependencyObjectCollection`1.#ctor
  - System.Windows.DependencyObjectCollection`1.Add(`0)
  - System.Windows.DependencyObjectCollection`1.Clear
  - System.Windows.DependencyObjectCollection`1.CollectionChanged
  - System.Windows.DependencyObjectCollection`1.Contains(`0)
  - System.Windows.DependencyObjectCollection`1.CopyTo(`0[],System.Int32)
  - System.Windows.DependencyObjectCollection`1.Count
  - System.Windows.DependencyObjectCollection`1.GetEnumerator
  - System.Windows.DependencyObjectCollection`1.IndexOf(`0)
  - System.Windows.DependencyObjectCollection`1.Insert(System.Int32,`0)
  - System.Windows.DependencyObjectCollection`1.IsReadOnly
  - System.Windows.DependencyObjectCollection`1.Item(System.Int32)
  - System.Windows.DependencyObjectCollection`1.Remove(`0)
  - System.Windows.DependencyObjectCollection`1.RemoveAt(System.Int32)
  - System.Windows.DependencyObjectCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Windows.DependencyObjectCollection`1.System#Collections#ICollection#IsSynchronized
  - System.Windows.DependencyObjectCollection`1.System#Collections#ICollection#SyncRoot
  - System.Windows.DependencyObjectCollection`1.System#Collections#IEnumerable#GetEnumerator
  - System.Windows.DependencyObjectCollection`1.System#Collections#IList#Add(System.Object)
  - System.Windows.DependencyObjectCollection`1.System#Collections#IList#Contains(System.Object)
  - System.Windows.DependencyObjectCollection`1.System#Collections#IList#IndexOf(System.Object)
  - System.Windows.DependencyObjectCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Windows.DependencyObjectCollection`1.System#Collections#IList#IsFixedSize
  - System.Windows.DependencyObjectCollection`1.System#Collections#IList#Item(System.Int32)
  - System.Windows.DependencyObjectCollection`1.System#Collections#IList#Remove(System.Object)
  langs:
  - csharp
  - vb
  name: DependencyObjectCollection<T>
  nameWithType: DependencyObjectCollection<T>
  fullName: System.Windows.DependencyObjectCollection<T>
  type: Class
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: DependencyObjectCollection
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 28
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nRepresents a collection of <xref href=\"System.Windows.DependencyObject\" data-throw-if-not-resolved=\"false\"></xref> instances of a specified\ntype.\n"
  example: []
  syntax:
    content: 'public class DependencyObjectCollection<T> : DependencyObject, IDependencyObject, IList<T>, ICollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable, INotifyCollectionChanged'
    typeParameters:
    - id: T
      description: "\nThe type of items in the collection.\n"
    content.vb: >-
      Public Class DependencyObjectCollection(Of T)
          Inherits DependencyObject
          Implements IDependencyObject, IList(Of T), ICollection(Of T), IEnumerable(Of T), IList, ICollection, IEnumerable, INotifyCollectionChanged
  inheritance:
  - System.Object
  - System.Windows.DependencyObject
  implements:
  - System.Collections.Generic.IList{{T}}
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  - System.Collections.Specialized.INotifyCollectionChanged
  inheritedMembers:
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.Dispatcher
  - System.Windows.DependencyObject.INTERNAL_OnAttachedToVisualTree
  - System.Windows.DependencyObject.INTERNAL_OnDetachedFromVisualTree
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CheckAccess
  - System.Windows.DependencyObject.GetAnimationBaseValue(System.Windows.DependencyProperty)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: DependencyObjectCollection(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Windows.DependencyObjectCollection(Of T)
  name.vb: DependencyObjectCollection(Of T)
- uid: System.Windows.DependencyObjectCollection`1.#ctor
  commentId: M:System.Windows.DependencyObjectCollection`1.#ctor
  id: '#ctor'
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: DependencyObjectCollection()
  nameWithType: DependencyObjectCollection<T>.DependencyObjectCollection()
  fullName: System.Windows.DependencyObjectCollection<T>.DependencyObjectCollection()
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 36
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nInitializes a new instance of the <xref href=\"System.Windows.DependencyObjectCollection%601\" data-throw-if-not-resolved=\"false\"></xref>\nclass.\n"
  example: []
  syntax:
    content: public DependencyObjectCollection()
    content.vb: Public Sub New
  overload: System.Windows.DependencyObjectCollection`1.#ctor*
  nameWithType.vb: DependencyObjectCollection(Of T).DependencyObjectCollection()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).DependencyObjectCollection()
- uid: System.Windows.DependencyObjectCollection`1.CollectionChanged
  commentId: E:System.Windows.DependencyObjectCollection`1.CollectionChanged
  id: CollectionChanged
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: CollectionChanged
  nameWithType: DependencyObjectCollection<T>.CollectionChanged
  fullName: System.Windows.DependencyObjectCollection<T>.CollectionChanged
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CollectionChanged
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 44
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nOccurs when items in the collection are added, removed, or replaced.\n"
  example: []
  syntax:
    content: public event NotifyCollectionChangedEventHandler CollectionChanged
    return:
      type: System.Collections.Specialized.NotifyCollectionChangedEventHandler
    content.vb: Public Event CollectionChanged As NotifyCollectionChangedEventHandler
  implements:
  - System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  nameWithType.vb: DependencyObjectCollection(Of T).CollectionChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).CollectionChanged
- uid: System.Windows.DependencyObjectCollection`1.Item(System.Int32)
  commentId: P:System.Windows.DependencyObjectCollection`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: DependencyObjectCollection<T>.Item[Int32]
  fullName: System.Windows.DependencyObjectCollection<T>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: this[]
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 68
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets the object at the specified index.\n"
  example: []
  syntax:
    content: public T this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "\nThe index of the object to get or set.\n"
    return:
      type: '{T}'
      description: "\nThe object at the specified index.\n"
    content.vb: Public Property Item(index As Integer) As T
  overload: System.Windows.DependencyObjectCollection`1.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\nindex is less than zero or greater than the number of items in the collection.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe specified value when setting this property is not a <xref href=\"System.Windows.DependencyObject\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe property is being set in a <xref href=\"System.Windows.DependencyObjectCollection%601.CollectionChanged\" data-throw-if-not-resolved=\"false\"></xref> event handler.\n"
  implements:
  - System.Collections.Generic.IList{{T}}.Item(System.Int32)
  nameWithType.vb: DependencyObjectCollection(Of T).Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Windows.DependencyObjectCollection`1.Count
  commentId: P:System.Windows.DependencyObjectCollection`1.Count
  id: Count
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: DependencyObjectCollection<T>.Count
  fullName: System.Windows.DependencyObjectCollection<T>.Count
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Count
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 77
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets the number of objects in the collection.\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: System.Windows.DependencyObjectCollection`1.Count*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Count
  - System.Collections.ICollection.Count
  nameWithType.vb: DependencyObjectCollection(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).Count
- uid: System.Windows.DependencyObjectCollection`1.IsReadOnly
  commentId: P:System.Windows.DependencyObjectCollection`1.IsReadOnly
  id: IsReadOnly
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: DependencyObjectCollection<T>.IsReadOnly
  fullName: System.Windows.DependencyObjectCollection<T>.IsReadOnly
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IsReadOnly
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 82
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets a value that indicates whether the collection can be modified.\n"
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: System.Windows.DependencyObjectCollection`1.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{{T}}.IsReadOnly
  - System.Collections.IList.IsReadOnly
  nameWithType.vb: DependencyObjectCollection(Of T).IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).IsReadOnly
- uid: System.Windows.DependencyObjectCollection`1.Add(`0)
  commentId: M:System.Windows.DependencyObjectCollection`1.Add(`0)
  id: Add(`0)
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: DependencyObjectCollection<T>.Add(T)
  fullName: System.Windows.DependencyObjectCollection<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Add
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 97
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nAdds the specified object to the end of the collection.\n"
  example: []
  syntax:
    content: public void Add(T item)
    parameters:
    - id: item
      type: '{T}'
      description: "\nThe object to add to the collection.\n"
    content.vb: Public Sub Add(item As T)
  overload: System.Windows.DependencyObjectCollection`1.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nitem is not a <xref href=\"System.Windows.DependencyObject\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe method is being called in a <xref href=\"System.Windows.DependencyObjectCollection%601.CollectionChanged\" data-throw-if-not-resolved=\"false\"></xref> \nevent handler.\n"
  implements:
  - System.Collections.Generic.ICollection{{T}}.Add({T})
  nameWithType.vb: DependencyObjectCollection(Of T).Add(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).Add(T)
- uid: System.Windows.DependencyObjectCollection`1.Clear
  commentId: M:System.Windows.DependencyObjectCollection`1.Clear
  id: Clear
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: DependencyObjectCollection<T>.Clear()
  fullName: System.Windows.DependencyObjectCollection<T>.Clear()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Clear
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 106
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nRemoves all objects from the collection.\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: System.Windows.DependencyObjectCollection`1.Clear*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe method is being called in a <xref href=\"System.Windows.DependencyObjectCollection%601.CollectionChanged\" data-throw-if-not-resolved=\"false\"></xref> \nevent handler. \n"
  implements:
  - System.Collections.Generic.ICollection{{T}}.Clear
  - System.Collections.IList.Clear
  nameWithType.vb: DependencyObjectCollection(Of T).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).Clear()
- uid: System.Windows.DependencyObjectCollection`1.Contains(`0)
  commentId: M:System.Windows.DependencyObjectCollection`1.Contains(`0)
  id: Contains(`0)
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: DependencyObjectCollection<T>.Contains(T)
  fullName: System.Windows.DependencyObjectCollection<T>.Contains(T)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Contains
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 120
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets a value that indicates whether the specified object is in the collection.\n"
  example: []
  syntax:
    content: public bool Contains(T item)
    parameters:
    - id: item
      type: '{T}'
      description: "\nThe object to check for in the collection.\n"
    return:
      type: System.Boolean
      description: "\ntrue if the object is in the collection; otherwise, false.\n"
    content.vb: Public Function Contains(item As T) As Boolean
  overload: System.Windows.DependencyObjectCollection`1.Contains*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nitem is not a <xref href=\"System.Windows.DependencyObject\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  implements:
  - System.Collections.Generic.ICollection{{T}}.Contains({T})
  nameWithType.vb: DependencyObjectCollection(Of T).Contains(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).Contains(T)
- uid: System.Windows.DependencyObjectCollection`1.GetEnumerator
  commentId: M:System.Windows.DependencyObjectCollection`1.GetEnumerator
  id: GetEnumerator
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: DependencyObjectCollection<T>.GetEnumerator()
  fullName: System.Windows.DependencyObjectCollection<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetEnumerator
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 128
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets an enumerator that iterates through the collection.\n"
  example: []
  syntax:
    content: public IEnumerator<T> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
      description: "\nAn enumerator for the collection.\n"
    content.vb: Public Function GetEnumerator As IEnumerator(Of T)
  overload: System.Windows.DependencyObjectCollection`1.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  nameWithType.vb: DependencyObjectCollection(Of T).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).GetEnumerator()
- uid: System.Windows.DependencyObjectCollection`1.IndexOf(`0)
  commentId: M:System.Windows.DependencyObjectCollection`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: IndexOf(T)
  nameWithType: DependencyObjectCollection<T>.IndexOf(T)
  fullName: System.Windows.DependencyObjectCollection<T>.IndexOf(T)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IndexOf
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 144
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets the index of the specified object within the collection, or -1 if the object\nis not in the collection.\n"
  example: []
  syntax:
    content: public int IndexOf(T item)
    parameters:
    - id: item
      type: '{T}'
      description: "\nThe object to locate in the collection.\n"
    return:
      type: System.Int32
      description: "\nThe index of the first occurrence of item within the collection, or -1 if item\nis not in the collection.\n"
    content.vb: Public Function IndexOf(item As T) As Integer
  overload: System.Windows.DependencyObjectCollection`1.IndexOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nitem is not a <xref href=\"System.Windows.DependencyObject\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  implements:
  - System.Collections.Generic.IList{{T}}.IndexOf({T})
  nameWithType.vb: DependencyObjectCollection(Of T).IndexOf(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).IndexOf(T)
- uid: System.Windows.DependencyObjectCollection`1.Insert(System.Int32,`0)
  commentId: M:System.Windows.DependencyObjectCollection`1.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: Insert(Int32, T)
  nameWithType: DependencyObjectCollection<T>.Insert(Int32, T)
  fullName: System.Windows.DependencyObjectCollection<T>.Insert(System.Int32, T)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Insert
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 164
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nAdds the specified object to the collection at the specified index.\n"
  example: []
  syntax:
    content: public void Insert(int index, T item)
    parameters:
    - id: index
      type: System.Int32
      description: "\nThe index at which to add the object.\n"
    - id: item
      type: '{T}'
      description: "\nThe object to add.\n"
    content.vb: Public Sub Insert(index As Integer, item As T)
  overload: System.Windows.DependencyObjectCollection`1.Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\nindex is less than zero or greater than the number of items in the collection.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nitem is not a <xref href=\"System.Windows.DependencyObject\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe method is being called in a <xref href=\"System.Windows.DependencyObjectCollection%601.CollectionChanged\" data-throw-if-not-resolved=\"false\"></xref> event handler.\n"
  implements:
  - System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})
  nameWithType.vb: DependencyObjectCollection(Of T).Insert(Int32, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).Insert(System.Int32, T)
- uid: System.Windows.DependencyObjectCollection`1.Remove(`0)
  commentId: M:System.Windows.DependencyObjectCollection`1.Remove(`0)
  id: Remove(`0)
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: DependencyObjectCollection<T>.Remove(T)
  fullName: System.Windows.DependencyObjectCollection<T>.Remove(T)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Remove
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 181
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nRemoves the specified object from the collection.\n"
  example: []
  syntax:
    content: public bool Remove(T item)
    parameters:
    - id: item
      type: '{T}'
      description: "\nThe object to remove.\n"
    return:
      type: System.Boolean
      description: "\ntrue if the object was removed; false if the object was not found in the collection.\n"
    content.vb: Public Function Remove(item As T) As Boolean
  overload: System.Windows.DependencyObjectCollection`1.Remove*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nitem is not a <xref href=\"System.Windows.DependencyObject\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe method is being called in a <xref href=\"System.Windows.DependencyObjectCollection%601.CollectionChanged\" data-throw-if-not-resolved=\"false\"></xref> event handler.\n"
  implements:
  - System.Collections.Generic.ICollection{{T}}.Remove({T})
  nameWithType.vb: DependencyObjectCollection(Of T).Remove(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).Remove(T)
- uid: System.Windows.DependencyObjectCollection`1.RemoveAt(System.Int32)
  commentId: M:System.Windows.DependencyObjectCollection`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: DependencyObjectCollection<T>.RemoveAt(Int32)
  fullName: System.Windows.DependencyObjectCollection<T>.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: RemoveAt
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 195
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nRemoves the object at the specified index from the collection.\n"
  example: []
  syntax:
    content: public void RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
      description: "\nThe index of the object to remove.\n"
    content.vb: Public Sub RemoveAt(index As Integer)
  overload: System.Windows.DependencyObjectCollection`1.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\nindex is less than zero or greater than the highest index in the collection.\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe method is being called in a <xref href=\"System.Windows.DependencyObjectCollection%601.CollectionChanged\" data-throw-if-not-resolved=\"false\"></xref> event handler.\n"
  implements:
  - System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)
  - System.Collections.IList.RemoveAt(System.Int32)
  nameWithType.vb: DependencyObjectCollection(Of T).RemoveAt(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).RemoveAt(System.Int32)
- uid: System.Windows.DependencyObjectCollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Windows.DependencyObjectCollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  nameWithType: DependencyObjectCollection<T>.CopyTo(T[], Int32)
  fullName: System.Windows.DependencyObjectCollection<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CopyTo
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 207
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nCopies the objects in the collection to the specified array, starting at the\nspecified index.\n"
  example: []
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex)
    parameters:
    - id: array
      type: '{T}[]'
      description: "\nThe destination array.\n"
    - id: arrayIndex
      type: System.Int32
      description: "\nThe index of the first object to copy.\n"
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer)
  overload: System.Windows.DependencyObjectCollection`1.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  nameWithType.vb: DependencyObjectCollection(Of T).CopyTo(T(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: System.Windows.DependencyObjectCollection`1.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Windows.DependencyObjectCollection`1.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: IList.Item[Int32]
  nameWithType: DependencyObjectCollection<T>.IList.Item[Int32]
  fullName: System.Windows.DependencyObjectCollection<T>.System.Collections.IList.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.IList.this[]
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 209
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: object IList.this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Object
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this[]
  overload: System.Windows.DependencyObjectCollection`1.System#Collections#IList#Item*
  implements:
  - System.Collections.IList.Item(System.Int32)
  nameWithType.vb: DependencyObjectCollection(Of T).System.Collections.IList.Item(Int32)
  modifiers.csharp:
  - get
  - set
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
- uid: System.Windows.DependencyObjectCollection`1.System#Collections#IList#IsFixedSize
  commentId: P:System.Windows.DependencyObjectCollection`1.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: IList.IsFixedSize
  nameWithType: DependencyObjectCollection<T>.IList.IsFixedSize
  fullName: System.Windows.DependencyObjectCollection<T>.System.Collections.IList.IsFixedSize
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.IList.IsFixedSize
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 215
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: bool IList.IsFixedSize { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsFixedSize As Boolean Implements IList.IsFixedSize
  overload: System.Windows.DependencyObjectCollection`1.System#Collections#IList#IsFixedSize*
  implements:
  - System.Collections.IList.IsFixedSize
  nameWithType.vb: DependencyObjectCollection(Of T).System.Collections.IList.IsFixedSize
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Windows.DependencyObjectCollection`1.System#Collections#ICollection#SyncRoot
  commentId: P:System.Windows.DependencyObjectCollection`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: ICollection.SyncRoot
  nameWithType: DependencyObjectCollection<T>.ICollection.SyncRoot
  fullName: System.Windows.DependencyObjectCollection<T>.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.ICollection.SyncRoot
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 217
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: object ICollection.SyncRoot { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
  overload: System.Windows.DependencyObjectCollection`1.System#Collections#ICollection#SyncRoot*
  implements:
  - System.Collections.ICollection.SyncRoot
  nameWithType.vb: DependencyObjectCollection(Of T).System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Windows.DependencyObjectCollection`1.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Windows.DependencyObjectCollection`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: ICollection.IsSynchronized
  nameWithType: DependencyObjectCollection<T>.ICollection.IsSynchronized
  fullName: System.Windows.DependencyObjectCollection<T>.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.ICollection.IsSynchronized
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 219
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
  overload: System.Windows.DependencyObjectCollection`1.System#Collections#ICollection#IsSynchronized*
  implements:
  - System.Collections.ICollection.IsSynchronized
  nameWithType.vb: DependencyObjectCollection(Of T).System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Windows.DependencyObjectCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Windows.DependencyObjectCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: DependencyObjectCollection<T>.ICollection.CopyTo(Array, Int32)
  fullName: System.Windows.DependencyObjectCollection<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.ICollection.CopyTo
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 221
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: void ICollection.CopyTo(Array array, int arrayIndex)
    parameters:
    - id: array
      type: System.Array
    - id: arrayIndex
      type: System.Int32
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, arrayIndex As Integer) Implements ICollection.CopyTo
  overload: System.Windows.DependencyObjectCollection`1.System#Collections#ICollection#CopyTo*
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  nameWithType.vb: DependencyObjectCollection(Of T).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
- uid: System.Windows.DependencyObjectCollection`1.System#Collections#IList#Add(System.Object)
  commentId: M:System.Windows.DependencyObjectCollection`1.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: IList.Add(Object)
  nameWithType: DependencyObjectCollection<T>.IList.Add(Object)
  fullName: System.Windows.DependencyObjectCollection<T>.System.Collections.IList.Add(System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.IList.Add
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 223
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: int IList.Add(object item)
    parameters:
    - id: item
      type: System.Object
    return:
      type: System.Int32
    content.vb: Function System.Collections.IList.Add(item As Object) As Integer Implements IList.Add
  overload: System.Windows.DependencyObjectCollection`1.System#Collections#IList#Add*
  implements:
  - System.Collections.IList.Add(System.Object)
  nameWithType.vb: DependencyObjectCollection(Of T).System.Collections.IList.Add(Object)
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
- uid: System.Windows.DependencyObjectCollection`1.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Windows.DependencyObjectCollection`1.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: IList.Contains(Object)
  nameWithType: DependencyObjectCollection<T>.IList.Contains(Object)
  fullName: System.Windows.DependencyObjectCollection<T>.System.Collections.IList.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.IList.Contains
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 229
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: bool IList.Contains(object item)
    parameters:
    - id: item
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Function System.Collections.IList.Contains(item As Object) As Boolean Implements IList.Contains
  overload: System.Windows.DependencyObjectCollection`1.System#Collections#IList#Contains*
  implements:
  - System.Collections.IList.Contains(System.Object)
  nameWithType.vb: DependencyObjectCollection(Of T).System.Collections.IList.Contains(Object)
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
- uid: System.Windows.DependencyObjectCollection`1.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Windows.DependencyObjectCollection`1.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: IList.IndexOf(Object)
  nameWithType: DependencyObjectCollection<T>.IList.IndexOf(Object)
  fullName: System.Windows.DependencyObjectCollection<T>.System.Collections.IList.IndexOf(System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.IList.IndexOf
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 231
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: int IList.IndexOf(object value)
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Int32
    content.vb: Function System.Collections.IList.IndexOf(value As Object) As Integer Implements IList.IndexOf
  overload: System.Windows.DependencyObjectCollection`1.System#Collections#IList#IndexOf*
  implements:
  - System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: DependencyObjectCollection(Of T).System.Collections.IList.IndexOf(Object)
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
- uid: System.Windows.DependencyObjectCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Windows.DependencyObjectCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: IList.Insert(Int32, Object)
  nameWithType: DependencyObjectCollection<T>.IList.Insert(Int32, Object)
  fullName: System.Windows.DependencyObjectCollection<T>.System.Collections.IList.Insert(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.IList.Insert
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 233
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: void IList.Insert(int index, object value)
    parameters:
    - id: index
      type: System.Int32
    - id: value
      type: System.Object
    content.vb: Sub System.Collections.IList.Insert(index As Integer, value As Object) Implements IList.Insert
  overload: System.Windows.DependencyObjectCollection`1.System#Collections#IList#Insert*
  implements:
  - System.Collections.IList.Insert(System.Int32,System.Object)
  nameWithType.vb: DependencyObjectCollection(Of T).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
- uid: System.Windows.DependencyObjectCollection`1.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Windows.DependencyObjectCollection`1.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: IList.Remove(Object)
  nameWithType: DependencyObjectCollection<T>.IList.Remove(Object)
  fullName: System.Windows.DependencyObjectCollection<T>.System.Collections.IList.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.IList.Remove
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 235
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: void IList.Remove(object value)
    parameters:
    - id: value
      type: System.Object
    content.vb: Sub System.Collections.IList.Remove(value As Object) Implements IList.Remove
  overload: System.Windows.DependencyObjectCollection`1.System#Collections#IList#Remove*
  implements:
  - System.Collections.IList.Remove(System.Object)
  nameWithType.vb: DependencyObjectCollection(Of T).System.Collections.IList.Remove(Object)
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
- uid: System.Windows.DependencyObjectCollection`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Windows.DependencyObjectCollection`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Windows.DependencyObjectCollection`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: DependencyObjectCollection<T>.IEnumerable.GetEnumerator()
  fullName: System.Windows.DependencyObjectCollection<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/DependencyObjectCollection_1.cs
    startLine: 237
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: System.Windows.DependencyObjectCollection`1.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: DependencyObjectCollection(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: System.Windows.DependencyObject
  commentId: T:System.Windows.DependencyObject
  parent: System.Windows
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows
  commentId: N:System.Windows
  name: System.Windows
  nameWithType: System.Windows
  fullName: System.Windows
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Specialized.INotifyCollectionChanged
  commentId: T:System.Collections.Specialized.INotifyCollectionChanged
  parent: System.Collections.Specialized
  isExternal: true
  name: INotifyCollectionChanged
  nameWithType: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  commentId: M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  name: GetValue(DependencyProperty)
  nameWithType: DependencyObject.GetValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  spec.csharp:
  - uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
    name: GetValue
    nameWithType: DependencyObject.GetValue
    fullName: System.Windows.DependencyObject.GetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
    name: GetValue
    nameWithType: DependencyObject.GetValue
    fullName: System.Windows.DependencyObject.GetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  commentId: M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: true
  name: SetCurrentValue(DependencyProperty, Object)
  nameWithType: DependencyObject.SetCurrentValue(DependencyProperty, Object)
  fullName: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty, System.Object)
  spec.csharp:
  - uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
    name: SetCurrentValue
    nameWithType: DependencyObject.SetCurrentValue
    fullName: System.Windows.DependencyObject.SetCurrentValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
    name: SetCurrentValue
    nameWithType: DependencyObject.SetCurrentValue
    fullName: System.Windows.DependencyObject.SetCurrentValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  commentId: M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  name: ReadLocalValue(DependencyProperty)
  nameWithType: DependencyObject.ReadLocalValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  spec.csharp:
  - uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
    name: ReadLocalValue
    nameWithType: DependencyObject.ReadLocalValue
    fullName: System.Windows.DependencyObject.ReadLocalValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
    name: ReadLocalValue
    nameWithType: DependencyObject.ReadLocalValue
    fullName: System.Windows.DependencyObject.ReadLocalValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  commentId: M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: true
  name: SetValue(DependencyProperty, Object)
  nameWithType: DependencyObject.SetValue(DependencyProperty, Object)
  fullName: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty, System.Object)
  spec.csharp:
  - uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
    name: SetValue
    nameWithType: DependencyObject.SetValue
    fullName: System.Windows.DependencyObject.SetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
    name: SetValue
    nameWithType: DependencyObject.SetValue
    fullName: System.Windows.DependencyObject.SetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  commentId: M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: true
  name: SetValue(DependencyPropertyKey, Object)
  nameWithType: DependencyObject.SetValue(DependencyPropertyKey, Object)
  fullName: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey, System.Object)
  spec.csharp:
  - uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
    name: SetValue
    nameWithType: DependencyObject.SetValue
    fullName: System.Windows.DependencyObject.SetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyPropertyKey
    name: DependencyPropertyKey
    nameWithType: DependencyPropertyKey
    fullName: System.Windows.DependencyPropertyKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
    name: SetValue
    nameWithType: DependencyObject.SetValue
    fullName: System.Windows.DependencyObject.SetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyPropertyKey
    name: DependencyPropertyKey
    nameWithType: DependencyPropertyKey
    fullName: System.Windows.DependencyPropertyKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  commentId: M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.DependencyObject
  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)
  nameWithType: DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  spec.csharp:
  - uid: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
    name: OnPropertyChanged
    nameWithType: DependencyObject.OnPropertyChanged
    fullName: System.Windows.DependencyObject.OnPropertyChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyPropertyChangedEventArgs
    name: DependencyPropertyChangedEventArgs
    nameWithType: DependencyPropertyChangedEventArgs
    fullName: System.Windows.DependencyPropertyChangedEventArgs
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
    name: OnPropertyChanged
    nameWithType: DependencyObject.OnPropertyChanged
    fullName: System.Windows.DependencyObject.OnPropertyChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyPropertyChangedEventArgs
    name: DependencyPropertyChangedEventArgs
    nameWithType: DependencyPropertyChangedEventArgs
    fullName: System.Windows.DependencyPropertyChangedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  commentId: M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  name: CoerceValue(DependencyProperty)
  nameWithType: DependencyObject.CoerceValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  spec.csharp:
  - uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
    name: CoerceValue
    nameWithType: DependencyObject.CoerceValue
    fullName: System.Windows.DependencyObject.CoerceValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
    name: CoerceValue
    nameWithType: DependencyObject.CoerceValue
    fullName: System.Windows.DependencyObject.CoerceValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObject.Dispatcher
  commentId: P:System.Windows.DependencyObject.Dispatcher
  parent: System.Windows.DependencyObject
  name: Dispatcher
  nameWithType: DependencyObject.Dispatcher
  fullName: System.Windows.DependencyObject.Dispatcher
- uid: System.Windows.DependencyObject.INTERNAL_OnAttachedToVisualTree
  commentId: M:System.Windows.DependencyObject.INTERNAL_OnAttachedToVisualTree
  parent: System.Windows.DependencyObject
  name: INTERNAL_OnAttachedToVisualTree()
  nameWithType: DependencyObject.INTERNAL_OnAttachedToVisualTree()
  fullName: System.Windows.DependencyObject.INTERNAL_OnAttachedToVisualTree()
  spec.csharp:
  - uid: System.Windows.DependencyObject.INTERNAL_OnAttachedToVisualTree
    name: INTERNAL_OnAttachedToVisualTree
    nameWithType: DependencyObject.INTERNAL_OnAttachedToVisualTree
    fullName: System.Windows.DependencyObject.INTERNAL_OnAttachedToVisualTree
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.INTERNAL_OnAttachedToVisualTree
    name: INTERNAL_OnAttachedToVisualTree
    nameWithType: DependencyObject.INTERNAL_OnAttachedToVisualTree
    fullName: System.Windows.DependencyObject.INTERNAL_OnAttachedToVisualTree
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObject.INTERNAL_OnDetachedFromVisualTree
  commentId: M:System.Windows.DependencyObject.INTERNAL_OnDetachedFromVisualTree
  parent: System.Windows.DependencyObject
  name: INTERNAL_OnDetachedFromVisualTree()
  nameWithType: DependencyObject.INTERNAL_OnDetachedFromVisualTree()
  fullName: System.Windows.DependencyObject.INTERNAL_OnDetachedFromVisualTree()
  spec.csharp:
  - uid: System.Windows.DependencyObject.INTERNAL_OnDetachedFromVisualTree
    name: INTERNAL_OnDetachedFromVisualTree
    nameWithType: DependencyObject.INTERNAL_OnDetachedFromVisualTree
    fullName: System.Windows.DependencyObject.INTERNAL_OnDetachedFromVisualTree
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.INTERNAL_OnDetachedFromVisualTree
    name: INTERNAL_OnDetachedFromVisualTree
    nameWithType: DependencyObject.INTERNAL_OnDetachedFromVisualTree
    fullName: System.Windows.DependencyObject.INTERNAL_OnDetachedFromVisualTree
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  commentId: M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  name: ClearValue(DependencyProperty)
  nameWithType: DependencyObject.ClearValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  spec.csharp:
  - uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
    name: ClearValue
    nameWithType: DependencyObject.ClearValue
    fullName: System.Windows.DependencyObject.ClearValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
    name: ClearValue
    nameWithType: DependencyObject.ClearValue
    fullName: System.Windows.DependencyObject.ClearValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  commentId: M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  parent: System.Windows.DependencyObject
  name: ClearValue(DependencyPropertyKey)
  nameWithType: DependencyObject.ClearValue(DependencyPropertyKey)
  fullName: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  spec.csharp:
  - uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
    name: ClearValue
    nameWithType: DependencyObject.ClearValue
    fullName: System.Windows.DependencyObject.ClearValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyPropertyKey
    name: DependencyPropertyKey
    nameWithType: DependencyPropertyKey
    fullName: System.Windows.DependencyPropertyKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
    name: ClearValue
    nameWithType: DependencyObject.ClearValue
    fullName: System.Windows.DependencyObject.ClearValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyPropertyKey
    name: DependencyPropertyKey
    nameWithType: DependencyPropertyKey
    fullName: System.Windows.DependencyPropertyKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObject.CheckAccess
  commentId: M:System.Windows.DependencyObject.CheckAccess
  parent: System.Windows.DependencyObject
  name: CheckAccess()
  nameWithType: DependencyObject.CheckAccess()
  fullName: System.Windows.DependencyObject.CheckAccess()
  spec.csharp:
  - uid: System.Windows.DependencyObject.CheckAccess
    name: CheckAccess
    nameWithType: DependencyObject.CheckAccess
    fullName: System.Windows.DependencyObject.CheckAccess
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.CheckAccess
    name: CheckAccess
    nameWithType: DependencyObject.CheckAccess
    fullName: System.Windows.DependencyObject.CheckAccess
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObject.GetAnimationBaseValue(System.Windows.DependencyProperty)
  commentId: M:System.Windows.DependencyObject.GetAnimationBaseValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  name: GetAnimationBaseValue(DependencyProperty)
  nameWithType: DependencyObject.GetAnimationBaseValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.GetAnimationBaseValue(System.Windows.DependencyProperty)
  spec.csharp:
  - uid: System.Windows.DependencyObject.GetAnimationBaseValue(System.Windows.DependencyProperty)
    name: GetAnimationBaseValue
    nameWithType: DependencyObject.GetAnimationBaseValue
    fullName: System.Windows.DependencyObject.GetAnimationBaseValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.DependencyObject.GetAnimationBaseValue(System.Windows.DependencyProperty)
    name: GetAnimationBaseValue
    nameWithType: DependencyObject.GetAnimationBaseValue
    fullName: System.Windows.DependencyObject.GetAnimationBaseValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.DependencyProperty
    name: DependencyProperty
    nameWithType: DependencyProperty
    fullName: System.Windows.DependencyProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
  isExternal: true
  name: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: System.Windows.DependencyObjectCollection`1
  commentId: T:System.Windows.DependencyObjectCollection`1
  name: DependencyObjectCollection<T>
  nameWithType: DependencyObjectCollection<T>
  fullName: System.Windows.DependencyObjectCollection<T>
  nameWithType.vb: DependencyObjectCollection(Of T)
  fullName.vb: System.Windows.DependencyObjectCollection(Of T)
  name.vb: DependencyObjectCollection(Of T)
  spec.csharp:
  - uid: System.Windows.DependencyObjectCollection`1
    name: DependencyObjectCollection
    nameWithType: DependencyObjectCollection
    fullName: System.Windows.DependencyObjectCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Windows.DependencyObjectCollection`1
    name: DependencyObjectCollection
    nameWithType: DependencyObjectCollection
    fullName: System.Windows.DependencyObjectCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObjectCollection`1.#ctor*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.#ctor
  name: DependencyObjectCollection
  nameWithType: DependencyObjectCollection<T>.DependencyObjectCollection
  fullName: System.Windows.DependencyObjectCollection<T>.DependencyObjectCollection
  nameWithType.vb: DependencyObjectCollection(Of T).DependencyObjectCollection
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).DependencyObjectCollection
- uid: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  commentId: E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  parent: System.Collections.Specialized.INotifyCollectionChanged
  isExternal: true
  name: CollectionChanged
  nameWithType: INotifyCollectionChanged.CollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
- uid: System.Collections.Specialized.NotifyCollectionChangedEventHandler
  commentId: T:System.Collections.Specialized.NotifyCollectionChangedEventHandler
  parent: System.Collections.Specialized
  isExternal: true
  name: NotifyCollectionChangedEventHandler
  nameWithType: NotifyCollectionChangedEventHandler
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventHandler
- uid: System.Windows.DependencyObjectCollection`1.CollectionChanged
  commentId: E:System.Windows.DependencyObjectCollection`1.CollectionChanged
  isExternal: true
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: System.Windows.DependencyObjectCollection`1.Item*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.Item
  name: Item
  nameWithType: DependencyObjectCollection<T>.Item
  fullName: System.Windows.DependencyObjectCollection<T>.Item
  nameWithType.vb: DependencyObjectCollection(Of T).Item
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).Item
- uid: System.Collections.Generic.IList{{T}}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList{`0}.Item(System.Int32)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Windows.DependencyObjectCollection`1.Count*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.Count
  name: Count
  nameWithType: DependencyObjectCollection<T>.Count
  fullName: System.Windows.DependencyObjectCollection<T>.Count
  nameWithType.vb: DependencyObjectCollection(Of T).Count
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).Count
- uid: System.Collections.Generic.ICollection{{T}}.Count
  commentId: P:System.Collections.Generic.ICollection{`0}.Count
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.ICollection.Count
  commentId: P:System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: true
  name: Count
  nameWithType: ICollection.Count
  fullName: System.Collections.ICollection.Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Windows.DependencyObjectCollection`1.IsReadOnly*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: DependencyObjectCollection<T>.IsReadOnly
  fullName: System.Windows.DependencyObjectCollection<T>.IsReadOnly
  nameWithType.vb: DependencyObjectCollection(Of T).IsReadOnly
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).IsReadOnly
- uid: System.Collections.Generic.ICollection{{T}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{`0}.IsReadOnly
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.IList.IsReadOnly
  commentId: P:System.Collections.IList.IsReadOnly
  parent: System.Collections.IList
  isExternal: true
  name: IsReadOnly
  nameWithType: IList.IsReadOnly
  fullName: System.Collections.IList.IsReadOnly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.Windows.DependencyObjectCollection`1.Add*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.Add
  name: Add
  nameWithType: DependencyObjectCollection<T>.Add
  fullName: System.Windows.DependencyObjectCollection<T>.Add
  nameWithType.vb: DependencyObjectCollection(Of T).Add
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).Add
- uid: System.Collections.Generic.ICollection{{T}}.Add({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Add(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObjectCollection`1.Clear*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.Clear
  name: Clear
  nameWithType: DependencyObjectCollection<T>.Clear
  fullName: System.Windows.DependencyObjectCollection<T>.Clear
  nameWithType.vb: DependencyObjectCollection(Of T).Clear
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).Clear
- uid: System.Collections.Generic.ICollection{{T}}.Clear
  commentId: M:System.Collections.Generic.ICollection{`0}.Clear
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.Clear
  commentId: M:System.Collections.IList.Clear
  parent: System.Collections.IList
  isExternal: true
  name: Clear()
  nameWithType: IList.Clear()
  fullName: System.Collections.IList.Clear()
  spec.csharp:
  - uid: System.Collections.IList.Clear
    name: Clear
    nameWithType: IList.Clear
    fullName: System.Collections.IList.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Clear
    name: Clear
    nameWithType: IList.Clear
    fullName: System.Collections.IList.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObjectCollection`1.Contains*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.Contains
  name: Contains
  nameWithType: DependencyObjectCollection<T>.Contains
  fullName: System.Windows.DependencyObjectCollection<T>.Contains
  nameWithType.vb: DependencyObjectCollection(Of T).Contains
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).Contains
- uid: System.Collections.Generic.ICollection{{T}}.Contains({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Contains(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObjectCollection`1.GetEnumerator*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.GetEnumerator
  name: GetEnumerator
  nameWithType: DependencyObjectCollection<T>.GetEnumerator
  fullName: System.Windows.DependencyObjectCollection<T>.GetEnumerator
  nameWithType.vb: DependencyObjectCollection(Of T).GetEnumerator
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObjectCollection`1.IndexOf*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.IndexOf
  name: IndexOf
  nameWithType: DependencyObjectCollection<T>.IndexOf
  fullName: System.Windows.DependencyObjectCollection<T>.IndexOf
  nameWithType.vb: DependencyObjectCollection(Of T).IndexOf
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).IndexOf
- uid: System.Collections.Generic.IList{{T}}.IndexOf({T})
  commentId: M:System.Collections.Generic.IList{`0}.IndexOf(`0)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObjectCollection`1.Insert*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.Insert
  name: Insert
  nameWithType: DependencyObjectCollection<T>.Insert
  fullName: System.Windows.DependencyObjectCollection<T>.Insert
  nameWithType.vb: DependencyObjectCollection(Of T).Insert
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).Insert
- uid: System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})
  commentId: M:System.Collections.Generic.IList{`0}.Insert(System.Int32,`0)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObjectCollection`1.Remove*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.Remove
  name: Remove
  nameWithType: DependencyObjectCollection<T>.Remove
  fullName: System.Windows.DependencyObjectCollection<T>.Remove
  nameWithType.vb: DependencyObjectCollection(Of T).Remove
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).Remove
- uid: System.Collections.Generic.ICollection{{T}}.Remove({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Remove(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObjectCollection`1.RemoveAt*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.RemoveAt
  name: RemoveAt
  nameWithType: DependencyObjectCollection<T>.RemoveAt
  fullName: System.Windows.DependencyObjectCollection<T>.RemoveAt
  nameWithType.vb: DependencyObjectCollection(Of T).RemoveAt
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).RemoveAt
- uid: System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList{`0}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.RemoveAt(System.Int32)
  commentId: M:System.Collections.IList.RemoveAt(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList.RemoveAt(Int32)
  fullName: System.Collections.IList.RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList.RemoveAt
    fullName: System.Collections.IList.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList.RemoveAt
    fullName: System.Collections.IList.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObjectCollection`1.CopyTo*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.CopyTo
  name: CopyTo
  nameWithType: DependencyObjectCollection<T>.CopyTo
  fullName: System.Windows.DependencyObjectCollection<T>.CopyTo
  nameWithType.vb: DependencyObjectCollection(Of T).CopyTo
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).CopyTo
- uid: System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObjectCollection`1.System#Collections#IList#Item*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.System#Collections#IList#Item
  name: IList.Item
  nameWithType: DependencyObjectCollection<T>.IList.Item
  fullName: System.Windows.DependencyObjectCollection<T>.System.Collections.IList.Item
  nameWithType.vb: DependencyObjectCollection(Of T).System.Collections.IList.Item
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).System.Collections.IList.Item
  name.vb: System.Collections.IList.Item
- uid: System.Collections.IList.Item(System.Int32)
  commentId: P:System.Collections.IList.Item(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: Item[Int32]
  nameWithType: IList.Item[Int32]
  fullName: System.Collections.IList.Item[System.Int32]
  nameWithType.vb: IList.Item(Int32)
  fullName.vb: System.Collections.IList.Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    nameWithType: IList.Item
    fullName: System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    nameWithType: IList.Item
    fullName: System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObjectCollection`1.System#Collections#IList#IsFixedSize*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.System#Collections#IList#IsFixedSize
  name: IList.IsFixedSize
  nameWithType: DependencyObjectCollection<T>.IList.IsFixedSize
  fullName: System.Windows.DependencyObjectCollection<T>.System.Collections.IList.IsFixedSize
  nameWithType.vb: DependencyObjectCollection(Of T).System.Collections.IList.IsFixedSize
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.IList.IsFixedSize
  commentId: P:System.Collections.IList.IsFixedSize
  parent: System.Collections.IList
  isExternal: true
  name: IsFixedSize
  nameWithType: IList.IsFixedSize
  fullName: System.Collections.IList.IsFixedSize
- uid: System.Windows.DependencyObjectCollection`1.System#Collections#ICollection#SyncRoot*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.System#Collections#ICollection#SyncRoot
  name: ICollection.SyncRoot
  nameWithType: DependencyObjectCollection<T>.ICollection.SyncRoot
  fullName: System.Windows.DependencyObjectCollection<T>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: DependencyObjectCollection(Of T).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.ICollection.SyncRoot
  commentId: P:System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: true
  name: SyncRoot
  nameWithType: ICollection.SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: System.Windows.DependencyObjectCollection`1.System#Collections#ICollection#IsSynchronized*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.System#Collections#ICollection#IsSynchronized
  name: ICollection.IsSynchronized
  nameWithType: DependencyObjectCollection<T>.ICollection.IsSynchronized
  fullName: System.Windows.DependencyObjectCollection<T>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: DependencyObjectCollection(Of T).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.ICollection.IsSynchronized
  commentId: P:System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: true
  name: IsSynchronized
  nameWithType: ICollection.IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Windows.DependencyObjectCollection`1.System#Collections#ICollection#CopyTo*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.System#Collections#ICollection#CopyTo
  name: ICollection.CopyTo
  nameWithType: DependencyObjectCollection<T>.ICollection.CopyTo
  fullName: System.Windows.DependencyObjectCollection<T>.System.Collections.ICollection.CopyTo
  nameWithType.vb: DependencyObjectCollection(Of T).System.Collections.ICollection.CopyTo
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).System.Collections.ICollection.CopyTo
  name.vb: System.Collections.ICollection.CopyTo
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  nameWithType: ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Array
  commentId: T:System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Windows.DependencyObjectCollection`1.System#Collections#IList#Add*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.System#Collections#IList#Add
  name: IList.Add
  nameWithType: DependencyObjectCollection<T>.IList.Add
  fullName: System.Windows.DependencyObjectCollection<T>.System.Collections.IList.Add
  nameWithType.vb: DependencyObjectCollection(Of T).System.Collections.IList.Add
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).System.Collections.IList.Add
  name.vb: System.Collections.IList.Add
- uid: System.Collections.IList.Add(System.Object)
  commentId: M:System.Collections.IList.Add(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Add(Object)
  nameWithType: IList.Add(Object)
  fullName: System.Collections.IList.Add(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    nameWithType: IList.Add
    fullName: System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    nameWithType: IList.Add
    fullName: System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObjectCollection`1.System#Collections#IList#Contains*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.System#Collections#IList#Contains
  name: IList.Contains
  nameWithType: DependencyObjectCollection<T>.IList.Contains
  fullName: System.Windows.DependencyObjectCollection<T>.System.Collections.IList.Contains
  nameWithType.vb: DependencyObjectCollection(Of T).System.Collections.IList.Contains
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).System.Collections.IList.Contains
  name.vb: System.Collections.IList.Contains
- uid: System.Collections.IList.Contains(System.Object)
  commentId: M:System.Collections.IList.Contains(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Contains(Object)
  nameWithType: IList.Contains(Object)
  fullName: System.Collections.IList.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    nameWithType: IList.Contains
    fullName: System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    nameWithType: IList.Contains
    fullName: System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObjectCollection`1.System#Collections#IList#IndexOf*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.System#Collections#IList#IndexOf
  name: IList.IndexOf
  nameWithType: DependencyObjectCollection<T>.IList.IndexOf
  fullName: System.Windows.DependencyObjectCollection<T>.System.Collections.IList.IndexOf
  nameWithType.vb: DependencyObjectCollection(Of T).System.Collections.IList.IndexOf
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).System.Collections.IList.IndexOf
  name.vb: System.Collections.IList.IndexOf
- uid: System.Collections.IList.IndexOf(System.Object)
  commentId: M:System.Collections.IList.IndexOf(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: IndexOf(Object)
  nameWithType: IList.IndexOf(Object)
  fullName: System.Collections.IList.IndexOf(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    nameWithType: IList.IndexOf
    fullName: System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    nameWithType: IList.IndexOf
    fullName: System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObjectCollection`1.System#Collections#IList#Insert*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.System#Collections#IList#Insert
  name: IList.Insert
  nameWithType: DependencyObjectCollection<T>.IList.Insert
  fullName: System.Windows.DependencyObjectCollection<T>.System.Collections.IList.Insert
  nameWithType.vb: DependencyObjectCollection(Of T).System.Collections.IList.Insert
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).System.Collections.IList.Insert
  name.vb: System.Collections.IList.Insert
- uid: System.Collections.IList.Insert(System.Int32,System.Object)
  commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Insert(Int32, Object)
  nameWithType: IList.Insert(Int32, Object)
  fullName: System.Collections.IList.Insert(System.Int32, System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    nameWithType: IList.Insert
    fullName: System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    nameWithType: IList.Insert
    fullName: System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObjectCollection`1.System#Collections#IList#Remove*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.System#Collections#IList#Remove
  name: IList.Remove
  nameWithType: DependencyObjectCollection<T>.IList.Remove
  fullName: System.Windows.DependencyObjectCollection<T>.System.Collections.IList.Remove
  nameWithType.vb: DependencyObjectCollection(Of T).System.Collections.IList.Remove
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).System.Collections.IList.Remove
  name.vb: System.Collections.IList.Remove
- uid: System.Collections.IList.Remove(System.Object)
  commentId: M:System.Collections.IList.Remove(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Remove(Object)
  nameWithType: IList.Remove(Object)
  fullName: System.Collections.IList.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    nameWithType: IList.Remove
    fullName: System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    nameWithType: IList.Remove
    fullName: System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.DependencyObjectCollection`1.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:System.Windows.DependencyObjectCollection`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: DependencyObjectCollection<T>.IEnumerable.GetEnumerator
  fullName: System.Windows.DependencyObjectCollection<T>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: DependencyObjectCollection(Of T).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: System.Windows.DependencyObjectCollection(Of T).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
