### YamlMime:ManagedReference
items:
- uid: System.Windows.Host
  commentId: T:System.Windows.Host
  id: Host
  parent: System.Windows
  children:
  - System.Windows.Host.#ctor
  - System.Windows.Host.Content
  - System.Windows.Host.InitParams
  - System.Windows.Host.NavigationState
  - System.Windows.Host.NavigationStateChanged
  - System.Windows.Host.Settings
  - System.Windows.Host.Source
  langs:
  - csharp
  - vb
  name: Host
  nameWithType: Host
  fullName: System.Windows.Host
  type: Class
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Host.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Host
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Host.cs
    startLine: 20
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: public class Host
    content.vb: Public Class Host
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Windows.Host.#ctor
  commentId: M:System.Windows.Host.#ctor
  id: '#ctor'
  parent: System.Windows.Host
  langs:
  - csharp
  - vb
  name: Host()
  nameWithType: Host.Host()
  fullName: System.Windows.Host.Host()
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Host.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Host.cs
    startLine: 29
  assemblies:
  - OpenSilver
  namespace: System.Windows
  syntax:
    content: public Host()
    content.vb: Public Sub New
  overload: System.Windows.Host.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.Host.Content
  commentId: P:System.Windows.Host.Content
  id: Content
  parent: System.Windows.Host
  langs:
  - csharp
  - vb
  name: Content
  nameWithType: Host.Content
  fullName: System.Windows.Host.Content
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Host.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Content
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Host.cs
    startLine: 43
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets the &quot;Content&quot; sub-object of this Host.\n"
  example: []
  syntax:
    content: public Content Content { get; }
    parameters: []
    return:
      type: System.Windows.Interop.Content
    content.vb: Public ReadOnly Property Content As Content
  overload: System.Windows.Host.Content*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Windows.Host.Settings
  commentId: P:System.Windows.Host.Settings
  id: Settings
  parent: System.Windows.Host
  langs:
  - csharp
  - vb
  name: Settings
  nameWithType: Host.Settings
  fullName: System.Windows.Host.Settings
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Host.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Settings
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Host.cs
    startLine: 48
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets the &quot;Settings&quot; sub-object of this tHost.\n"
  example: []
  syntax:
    content: public Settings Settings { get; }
    parameters: []
    return:
      type: System.Settings
    content.vb: Public ReadOnly Property Settings As Settings
  overload: System.Windows.Host.Settings*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Windows.Host.Source
  commentId: P:System.Windows.Host.Source
  id: Source
  parent: System.Windows.Host
  langs:
  - csharp
  - vb
  name: Source
  nameWithType: Host.Source
  fullName: System.Windows.Host.Source
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Host.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Source
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Host.cs
    startLine: 58
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets the URI of the package or XAML file that specifies the XAML content\nto render.\n"
  example: []
  syntax:
    content: public Uri Source { get; }
    parameters: []
    return:
      type: System.Uri
      description: "\nThe URI of the package, XAML file, or XAML scripting tag that contains the\ncontent to load into the Silverlight plug-in.\n"
    content.vb: Public ReadOnly Property Source As Uri
  overload: System.Windows.Host.Source*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Windows.Host.NavigationState
  commentId: P:System.Windows.Host.NavigationState
  id: NavigationState
  parent: System.Windows.Host
  langs:
  - csharp
  - vb
  name: NavigationState
  nameWithType: Host.NavigationState
  fullName: System.Windows.Host.NavigationState
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Host.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: NavigationState
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Host.cs
    startLine: 69
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets a URI fragment that represents the current navigation state.\n"
  example: []
  syntax:
    content: public string NavigationState { get; set; }
    parameters: []
    return:
      type: System.String
      description: "\nA URI fragment that represents the current navigation state.\n"
    content.vb: Public Property NavigationState As String
  overload: System.Windows.Host.NavigationState*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nWhen setting this property, the specified value is null.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.Host.NavigationStateChanged
  commentId: E:System.Windows.Host.NavigationStateChanged
  id: NavigationStateChanged
  parent: System.Windows.Host
  langs:
  - csharp
  - vb
  name: NavigationStateChanged
  nameWithType: Host.NavigationStateChanged
  fullName: System.Windows.Host.NavigationStateChanged
  type: Event
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Host.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: NavigationStateChanged
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Host.cs
    startLine: 87
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nOccurs when the <xref href=\"System.Windows.Host.NavigationState\" data-throw-if-not-resolved=\"false\"></xref> property\nchanges value.\n"
  example: []
  syntax:
    content: public event EventHandler<NavigationStateChangedEventArgs> NavigationStateChanged
    return:
      type: System.EventHandler{System.Windows.Interop.NavigationStateChangedEventArgs}
    content.vb: Public Event NavigationStateChanged As EventHandler(Of NavigationStateChangedEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.Host.InitParams
  commentId: P:System.Windows.Host.InitParams
  id: InitParams
  parent: System.Windows.Host
  langs:
  - csharp
  - vb
  name: InitParams
  nameWithType: Host.InitParams
  fullName: System.Windows.Host.InitParams
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Host.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: InitParams
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Host.cs
    startLine: 119
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets the initialization parameters that were passed as part of HTML initialization\nof a Silverlight plug-in.\n"
  example: []
  syntax:
    content: public IDictionary<string, string> InitParams { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "\nThe set of initialization parameters, as a dictionary with key strings and value\nstrings.\n"
    content.vb: Public ReadOnly Property InitParams As IDictionary(Of String, String)
  overload: System.Windows.Host.InitParams*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Windows
  commentId: N:System.Windows
  name: System.Windows
  nameWithType: System.Windows
  fullName: System.Windows
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.Windows.Host.#ctor*
  commentId: Overload:System.Windows.Host.#ctor
  name: Host
  nameWithType: Host.Host
  fullName: System.Windows.Host.Host
- uid: System.Windows.Host.Content*
  commentId: Overload:System.Windows.Host.Content
  name: Content
  nameWithType: Host.Content
  fullName: System.Windows.Host.Content
- uid: System.Windows.Interop.Content
  commentId: T:System.Windows.Interop.Content
  parent: System.Windows.Interop
  name: Content
  nameWithType: Content
  fullName: System.Windows.Interop.Content
- uid: System.Windows.Interop
  commentId: N:System.Windows.Interop
  name: System.Windows.Interop
  nameWithType: System.Windows.Interop
  fullName: System.Windows.Interop
- uid: System.Windows.Host.Settings*
  commentId: Overload:System.Windows.Host.Settings
  name: Settings
  nameWithType: Host.Settings
  fullName: System.Windows.Host.Settings
- uid: System.Settings
  commentId: T:System.Settings
  parent: System
  name: Settings
  nameWithType: Settings
  fullName: System.Settings
- uid: System.Windows.Host.Source*
  commentId: Overload:System.Windows.Host.Source
  name: Source
  nameWithType: Host.Source
  fullName: System.Windows.Host.Source
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.Windows.Host.NavigationState*
  commentId: Overload:System.Windows.Host.NavigationState
  name: NavigationState
  nameWithType: Host.NavigationState
  fullName: System.Windows.Host.NavigationState
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Host.NavigationState
  commentId: P:System.Windows.Host.NavigationState
  isExternal: true
- uid: System.EventHandler{System.Windows.Interop.NavigationStateChangedEventArgs}
  commentId: T:System.EventHandler{System.Windows.Interop.NavigationStateChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<NavigationStateChangedEventArgs>
  nameWithType: EventHandler<NavigationStateChangedEventArgs>
  fullName: System.EventHandler<System.Windows.Interop.NavigationStateChangedEventArgs>
  nameWithType.vb: EventHandler(Of NavigationStateChangedEventArgs)
  fullName.vb: System.EventHandler(Of System.Windows.Interop.NavigationStateChangedEventArgs)
  name.vb: EventHandler(Of NavigationStateChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Interop.NavigationStateChangedEventArgs
    name: NavigationStateChangedEventArgs
    nameWithType: NavigationStateChangedEventArgs
    fullName: System.Windows.Interop.NavigationStateChangedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Interop.NavigationStateChangedEventArgs
    name: NavigationStateChangedEventArgs
    nameWithType: NavigationStateChangedEventArgs
    fullName: System.Windows.Interop.NavigationStateChangedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Host.InitParams*
  commentId: Overload:System.Windows.Host.InitParams
  name: InitParams
  nameWithType: Host.InitParams
  fullName: System.Windows.Host.InitParams
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
