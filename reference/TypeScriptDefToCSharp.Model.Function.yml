### YamlMime:ManagedReference
items:
- uid: TypeScriptDefToCSharp.Model.Function
  commentId: T:TypeScriptDefToCSharp.Model.Function
  id: Function
  parent: TypeScriptDefToCSharp.Model
  children:
  - TypeScriptDefToCSharp.Model.Function.#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration},TypeScriptDefToCSharp.TypeScriptDefContext)
  - TypeScriptDefToCSharp.Model.Function.#ctor(TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration})
  - TypeScriptDefToCSharp.Model.Function.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  - TypeScriptDefToCSharp.Model.Function.GetEnumerator
  - TypeScriptDefToCSharp.Model.Function.GetJSParamsValues
  - TypeScriptDefToCSharp.Model.Function.GetJSParamValue(TypeScriptDefToCSharp.Model.Param)
  - TypeScriptDefToCSharp.Model.Function.HasString
  - TypeScriptDefToCSharp.Model.Function.Optional
  - TypeScriptDefToCSharp.Model.Function.Params
  - TypeScriptDefToCSharp.Model.Function.ReturnType
  - TypeScriptDefToCSharp.Model.Function.Static
  - TypeScriptDefToCSharp.Model.Function.System#Collections#IEnumerable#GetEnumerator
  - TypeScriptDefToCSharp.Model.Function.ToString
  langs:
  - csharp
  - vb
  name: Function
  nameWithType: Function
  fullName: TypeScriptDefToCSharp.Model.Function
  type: Class
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Function
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
    startLine: 27
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: 'public class Function : Declaration, Declaration.Container<Param>, IDeclaration, IEnumerable<Param>, IEnumerable'
    content.vb: >-
      Public Class Function
          Inherits Declaration
          Implements Declaration.Container(Of Param), IDeclaration, IEnumerable(Of Param), IEnumerable
  inheritance:
  - System.Object
  - TypeScriptDefToCSharp.Model.Declaration
  derivedClasses:
  - TypeScriptDefToCSharp.Model.Method
  implements:
  - TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Param}
  - TypeScriptDefToCSharp.Model.IDeclaration
  - System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Param}
  - System.Collections.IEnumerable
  inheritedMembers:
  - TypeScriptDefToCSharp.Model.Declaration.Name
  - TypeScriptDefToCSharp.Model.Declaration.Super
  - TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
  - TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String,System.Int32)
  - TypeScriptDefToCSharp.Model.Declaration.FirstAncestor``1
  - TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TypeScriptDefToCSharp.Model.Function.Params
  commentId: P:TypeScriptDefToCSharp.Model.Function.Params
  id: Params
  parent: TypeScriptDefToCSharp.Model.Function
  langs:
  - csharp
  - vb
  name: Params
  nameWithType: Function.Params
  fullName: TypeScriptDefToCSharp.Model.Function.Params
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Params
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
    startLine: 29
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public List<Param> Params { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{TypeScriptDefToCSharp.Model.Param}
    content.vb: Public Property Params As List(Of Param)
  overload: TypeScriptDefToCSharp.Model.Function.Params*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Function.ReturnType
  commentId: P:TypeScriptDefToCSharp.Model.Function.ReturnType
  id: ReturnType
  parent: TypeScriptDefToCSharp.Model.Function
  langs:
  - csharp
  - vb
  name: ReturnType
  nameWithType: Function.ReturnType
  fullName: TypeScriptDefToCSharp.Model.Function.ReturnType
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ReturnType
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
    startLine: 30
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public TSType ReturnType { get; set; }
    parameters: []
    return:
      type: TypeScriptDefToCSharp.Model.TSType
    content.vb: Public Property ReturnType As TSType
  overload: TypeScriptDefToCSharp.Model.Function.ReturnType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Function.Optional
  commentId: P:TypeScriptDefToCSharp.Model.Function.Optional
  id: Optional
  parent: TypeScriptDefToCSharp.Model.Function
  langs:
  - csharp
  - vb
  name: Optional
  nameWithType: Function.Optional
  fullName: TypeScriptDefToCSharp.Model.Function.Optional
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Optional
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
    startLine: 31
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public bool Optional { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Optional As Boolean
  overload: TypeScriptDefToCSharp.Model.Function.Optional*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Function.HasString
  commentId: P:TypeScriptDefToCSharp.Model.Function.HasString
  id: HasString
  parent: TypeScriptDefToCSharp.Model.Function
  langs:
  - csharp
  - vb
  name: HasString
  nameWithType: Function.HasString
  fullName: TypeScriptDefToCSharp.Model.Function.HasString
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: HasString
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
    startLine: 32
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public bool HasString { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property HasString As Boolean
  overload: TypeScriptDefToCSharp.Model.Function.HasString*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Function.Static
  commentId: P:TypeScriptDefToCSharp.Model.Function.Static
  id: Static
  parent: TypeScriptDefToCSharp.Model.Function
  langs:
  - csharp
  - vb
  name: Static
  nameWithType: Function.Static
  fullName: TypeScriptDefToCSharp.Model.Function.Static
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Static
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
    startLine: 33
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public bool Static { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Static As Boolean
  overload: TypeScriptDefToCSharp.Model.Function.Static*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Function.#ctor(TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration})
  commentId: M:TypeScriptDefToCSharp.Model.Function.#ctor(TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration})
  id: '#ctor(TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration})'
  parent: TypeScriptDefToCSharp.Model.Function
  langs:
  - csharp
  - vb
  name: Function(Declaration.Container<Declaration>)
  nameWithType: Function.Function(Declaration.Container<Declaration>)
  fullName: TypeScriptDefToCSharp.Model.Function.Function(TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Declaration>)
  type: Constructor
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
    startLine: 35
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public Function(Declaration.Container<Declaration> super)
    parameters:
    - id: super
      type: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration}
    content.vb: Public Sub New(super As Declaration.Container(Of Declaration))
  overload: TypeScriptDefToCSharp.Model.Function.#ctor*
  nameWithType.vb: Function.Function(Declaration.Container(Of Declaration))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TypeScriptDefToCSharp.Model.Function.Function(TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Declaration))
  name.vb: Function(Declaration.Container(Of Declaration))
- uid: TypeScriptDefToCSharp.Model.Function.#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration},TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Function.#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration},TypeScriptDefToCSharp.TypeScriptDefContext)
  id: '#ctor(System.Xml.Linq.XElement,TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration},TypeScriptDefToCSharp.TypeScriptDefContext)'
  parent: TypeScriptDefToCSharp.Model.Function
  langs:
  - csharp
  - vb
  name: Function(XElement, Declaration.Container<Declaration>, TypeScriptDefContext)
  nameWithType: Function.Function(XElement, Declaration.Container<Declaration>, TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Function.Function(System.Xml.Linq.XElement, TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Declaration>, TypeScriptDefToCSharp.TypeScriptDefContext)
  type: Constructor
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
    startLine: 41
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public Function(XElement elem, Declaration.Container<Declaration> super, TypeScriptDefContext context)
    parameters:
    - id: elem
      type: System.Xml.Linq.XElement
    - id: super
      type: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration}
    - id: context
      type: TypeScriptDefToCSharp.TypeScriptDefContext
    content.vb: Public Sub New(elem As XElement, super As Declaration.Container(Of Declaration), context As TypeScriptDefContext)
  overload: TypeScriptDefToCSharp.Model.Function.#ctor*
  nameWithType.vb: Function.Function(XElement, Declaration.Container(Of Declaration), TypeScriptDefContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TypeScriptDefToCSharp.Model.Function.Function(System.Xml.Linq.XElement, TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Declaration), TypeScriptDefToCSharp.TypeScriptDefContext)
  name.vb: Function(XElement, Declaration.Container(Of Declaration), TypeScriptDefContext)
- uid: TypeScriptDefToCSharp.Model.Function.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Function.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  id: AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  parent: TypeScriptDefToCSharp.Model.Function
  langs:
  - csharp
  - vb
  name: AddContent(XElement, TypeScriptDefContext)
  nameWithType: Function.AddContent(XElement, TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Function.AddContent(System.Xml.Linq.XElement, TypeScriptDefToCSharp.TypeScriptDefContext)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: AddContent
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
    startLine: 64
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public void AddContent(XElement content, TypeScriptDefContext context)
    parameters:
    - id: content
      type: System.Xml.Linq.XElement
    - id: context
      type: TypeScriptDefToCSharp.TypeScriptDefContext
    content.vb: Public Sub AddContent(content As XElement, context As TypeScriptDefContext)
  overload: TypeScriptDefToCSharp.Model.Function.AddContent*
  implements:
  - TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Param}.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Function.ToString
  commentId: M:TypeScriptDefToCSharp.Model.Function.ToString
  id: ToString
  parent: TypeScriptDefToCSharp.Model.Function
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Function.ToString()
  fullName: TypeScriptDefToCSharp.Model.Function.ToString()
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ToString
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
    startLine: 83
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: TypeScriptDefToCSharp.Model.Declaration.ToString
  overload: TypeScriptDefToCSharp.Model.Function.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TypeScriptDefToCSharp.Model.Function.GetJSParamsValues
  commentId: M:TypeScriptDefToCSharp.Model.Function.GetJSParamsValues
  id: GetJSParamsValues
  parent: TypeScriptDefToCSharp.Model.Function
  langs:
  - csharp
  - vb
  name: GetJSParamsValues()
  nameWithType: Function.GetJSParamsValues()
  fullName: TypeScriptDefToCSharp.Model.Function.GetJSParamsValues()
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetJSParamsValues
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
    startLine: 164
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: protected IEnumerable<string> GetJSParamsValues()
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Protected Function GetJSParamsValues As IEnumerable(Of String)
  overload: TypeScriptDefToCSharp.Model.Function.GetJSParamsValues*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TypeScriptDefToCSharp.Model.Function.GetJSParamValue(TypeScriptDefToCSharp.Model.Param)
  commentId: M:TypeScriptDefToCSharp.Model.Function.GetJSParamValue(TypeScriptDefToCSharp.Model.Param)
  id: GetJSParamValue(TypeScriptDefToCSharp.Model.Param)
  parent: TypeScriptDefToCSharp.Model.Function
  langs:
  - csharp
  - vb
  name: GetJSParamValue(Param)
  nameWithType: Function.GetJSParamValue(Param)
  fullName: TypeScriptDefToCSharp.Model.Function.GetJSParamValue(TypeScriptDefToCSharp.Model.Param)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetJSParamValue
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
    startLine: 175
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: protected string GetJSParamValue(Param p)
    parameters:
    - id: p
      type: TypeScriptDefToCSharp.Model.Param
    return:
      type: System.String
    content.vb: Protected Function GetJSParamValue(p As Param) As String
  overload: TypeScriptDefToCSharp.Model.Function.GetJSParamValue*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TypeScriptDefToCSharp.Model.Function.GetEnumerator
  commentId: M:TypeScriptDefToCSharp.Model.Function.GetEnumerator
  id: GetEnumerator
  parent: TypeScriptDefToCSharp.Model.Function
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: Function.GetEnumerator()
  fullName: TypeScriptDefToCSharp.Model.Function.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetEnumerator
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
    startLine: 200
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public IEnumerator<Param> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{TypeScriptDefToCSharp.Model.Param}
    content.vb: Public Function GetEnumerator As IEnumerator(Of Param)
  overload: TypeScriptDefToCSharp.Model.Function.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Param}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.Function.System#Collections#IEnumerable#GetEnumerator
  commentId: M:TypeScriptDefToCSharp.Model.Function.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: TypeScriptDefToCSharp.Model.Function
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: Function.IEnumerable.GetEnumerator()
  fullName: TypeScriptDefToCSharp.Model.Function.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/Function.cs
    startLine: 205
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: TypeScriptDefToCSharp.Model.Function.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: Function.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: TypeScriptDefToCSharp.Model
  commentId: N:TypeScriptDefToCSharp.Model
  name: TypeScriptDefToCSharp.Model
  nameWithType: TypeScriptDefToCSharp.Model
  fullName: TypeScriptDefToCSharp.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TypeScriptDefToCSharp.Model.Declaration
  commentId: T:TypeScriptDefToCSharp.Model.Declaration
  parent: TypeScriptDefToCSharp.Model
  name: Declaration
  nameWithType: Declaration
  fullName: TypeScriptDefToCSharp.Model.Declaration
- uid: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Param}
  commentId: T:TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Param}
  parent: TypeScriptDefToCSharp.Model
  definition: TypeScriptDefToCSharp.Model.Declaration.Container`1
  name: Declaration.Container<Param>
  nameWithType: Declaration.Container<Param>
  fullName: TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Param>
  nameWithType.vb: Declaration.Container(Of Param)
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Param)
  name.vb: Declaration.Container(Of Param)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Param
    name: Param
    nameWithType: Param
    fullName: TypeScriptDefToCSharp.Model.Param
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Param
    name: Param
    nameWithType: Param
    fullName: TypeScriptDefToCSharp.Model.Param
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.IDeclaration
  commentId: T:TypeScriptDefToCSharp.Model.IDeclaration
  parent: TypeScriptDefToCSharp.Model
  name: IDeclaration
  nameWithType: IDeclaration
  fullName: TypeScriptDefToCSharp.Model.IDeclaration
- uid: System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Param}
  commentId: T:System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Param}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Param>
  nameWithType: IEnumerable<Param>
  fullName: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Param>
  nameWithType.vb: IEnumerable(Of Param)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TypeScriptDefToCSharp.Model.Param)
  name.vb: IEnumerable(Of Param)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Param
    name: Param
    nameWithType: Param
    fullName: TypeScriptDefToCSharp.Model.Param
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Param
    name: Param
    nameWithType: Param
    fullName: TypeScriptDefToCSharp.Model.Param
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: TypeScriptDefToCSharp.Model.Declaration.Name
  commentId: P:TypeScriptDefToCSharp.Model.Declaration.Name
  parent: TypeScriptDefToCSharp.Model.Declaration
  name: Name
  nameWithType: Declaration.Name
  fullName: TypeScriptDefToCSharp.Model.Declaration.Name
- uid: TypeScriptDefToCSharp.Model.Declaration.Super
  commentId: P:TypeScriptDefToCSharp.Model.Declaration.Super
  parent: TypeScriptDefToCSharp.Model.Declaration
  name: Super
  nameWithType: Declaration.Super
  fullName: TypeScriptDefToCSharp.Model.Declaration.Super
- uid: TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
  parent: TypeScriptDefToCSharp.Model.Declaration
  isExternal: true
  name: FullName(String)
  nameWithType: Declaration.FullName(String)
  fullName: TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
    name: FullName
    nameWithType: Declaration.FullName
    fullName: TypeScriptDefToCSharp.Model.Declaration.FullName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.FullName(System.String)
    name: FullName
    nameWithType: Declaration.FullName
    fullName: TypeScriptDefToCSharp.Model.Declaration.FullName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String,System.Int32)
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String,System.Int32)
  parent: TypeScriptDefToCSharp.Model.Declaration
  isExternal: true
  name: SkippedFullName(String, Int32)
  nameWithType: Declaration.SkippedFullName(String, Int32)
  fullName: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String, System.Int32)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String,System.Int32)
    name: SkippedFullName
    nameWithType: Declaration.SkippedFullName
    fullName: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName(System.String,System.Int32)
    name: SkippedFullName
    nameWithType: Declaration.SkippedFullName
    fullName: TypeScriptDefToCSharp.Model.Declaration.SkippedFullName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor``1
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.FirstAncestor``1
  parent: TypeScriptDefToCSharp.Model.Declaration
  name: FirstAncestor<TContainer>()
  nameWithType: Declaration.FirstAncestor<TContainer>()
  fullName: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor<TContainer>()
  nameWithType.vb: Declaration.FirstAncestor(Of TContainer)()
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor(Of TContainer)()
  name.vb: FirstAncestor(Of TContainer)()
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor``1
    name: FirstAncestor<TContainer>
    nameWithType: Declaration.FirstAncestor<TContainer>
    fullName: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor<TContainer>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor``1
    name: FirstAncestor(Of TContainer)
    nameWithType: Declaration.FirstAncestor(Of TContainer)
    fullName: TypeScriptDefToCSharp.Model.Declaration.FirstAncestor(Of TContainer)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  parent: TypeScriptDefToCSharp.Model.Declaration
  name: Export(TypeScriptDefContext)
  nameWithType: Declaration.Export(TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
    name: Export
    nameWithType: Declaration.Export
    fullName: TypeScriptDefToCSharp.Model.Declaration.Export
  - name: (
    nameWithType: (
    fullName: (
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Export(TypeScriptDefToCSharp.TypeScriptDefContext)
    name: Export
    nameWithType: Declaration.Export
    fullName: TypeScriptDefToCSharp.Model.Declaration.Export
  - name: (
    nameWithType: (
    fullName: (
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
  commentId: T:TypeScriptDefToCSharp.Model.Declaration.Container`1
  name: Declaration.Container<T>
  nameWithType: Declaration.Container<T>
  fullName: TypeScriptDefToCSharp.Model.Declaration.Container<T>
  nameWithType.vb: Declaration.Container(Of T)
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.Container(Of T)
  name.vb: Declaration.Container(Of T)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: TypeScriptDefToCSharp.Model.Function.Params*
  commentId: Overload:TypeScriptDefToCSharp.Model.Function.Params
  name: Params
  nameWithType: Function.Params
  fullName: TypeScriptDefToCSharp.Model.Function.Params
- uid: System.Collections.Generic.List{TypeScriptDefToCSharp.Model.Param}
  commentId: T:System.Collections.Generic.List{TypeScriptDefToCSharp.Model.Param}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Param>
  nameWithType: List<Param>
  fullName: System.Collections.Generic.List<TypeScriptDefToCSharp.Model.Param>
  nameWithType.vb: List(Of Param)
  fullName.vb: System.Collections.Generic.List(Of TypeScriptDefToCSharp.Model.Param)
  name.vb: List(Of Param)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Param
    name: Param
    nameWithType: Param
    fullName: TypeScriptDefToCSharp.Model.Param
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Param
    name: Param
    nameWithType: Param
    fullName: TypeScriptDefToCSharp.Model.Param
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Function.ReturnType*
  commentId: Overload:TypeScriptDefToCSharp.Model.Function.ReturnType
  name: ReturnType
  nameWithType: Function.ReturnType
  fullName: TypeScriptDefToCSharp.Model.Function.ReturnType
- uid: TypeScriptDefToCSharp.Model.TSType
  commentId: T:TypeScriptDefToCSharp.Model.TSType
  parent: TypeScriptDefToCSharp.Model
  name: TSType
  nameWithType: TSType
  fullName: TypeScriptDefToCSharp.Model.TSType
- uid: TypeScriptDefToCSharp.Model.Function.Optional*
  commentId: Overload:TypeScriptDefToCSharp.Model.Function.Optional
  name: Optional
  nameWithType: Function.Optional
  fullName: TypeScriptDefToCSharp.Model.Function.Optional
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TypeScriptDefToCSharp.Model.Function.HasString*
  commentId: Overload:TypeScriptDefToCSharp.Model.Function.HasString
  name: HasString
  nameWithType: Function.HasString
  fullName: TypeScriptDefToCSharp.Model.Function.HasString
- uid: TypeScriptDefToCSharp.Model.Function.Static*
  commentId: Overload:TypeScriptDefToCSharp.Model.Function.Static
  name: Static
  nameWithType: Function.Static
  fullName: TypeScriptDefToCSharp.Model.Function.Static
- uid: TypeScriptDefToCSharp.Model.Function.#ctor*
  commentId: Overload:TypeScriptDefToCSharp.Model.Function.#ctor
  name: Function
  nameWithType: Function.Function
  fullName: TypeScriptDefToCSharp.Model.Function.Function
- uid: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration}
  commentId: T:TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Declaration}
  parent: TypeScriptDefToCSharp.Model
  definition: TypeScriptDefToCSharp.Model.Declaration.Container`1
  name: Declaration.Container<Declaration>
  nameWithType: Declaration.Container<Declaration>
  fullName: TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Declaration>
  nameWithType.vb: Declaration.Container(Of Declaration)
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Declaration)
  name.vb: Declaration.Container(Of Declaration)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Declaration
    name: Declaration
    nameWithType: Declaration
    fullName: TypeScriptDefToCSharp.Model.Declaration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1
    name: Declaration.Container
    nameWithType: Declaration.Container
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Declaration
    name: Declaration
    nameWithType: Declaration
    fullName: TypeScriptDefToCSharp.Model.Declaration
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Linq.XElement
  commentId: T:System.Xml.Linq.XElement
  parent: System.Xml.Linq
  isExternal: true
  name: XElement
  nameWithType: XElement
  fullName: System.Xml.Linq.XElement
- uid: TypeScriptDefToCSharp.TypeScriptDefContext
  commentId: T:TypeScriptDefToCSharp.TypeScriptDefContext
  parent: TypeScriptDefToCSharp
  name: TypeScriptDefContext
  nameWithType: TypeScriptDefContext
  fullName: TypeScriptDefToCSharp.TypeScriptDefContext
- uid: System.Xml.Linq
  commentId: N:System.Xml.Linq
  isExternal: true
  name: System.Xml.Linq
  nameWithType: System.Xml.Linq
  fullName: System.Xml.Linq
- uid: TypeScriptDefToCSharp
  commentId: N:TypeScriptDefToCSharp
  name: TypeScriptDefToCSharp
  nameWithType: TypeScriptDefToCSharp
  fullName: TypeScriptDefToCSharp
- uid: TypeScriptDefToCSharp.Model.Function.AddContent*
  commentId: Overload:TypeScriptDefToCSharp.Model.Function.AddContent
  name: AddContent
  nameWithType: Function.AddContent
  fullName: TypeScriptDefToCSharp.Model.Function.AddContent
- uid: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Param}.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Param}.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  parent: TypeScriptDefToCSharp.Model.Declaration.Container{TypeScriptDefToCSharp.Model.Param}
  definition: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  name: AddContent(XElement, TypeScriptDefContext)
  nameWithType: Declaration.Container<Param>.AddContent(XElement, TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Param>.AddContent(System.Xml.Linq.XElement, TypeScriptDefToCSharp.TypeScriptDefContext)
  nameWithType.vb: Declaration.Container(Of Param).AddContent(XElement, TypeScriptDefContext)
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Param).AddContent(System.Xml.Linq.XElement, TypeScriptDefToCSharp.TypeScriptDefContext)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
    name: AddContent
    nameWithType: Declaration.Container<Param>.AddContent
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container<TypeScriptDefToCSharp.Model.Param>.AddContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
    name: AddContent
    nameWithType: Declaration.Container(Of Param).AddContent
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container(Of TypeScriptDefToCSharp.Model.Param).AddContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
  isExternal: true
  name: AddContent(XElement, TypeScriptDefContext)
  nameWithType: Declaration.Container<T>.AddContent(XElement, TypeScriptDefContext)
  fullName: TypeScriptDefToCSharp.Model.Declaration.Container<T>.AddContent(System.Xml.Linq.XElement, TypeScriptDefToCSharp.TypeScriptDefContext)
  nameWithType.vb: Declaration.Container(Of T).AddContent(XElement, TypeScriptDefContext)
  fullName.vb: TypeScriptDefToCSharp.Model.Declaration.Container(Of T).AddContent(System.Xml.Linq.XElement, TypeScriptDefToCSharp.TypeScriptDefContext)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
    name: AddContent
    nameWithType: Declaration.Container<T>.AddContent
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container<T>.AddContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.Container`1.AddContent(System.Xml.Linq.XElement,TypeScriptDefToCSharp.TypeScriptDefContext)
    name: AddContent
    nameWithType: Declaration.Container(Of T).AddContent
    fullName: TypeScriptDefToCSharp.Model.Declaration.Container(Of T).AddContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TypeScriptDefToCSharp.TypeScriptDefContext
    name: TypeScriptDefContext
    nameWithType: TypeScriptDefContext
    fullName: TypeScriptDefToCSharp.TypeScriptDefContext
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Declaration.ToString
  commentId: M:TypeScriptDefToCSharp.Model.Declaration.ToString
  parent: TypeScriptDefToCSharp.Model.Declaration
  name: ToString()
  nameWithType: Declaration.ToString()
  fullName: TypeScriptDefToCSharp.Model.Declaration.ToString()
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.Declaration.ToString
    name: ToString
    nameWithType: Declaration.ToString
    fullName: TypeScriptDefToCSharp.Model.Declaration.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.Declaration.ToString
    name: ToString
    nameWithType: Declaration.ToString
    fullName: TypeScriptDefToCSharp.Model.Declaration.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Function.ToString*
  commentId: Overload:TypeScriptDefToCSharp.Model.Function.ToString
  name: ToString
  nameWithType: Function.ToString
  fullName: TypeScriptDefToCSharp.Model.Function.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TypeScriptDefToCSharp.Model.Function.GetJSParamsValues*
  commentId: Overload:TypeScriptDefToCSharp.Model.Function.GetJSParamsValues
  name: GetJSParamsValues
  nameWithType: Function.GetJSParamsValues
  fullName: TypeScriptDefToCSharp.Model.Function.GetJSParamsValues
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Function.GetJSParamValue*
  commentId: Overload:TypeScriptDefToCSharp.Model.Function.GetJSParamValue
  name: GetJSParamValue
  nameWithType: Function.GetJSParamValue
  fullName: TypeScriptDefToCSharp.Model.Function.GetJSParamValue
- uid: TypeScriptDefToCSharp.Model.Param
  commentId: T:TypeScriptDefToCSharp.Model.Param
  parent: TypeScriptDefToCSharp.Model
  name: Param
  nameWithType: Param
  fullName: TypeScriptDefToCSharp.Model.Param
- uid: TypeScriptDefToCSharp.Model.Function.GetEnumerator*
  commentId: Overload:TypeScriptDefToCSharp.Model.Function.GetEnumerator
  name: GetEnumerator
  nameWithType: Function.GetEnumerator
  fullName: TypeScriptDefToCSharp.Model.Function.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Param}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Param}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{TypeScriptDefToCSharp.Model.Param}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<Param>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Param>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of Param).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of TypeScriptDefToCSharp.Model.Param).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<Param>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<TypeScriptDefToCSharp.Model.Param>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of Param).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of TypeScriptDefToCSharp.Model.Param).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{TypeScriptDefToCSharp.Model.Param}
  commentId: T:System.Collections.Generic.IEnumerator{TypeScriptDefToCSharp.Model.Param}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<Param>
  nameWithType: IEnumerator<Param>
  fullName: System.Collections.Generic.IEnumerator<TypeScriptDefToCSharp.Model.Param>
  nameWithType.vb: IEnumerator(Of Param)
  fullName.vb: System.Collections.Generic.IEnumerator(Of TypeScriptDefToCSharp.Model.Param)
  name.vb: IEnumerator(Of Param)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeScriptDefToCSharp.Model.Param
    name: Param
    nameWithType: Param
    fullName: TypeScriptDefToCSharp.Model.Param
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeScriptDefToCSharp.Model.Param
    name: Param
    nameWithType: Param
    fullName: TypeScriptDefToCSharp.Model.Param
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.Function.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:TypeScriptDefToCSharp.Model.Function.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: Function.IEnumerable.GetEnumerator
  fullName: TypeScriptDefToCSharp.Model.Function.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: Function.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
