### YamlMime:ManagedReference
items:
- uid: System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter
  commentId: T:System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter
  id: DataFormCommandButtonsVisibilityTypeConverter
  parent: System.Windows.Controls
  children:
  - System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.CanConvertFrom(ITypeDescriptorContext,System.Type)
  - System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.ConvertFrom(ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  - System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.ConvertTo(ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  langs:
  - csharp
  - vb
  name: DataFormCommandButtonsVisibilityTypeConverter
  nameWithType: DataFormCommandButtonsVisibilityTypeConverter
  fullName: System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter
  type: Class
  source:
    remote:
      path: src/Runtime/DataForm.Toolkit/DataForm/DataFormCommandButtonsVisibilityTypeConverter.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: DataFormCommandButtonsVisibilityTypeConverter
    path: ../OpenSilverGit/src/Runtime/DataForm.Toolkit/DataForm/DataFormCommandButtonsVisibilityTypeConverter.cs
    startLine: 23
  assemblies:
  - DataForm.Toolkit.OpenSilver
  namespace: System.Windows.Controls
  summary: "\nType converter for DataForm.CommandButtonsVisibility.\n"
  example: []
  syntax:
    content: 'public class DataFormCommandButtonsVisibilityTypeConverter : TypeConverter'
    content.vb: >-
      Public Class DataFormCommandButtonsVisibilityTypeConverter
          Inherits TypeConverter
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.CanConvertFrom(ITypeDescriptorContext,System.Type)
  commentId: M:System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.CanConvertFrom(ITypeDescriptorContext,System.Type)
  id: CanConvertFrom(ITypeDescriptorContext,System.Type)
  parent: System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter
  langs:
  - csharp
  - vb
  name: CanConvertFrom(ITypeDescriptorContext, Type)
  nameWithType: DataFormCommandButtonsVisibilityTypeConverter.CanConvertFrom(ITypeDescriptorContext, Type)
  fullName: System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.CanConvertFrom(ITypeDescriptorContext, System.Type)
  type: Method
  source:
    remote:
      path: src/Runtime/DataForm.Toolkit/DataForm/DataFormCommandButtonsVisibilityTypeConverter.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CanConvertFrom
    path: ../OpenSilverGit/src/Runtime/DataForm.Toolkit/DataForm/DataFormCommandButtonsVisibilityTypeConverter.cs
    startLine: 31
  assemblies:
  - DataForm.Toolkit.OpenSilver
  namespace: System.Windows.Controls
  summary: "\nReturns whether we can convert from a given type.\n"
  example: []
  syntax:
    content: public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
    parameters:
    - id: context
      type: ITypeDescriptorContext
      description: The type descriptor context.
    - id: sourceType
      type: System.Type
      description: The source type.
    return:
      type: System.Boolean
      description: Whether we can convert from the given type.
    content.vb: Public Overrides Function CanConvertFrom(context As ITypeDescriptorContext, sourceType As Type) As Boolean
  overload: System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.CanConvertFrom*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.ConvertFrom(ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  commentId: M:System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.ConvertFrom(ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  id: ConvertFrom(ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  parent: System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter
  langs:
  - csharp
  - vb
  name: ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)
  nameWithType: DataFormCommandButtonsVisibilityTypeConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)
  fullName: System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.ConvertFrom(ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/DataForm.Toolkit/DataForm/DataFormCommandButtonsVisibilityTypeConverter.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ConvertFrom
    path: ../OpenSilverGit/src/Runtime/DataForm.Toolkit/DataForm/DataFormCommandButtonsVisibilityTypeConverter.cs
    startLine: 48
  assemblies:
  - DataForm.Toolkit.OpenSilver
  namespace: System.Windows.Controls
  summary: "\nConverts a value from a type.\n"
  example: []
  syntax:
    content: public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
    parameters:
    - id: context
      type: ITypeDescriptorContext
      description: The type descriptor context.
    - id: culture
      type: System.Globalization.CultureInfo
      description: The culture to use.
    - id: value
      type: System.Object
      description: The value to convert from.
    return:
      type: System.Object
      description: The converted value.
    content.vb: Public Overrides Function ConvertFrom(context As ITypeDescriptorContext, culture As CultureInfo, value As Object) As Object
  overload: System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.ConvertFrom*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.ConvertTo(ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  commentId: M:System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.ConvertTo(ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  id: ConvertTo(ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  parent: System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter
  langs:
  - csharp
  - vb
  name: ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)
  nameWithType: DataFormCommandButtonsVisibilityTypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)
  fullName: System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.ConvertTo(ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/Runtime/DataForm.Toolkit/DataForm/DataFormCommandButtonsVisibilityTypeConverter.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ConvertTo
    path: ../OpenSilverGit/src/Runtime/DataForm.Toolkit/DataForm/DataFormCommandButtonsVisibilityTypeConverter.cs
    startLine: 68
  assemblies:
  - DataForm.Toolkit.OpenSilver
  namespace: System.Windows.Controls
  summary: "\nConverts a value to a type.\n"
  example: []
  syntax:
    content: public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
    parameters:
    - id: context
      type: ITypeDescriptorContext
      description: The type descriptor context.
    - id: culture
      type: System.Globalization.CultureInfo
      description: The culture to use.
    - id: value
      type: System.Object
      description: The value to convert from.
    - id: destinationType
      type: System.Type
      description: The destination type.
    return:
      type: System.Object
      description: The converted value.
    content.vb: Public Overrides Function ConvertTo(context As ITypeDescriptorContext, culture As CultureInfo, value As Object, destinationType As Type) As Object
  overload: System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.ConvertTo*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Windows.Controls
  commentId: N:System.Windows.Controls
  name: System.Windows.Controls
  nameWithType: System.Windows.Controls
  fullName: System.Windows.Controls
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.CanConvertFrom*
  commentId: Overload:System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.CanConvertFrom
  name: CanConvertFrom
  nameWithType: DataFormCommandButtonsVisibilityTypeConverter.CanConvertFrom
  fullName: System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.CanConvertFrom
- uid: ITypeDescriptorContext
  isExternal: true
  name: ITypeDescriptorContext
  nameWithType: ITypeDescriptorContext
  fullName: ITypeDescriptorContext
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.ConvertFrom*
  commentId: Overload:System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.ConvertFrom
  name: ConvertFrom
  nameWithType: DataFormCommandButtonsVisibilityTypeConverter.ConvertFrom
  fullName: System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.ConvertFrom
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.ConvertTo*
  commentId: Overload:System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.ConvertTo
  name: ConvertTo
  nameWithType: DataFormCommandButtonsVisibilityTypeConverter.ConvertTo
  fullName: System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.ConvertTo
