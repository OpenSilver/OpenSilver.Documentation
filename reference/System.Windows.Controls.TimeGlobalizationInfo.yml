### YamlMime:ManagedReference
items:
- uid: System.Windows.Controls.TimeGlobalizationInfo
  commentId: T:System.Windows.Controls.TimeGlobalizationInfo
  id: TimeGlobalizationInfo
  parent: System.Windows.Controls
  children:
  - System.Windows.Controls.TimeGlobalizationInfo.ActualCulture
  - System.Windows.Controls.TimeGlobalizationInfo.AMDesignator
  - System.Windows.Controls.TimeGlobalizationInfo.FormatTime(System.Nullable{System.DateTime},System.Windows.Controls.ITimeFormat,System.Char[])
  - System.Windows.Controls.TimeGlobalizationInfo.GetActualTimeParsers(System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser})
  - System.Windows.Controls.TimeGlobalizationInfo.GetTextPositionForTimeUnit(System.String,System.TimeSpan,System.Windows.Controls.ITimeFormat)
  - System.Windows.Controls.TimeGlobalizationInfo.GetTimeUnitAtTextPosition(System.String,System.Int32,System.Windows.Controls.ITimeFormat)
  - System.Windows.Controls.TimeGlobalizationInfo.GetTransformedFormat(System.String)
  - System.Windows.Controls.TimeGlobalizationInfo.MapCharacterToDigit(System.Char)
  - System.Windows.Controls.TimeGlobalizationInfo.MapDigitToCharacter(System.Int32)
  - System.Windows.Controls.TimeGlobalizationInfo.OnDecrement(System.DateTime,System.TimeSpan)
  - System.Windows.Controls.TimeGlobalizationInfo.OnIncrement(System.DateTime,System.TimeSpan)
  - System.Windows.Controls.TimeGlobalizationInfo.ParseTime(System.String,System.Windows.Controls.ITimeFormat,System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser})
  - System.Windows.Controls.TimeGlobalizationInfo.PMDesignator
  - System.Windows.Controls.TimeGlobalizationInfo.TimeSeparators
  - System.Windows.Controls.TimeGlobalizationInfo.TryParseTime(System.String,System.Windows.Controls.ITimeFormat,System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser},System.Nullable{System.DateTime}@)
  langs:
  - csharp
  - vb
  name: TimeGlobalizationInfo
  nameWithType: TimeGlobalizationInfo
  fullName: System.Windows.Controls.TimeGlobalizationInfo
  type: Class
  source:
    remote:
      path: src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: TimeGlobalizationInfo
    path: ../OpenSilverGit/src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
    startLine: 23
  assemblies:
  - OpenSilver.Controls.Input.Toolkit
  namespace: System.Windows.Controls
  summary: "\nStrategy object that determines how controls interact with DateTime and \nCultureInfo.\n"
  remarks: >-
    TimeInput supports only the following formatting characters:

    &apos;h&apos;, &apos;m&apos;, &apos;s&apos;, &apos;H&apos;, &apos;t&apos;. All other characters are filtered out:

    &apos;d&apos;, &apos;f&apos;, &apos;F&apos;, &apos;g&apos;, &apos;K&apos;, &apos;M&apos;, &apos;y&apos;, &apos;z&apos;.
  example: []
  syntax:
    content: public class TimeGlobalizationInfo
    content.vb: Public Class TimeGlobalizationInfo
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Windows.Controls.TimeGlobalizationInfo.ActualCulture
  commentId: P:System.Windows.Controls.TimeGlobalizationInfo.ActualCulture
  id: ActualCulture
  parent: System.Windows.Controls.TimeGlobalizationInfo
  langs:
  - csharp
  - vb
  name: ActualCulture
  nameWithType: TimeGlobalizationInfo.ActualCulture
  fullName: System.Windows.Controls.TimeGlobalizationInfo.ActualCulture
  type: Property
  source:
    remote:
      path: src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ActualCulture
    path: ../OpenSilverGit/src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
    startLine: 40
  assemblies:
  - OpenSilver.Controls.Input.Toolkit
  namespace: System.Windows.Controls
  summary: "\nGets the actual culture used by the TimeGlobalizationInfo for formatting \nand parsing.\n"
  example: []
  syntax:
    content: public CultureInfo ActualCulture { get; }
    parameters: []
    return:
      type: System.Globalization.CultureInfo
      description: The actual culture.
    content.vb: Public ReadOnly Property ActualCulture As CultureInfo
  overload: System.Windows.Controls.TimeGlobalizationInfo.ActualCulture*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Windows.Controls.TimeGlobalizationInfo.TimeSeparators
  commentId: P:System.Windows.Controls.TimeGlobalizationInfo.TimeSeparators
  id: TimeSeparators
  parent: System.Windows.Controls.TimeGlobalizationInfo
  langs:
  - csharp
  - vb
  name: TimeSeparators
  nameWithType: TimeGlobalizationInfo.TimeSeparators
  fullName: System.Windows.Controls.TimeGlobalizationInfo.TimeSeparators
  type: Property
  source:
    remote:
      path: src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: TimeSeparators
    path: ../OpenSilverGit/src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
    startLine: 65
  assemblies:
  - OpenSilver.Controls.Input.Toolkit
  namespace: System.Windows.Controls
  summary: "\nGets the characters that may be used to separate components of time,\nthat is, hours, minutes and seconds.\n"
  example: []
  syntax:
    content: public virtual IList<char> TimeSeparators { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Char}
    content.vb: Public Overridable ReadOnly Property TimeSeparators As IList(Of Char)
  overload: System.Windows.Controls.TimeGlobalizationInfo.TimeSeparators*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Windows.Controls.TimeGlobalizationInfo.AMDesignator
  commentId: P:System.Windows.Controls.TimeGlobalizationInfo.AMDesignator
  id: AMDesignator
  parent: System.Windows.Controls.TimeGlobalizationInfo
  langs:
  - csharp
  - vb
  name: AMDesignator
  nameWithType: TimeGlobalizationInfo.AMDesignator
  fullName: System.Windows.Controls.TimeGlobalizationInfo.AMDesignator
  type: Property
  source:
    remote:
      path: src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: AMDesignator
    path: ../OpenSilverGit/src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
    startLine: 75
  assemblies:
  - OpenSilver.Controls.Input.Toolkit
  namespace: System.Windows.Controls
  summary: "\nGets the string designator for hours that are &quot;ante meridiem&quot; \n(before noon).\n"
  example: []
  syntax:
    content: public virtual string AMDesignator { get; }
    parameters: []
    return:
      type: System.String
      description: The AM designator.
    content.vb: Public Overridable ReadOnly Property AMDesignator As String
  overload: System.Windows.Controls.TimeGlobalizationInfo.AMDesignator*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Windows.Controls.TimeGlobalizationInfo.PMDesignator
  commentId: P:System.Windows.Controls.TimeGlobalizationInfo.PMDesignator
  id: PMDesignator
  parent: System.Windows.Controls.TimeGlobalizationInfo
  langs:
  - csharp
  - vb
  name: PMDesignator
  nameWithType: TimeGlobalizationInfo.PMDesignator
  fullName: System.Windows.Controls.TimeGlobalizationInfo.PMDesignator
  type: Property
  source:
    remote:
      path: src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: PMDesignator
    path: ../OpenSilverGit/src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
    startLine: 85
  assemblies:
  - OpenSilver.Controls.Input.Toolkit
  namespace: System.Windows.Controls
  summary: "\nGets the string designator for hours that are &quot;post meridiem&quot; \n(after noon).\n"
  example: []
  syntax:
    content: public virtual string PMDesignator { get; }
    parameters: []
    return:
      type: System.String
      description: The PM designator.
    content.vb: Public Overridable ReadOnly Property PMDesignator As String
  overload: System.Windows.Controls.TimeGlobalizationInfo.PMDesignator*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Windows.Controls.TimeGlobalizationInfo.GetTransformedFormat(System.String)
  commentId: M:System.Windows.Controls.TimeGlobalizationInfo.GetTransformedFormat(System.String)
  id: GetTransformedFormat(System.String)
  parent: System.Windows.Controls.TimeGlobalizationInfo
  langs:
  - csharp
  - vb
  name: GetTransformedFormat(String)
  nameWithType: TimeGlobalizationInfo.GetTransformedFormat(String)
  fullName: System.Windows.Controls.TimeGlobalizationInfo.GetTransformedFormat(System.String)
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetTransformedFormat
    path: ../OpenSilverGit/src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
    startLine: 98
  assemblies:
  - OpenSilver.Controls.Input.Toolkit
  namespace: System.Windows.Controls
  summary: "\nTransforms a format to a format that only allows the characters\nh, m, s, t, H and the defined TimeSeparators (: and .).\nAlso takes into account the rule that a single TimeCharacter should\nbe followed by a space.\n"
  example: []
  syntax:
    content: protected virtual string GetTransformedFormat(string format)
    parameters:
    - id: format
      type: System.String
      description: The format that needs to be transformed.
    return:
      type: System.String
      description: A format containing only the expected characters.
    content.vb: Protected Overridable Function GetTransformedFormat(format As String) As String
  overload: System.Windows.Controls.TimeGlobalizationInfo.GetTransformedFormat*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.Controls.TimeGlobalizationInfo.MapDigitToCharacter(System.Int32)
  commentId: M:System.Windows.Controls.TimeGlobalizationInfo.MapDigitToCharacter(System.Int32)
  id: MapDigitToCharacter(System.Int32)
  parent: System.Windows.Controls.TimeGlobalizationInfo
  langs:
  - csharp
  - vb
  name: MapDigitToCharacter(Int32)
  nameWithType: TimeGlobalizationInfo.MapDigitToCharacter(Int32)
  fullName: System.Windows.Controls.TimeGlobalizationInfo.MapDigitToCharacter(System.Int32)
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MapDigitToCharacter
    path: ../OpenSilverGit/src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
    startLine: 126
  assemblies:
  - OpenSilver.Controls.Input.Toolkit
  namespace: System.Windows.Controls
  summary: "\nReturns the global representation of each integer formatted \nby the TimeGlobalizationInfo.\n"
  example: []
  syntax:
    content: protected virtual char MapDigitToCharacter(int input)
    parameters:
    - id: input
      type: System.Int32
      description: >-
        Character that will be mapped to a different

        character.
    return:
      type: System.Char
      description: The global version of a character that represents the input.
    content.vb: Protected Overridable Function MapDigitToCharacter(input As Integer) As Char
  overload: System.Windows.Controls.TimeGlobalizationInfo.MapDigitToCharacter*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.Controls.TimeGlobalizationInfo.MapCharacterToDigit(System.Char)
  commentId: M:System.Windows.Controls.TimeGlobalizationInfo.MapCharacterToDigit(System.Char)
  id: MapCharacterToDigit(System.Char)
  parent: System.Windows.Controls.TimeGlobalizationInfo
  langs:
  - csharp
  - vb
  name: MapCharacterToDigit(Char)
  nameWithType: TimeGlobalizationInfo.MapCharacterToDigit(Char)
  fullName: System.Windows.Controls.TimeGlobalizationInfo.MapCharacterToDigit(System.Char)
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MapCharacterToDigit
    path: ../OpenSilverGit/src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
    startLine: 141
  assemblies:
  - OpenSilver.Controls.Input.Toolkit
  namespace: System.Windows.Controls
  summary: "\nReturns the European number character of each global representation \nparsed by the TimeGlobalizationInfo.\n"
  remarks: >-
    All characters pass through this method (whitespaces and

    TimeDesignators). Return the input character if no logical mapping

    could be made.
  example: []
  syntax:
    content: protected virtual char MapCharacterToDigit(char input)
    parameters:
    - id: input
      type: System.Char
      description: "The global version of the character that needs \nto be mapped to a regular character."
    return:
      type: System.Char
      description: The character that represents the global version of a character.
    content.vb: Protected Overridable Function MapCharacterToDigit(input As Char) As Char
  overload: System.Windows.Controls.TimeGlobalizationInfo.MapCharacterToDigit*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Windows.Controls.TimeGlobalizationInfo.GetActualTimeParsers(System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser})
  commentId: M:System.Windows.Controls.TimeGlobalizationInfo.GetActualTimeParsers(System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser})
  id: GetActualTimeParsers(System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser})
  parent: System.Windows.Controls.TimeGlobalizationInfo
  langs:
  - csharp
  - vb
  name: GetActualTimeParsers(IEnumerable<TimeParser>)
  nameWithType: TimeGlobalizationInfo.GetActualTimeParsers(IEnumerable<TimeParser>)
  fullName: System.Windows.Controls.TimeGlobalizationInfo.GetActualTimeParsers(System.Collections.Generic.IEnumerable<System.Windows.Controls.TimeParser>)
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetActualTimeParsers
    path: ../OpenSilverGit/src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
    startLine: 153
  assemblies:
  - OpenSilver.Controls.Input.Toolkit
  namespace: System.Windows.Controls
  summary: "\nGets the actual TimeParsers that will be used for parsing.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<TimeParser> GetActualTimeParsers(IEnumerable<TimeParser> parsers)
    parameters:
    - id: parsers
      type: System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser}
      description: The parsers that are currently used by parent.
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser}
      description: >-
        A new collection of parsers that represent the parsers

        this strategy object will use.
    content.vb: Public Overridable Function GetActualTimeParsers(parsers As IEnumerable(Of TimeParser)) As IEnumerable(Of TimeParser)
  overload: System.Windows.Controls.TimeGlobalizationInfo.GetActualTimeParsers*
  nameWithType.vb: TimeGlobalizationInfo.GetActualTimeParsers(IEnumerable(Of TimeParser))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Windows.Controls.TimeGlobalizationInfo.GetActualTimeParsers(System.Collections.Generic.IEnumerable(Of System.Windows.Controls.TimeParser))
  name.vb: GetActualTimeParsers(IEnumerable(Of TimeParser))
- uid: System.Windows.Controls.TimeGlobalizationInfo.FormatTime(System.Nullable{System.DateTime},System.Windows.Controls.ITimeFormat,System.Char[])
  commentId: M:System.Windows.Controls.TimeGlobalizationInfo.FormatTime(System.Nullable{System.DateTime},System.Windows.Controls.ITimeFormat,System.Char[])
  id: FormatTime(System.Nullable{System.DateTime},System.Windows.Controls.ITimeFormat,System.Char[])
  parent: System.Windows.Controls.TimeGlobalizationInfo
  langs:
  - csharp
  - vb
  name: FormatTime(Nullable<DateTime>, ITimeFormat, Char[])
  nameWithType: TimeGlobalizationInfo.FormatTime(Nullable<DateTime>, ITimeFormat, Char[])
  fullName: System.Windows.Controls.TimeGlobalizationInfo.FormatTime(System.Nullable<System.DateTime>, System.Windows.Controls.ITimeFormat, System.Char[])
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: FormatTime
    path: ../OpenSilverGit/src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
    startLine: 178
  assemblies:
  - OpenSilver.Controls.Input.Toolkit
  namespace: System.Windows.Controls
  summary: "\nFormats the specified DateTime to a time string representation.\n"
  remarks: "The TimeFormat will contain TimeCharacters in a certain \norder, like hh:mm:ss. By passing specific TimeCharacters, these\nwill get filtered and the method only returns part of the formatted\nstring. Example: pass &apos;h&apos;, &apos;t&apos;, &apos;H&apos; to get back 4 AM, if the culture\nwas set to en-US."
  example: []
  syntax:
    content: public virtual string FormatTime(DateTime? value, ITimeFormat timeFormat, params char[] timeCharacters)
    parameters:
    - id: value
      type: System.Nullable{System.DateTime}
      description: The DateTime that should be formatted.
    - id: timeFormat
      type: System.Windows.Controls.ITimeFormat
      description: >-
        The time format used to describe how value

        should be formatted.
    - id: timeCharacters
      type: System.Char[]
      description: "The allowed characters in the format. \nLeave empty to indicate that all characters are allowed. See remarks."
    return:
      type: System.String
      description: "\nA string that represents the time part of a DateTime.\n"
    content.vb: Public Overridable Function FormatTime(value As Date?, timeFormat As ITimeFormat, ParamArray timeCharacters As Char()) As String
  overload: System.Windows.Controls.TimeGlobalizationInfo.FormatTime*
  nameWithType.vb: TimeGlobalizationInfo.FormatTime(Nullable(Of DateTime), ITimeFormat, Char())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Windows.Controls.TimeGlobalizationInfo.FormatTime(System.Nullable(Of System.DateTime), System.Windows.Controls.ITimeFormat, System.Char())
  name.vb: FormatTime(Nullable(Of DateTime), ITimeFormat, Char())
- uid: System.Windows.Controls.TimeGlobalizationInfo.ParseTime(System.String,System.Windows.Controls.ITimeFormat,System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser})
  commentId: M:System.Windows.Controls.TimeGlobalizationInfo.ParseTime(System.String,System.Windows.Controls.ITimeFormat,System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser})
  id: ParseTime(System.String,System.Windows.Controls.ITimeFormat,System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser})
  parent: System.Windows.Controls.TimeGlobalizationInfo
  langs:
  - csharp
  - vb
  name: ParseTime(String, ITimeFormat, IEnumerable<TimeParser>)
  nameWithType: TimeGlobalizationInfo.ParseTime(String, ITimeFormat, IEnumerable<TimeParser>)
  fullName: System.Windows.Controls.TimeGlobalizationInfo.ParseTime(System.String, System.Windows.Controls.ITimeFormat, System.Collections.Generic.IEnumerable<System.Windows.Controls.TimeParser>)
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ParseTime
    path: ../OpenSilverGit/src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
    startLine: 227
  assemblies:
  - OpenSilver.Controls.Input.Toolkit
  namespace: System.Windows.Controls
  summary: "\nParses a string into a DateTime using the specified ITimeFormat instance \nand TimeParsers.\n"
  remarks: >
    The date part of the DateTime is irrelevant and will be

    overwritten by the current date.
  example: []
  syntax:
    content: public DateTime? ParseTime(string mappedText, ITimeFormat timeFormat, IEnumerable<TimeParser> timeParsers)
    parameters:
    - id: mappedText
      type: System.String
      description: The text that was entered by the user.
    - id: timeFormat
      type: System.Windows.Controls.ITimeFormat
      description: >-
        The TimeFormat instance used to supply

        formats.
    - id: timeParsers
      type: System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser}
      description: The time parsers.
    return:
      type: System.Nullable{System.DateTime}
      description: "\nA DateTime with a correctly set time part.\n"
    content.vb: Public Function ParseTime(mappedText As String, timeFormat As ITimeFormat, timeParsers As IEnumerable(Of TimeParser)) As Date?
  overload: System.Windows.Controls.TimeGlobalizationInfo.ParseTime*
  nameWithType.vb: TimeGlobalizationInfo.ParseTime(String, ITimeFormat, IEnumerable(Of TimeParser))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.Controls.TimeGlobalizationInfo.ParseTime(System.String, System.Windows.Controls.ITimeFormat, System.Collections.Generic.IEnumerable(Of System.Windows.Controls.TimeParser))
  name.vb: ParseTime(String, ITimeFormat, IEnumerable(Of TimeParser))
- uid: System.Windows.Controls.TimeGlobalizationInfo.TryParseTime(System.String,System.Windows.Controls.ITimeFormat,System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser},System.Nullable{System.DateTime}@)
  commentId: M:System.Windows.Controls.TimeGlobalizationInfo.TryParseTime(System.String,System.Windows.Controls.ITimeFormat,System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser},System.Nullable{System.DateTime}@)
  id: TryParseTime(System.String,System.Windows.Controls.ITimeFormat,System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser},System.Nullable{System.DateTime}@)
  parent: System.Windows.Controls.TimeGlobalizationInfo
  langs:
  - csharp
  - vb
  name: TryParseTime(String, ITimeFormat, IEnumerable<TimeParser>, out Nullable<DateTime>)
  nameWithType: TimeGlobalizationInfo.TryParseTime(String, ITimeFormat, IEnumerable<TimeParser>, out Nullable<DateTime>)
  fullName: System.Windows.Controls.TimeGlobalizationInfo.TryParseTime(System.String, System.Windows.Controls.ITimeFormat, System.Collections.Generic.IEnumerable<System.Windows.Controls.TimeParser>, out System.Nullable<System.DateTime>)
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: TryParseTime
    path: ../OpenSilverGit/src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
    startLine: 266
  assemblies:
  - OpenSilver.Controls.Input.Toolkit
  namespace: System.Windows.Controls
  summary: "\nParses a string into a DateTime using the specified ITimeFormat instance \nand TimeParsers and returns a value that indicates whether the conversion \nsucceeded.\n"
  remarks: >
    The date part of the DateTime is irrelevant and will be

    overwritten by the current date.
  example: []
  syntax:
    content: public bool TryParseTime(string mappedText, ITimeFormat timeFormat, IEnumerable<TimeParser> timeParsers, out DateTime? result)
    parameters:
    - id: mappedText
      type: System.String
      description: The text that was entered by the user.
    - id: timeFormat
      type: System.Windows.Controls.ITimeFormat
      description: >-
        The TimeFormat instance used to supply

        formats.
    - id: timeParsers
      type: System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser}
      description: The time parsers.
    - id: result
      type: System.Nullable{System.DateTime}
      description: A DateTime with a correctly set time part.
    return:
      type: System.Boolean
      description: "\nTrue, if the time was parsed correctly, false if the time was not \nparsed.\n"
    content.vb: Public Function TryParseTime(mappedText As String, timeFormat As ITimeFormat, timeParsers As IEnumerable(Of TimeParser), ByRef result As Date?) As Boolean
  overload: System.Windows.Controls.TimeGlobalizationInfo.TryParseTime*
  nameWithType.vb: TimeGlobalizationInfo.TryParseTime(String, ITimeFormat, IEnumerable(Of TimeParser), ByRef Nullable(Of DateTime))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.Controls.TimeGlobalizationInfo.TryParseTime(System.String, System.Windows.Controls.ITimeFormat, System.Collections.Generic.IEnumerable(Of System.Windows.Controls.TimeParser), ByRef System.Nullable(Of System.DateTime))
  name.vb: TryParseTime(String, ITimeFormat, IEnumerable(Of TimeParser), ByRef Nullable(Of DateTime))
- uid: System.Windows.Controls.TimeGlobalizationInfo.GetTimeUnitAtTextPosition(System.String,System.Int32,System.Windows.Controls.ITimeFormat)
  commentId: M:System.Windows.Controls.TimeGlobalizationInfo.GetTimeUnitAtTextPosition(System.String,System.Int32,System.Windows.Controls.ITimeFormat)
  id: GetTimeUnitAtTextPosition(System.String,System.Int32,System.Windows.Controls.ITimeFormat)
  parent: System.Windows.Controls.TimeGlobalizationInfo
  langs:
  - csharp
  - vb
  name: GetTimeUnitAtTextPosition(String, Int32, ITimeFormat)
  nameWithType: TimeGlobalizationInfo.GetTimeUnitAtTextPosition(String, Int32, ITimeFormat)
  fullName: System.Windows.Controls.TimeGlobalizationInfo.GetTimeUnitAtTextPosition(System.String, System.Int32, System.Windows.Controls.ITimeFormat)
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetTimeUnitAtTextPosition
    path: ../OpenSilverGit/src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
    startLine: 313
  assemblies:
  - OpenSilver.Controls.Input.Toolkit
  namespace: System.Windows.Controls
  summary: "\nGets the time unit that is represented by a text position.\n"
  example: []
  syntax:
    content: public virtual TimeSpan GetTimeUnitAtTextPosition(string text, int textPosition, ITimeFormat timeFormat)
    parameters:
    - id: text
      type: System.String
      description: The text that represents a DateTime.
    - id: textPosition
      type: System.Int32
      description: The location in the text.
    - id: timeFormat
      type: System.Windows.Controls.ITimeFormat
      description: "The time format describe how the text \ncan be parsed to a DateTime."
    return:
      type: System.TimeSpan
      description: "\nThe TimeSpan that is represented by the character at a\nspecific caret position.\n"
    content.vb: Public Overridable Function GetTimeUnitAtTextPosition(text As String, textPosition As Integer, timeFormat As ITimeFormat) As TimeSpan
  overload: System.Windows.Controls.TimeGlobalizationInfo.GetTimeUnitAtTextPosition*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Windows.Controls.TimeGlobalizationInfo.GetTextPositionForTimeUnit(System.String,System.TimeSpan,System.Windows.Controls.ITimeFormat)
  commentId: M:System.Windows.Controls.TimeGlobalizationInfo.GetTextPositionForTimeUnit(System.String,System.TimeSpan,System.Windows.Controls.ITimeFormat)
  id: GetTextPositionForTimeUnit(System.String,System.TimeSpan,System.Windows.Controls.ITimeFormat)
  parent: System.Windows.Controls.TimeGlobalizationInfo
  langs:
  - csharp
  - vb
  name: GetTextPositionForTimeUnit(String, TimeSpan, ITimeFormat)
  nameWithType: TimeGlobalizationInfo.GetTextPositionForTimeUnit(String, TimeSpan, ITimeFormat)
  fullName: System.Windows.Controls.TimeGlobalizationInfo.GetTextPositionForTimeUnit(System.String, System.TimeSpan, System.Windows.Controls.ITimeFormat)
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetTextPositionForTimeUnit
    path: ../OpenSilverGit/src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
    startLine: 442
  assemblies:
  - OpenSilver.Controls.Input.Toolkit
  namespace: System.Windows.Controls
  summary: "\nGets the position for a time unit in a string that can be parsed by \nthe specified ITimeFormat.\n"
  example: []
  syntax:
    content: public virtual int GetTextPositionForTimeUnit(string text, TimeSpan timeSpan, ITimeFormat timeFormat)
    parameters:
    - id: text
      type: System.String
      description: The text that represents a DateTime.
    - id: timeSpan
      type: System.TimeSpan
      description: The time span that is searched for.
    - id: timeFormat
      type: System.Windows.Controls.ITimeFormat
      description: >-
        The time format that describes how this text can be

        parsed to a DateTime.
    return:
      type: System.Int32
      description: "\nThe position in the text that corresponds to the TimeSpan or\n-1 if none was found.\n"
    content.vb: Public Overridable Function GetTextPositionForTimeUnit(text As String, timeSpan As TimeSpan, timeFormat As ITimeFormat) As Integer
  overload: System.Windows.Controls.TimeGlobalizationInfo.GetTextPositionForTimeUnit*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Windows.Controls.TimeGlobalizationInfo.OnIncrement(System.DateTime,System.TimeSpan)
  commentId: M:System.Windows.Controls.TimeGlobalizationInfo.OnIncrement(System.DateTime,System.TimeSpan)
  id: OnIncrement(System.DateTime,System.TimeSpan)
  parent: System.Windows.Controls.TimeGlobalizationInfo
  langs:
  - csharp
  - vb
  name: OnIncrement(DateTime, TimeSpan)
  nameWithType: TimeGlobalizationInfo.OnIncrement(DateTime, TimeSpan)
  fullName: System.Windows.Controls.TimeGlobalizationInfo.OnIncrement(System.DateTime, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnIncrement
    path: ../OpenSilverGit/src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
    startLine: 484
  assemblies:
  - OpenSilver.Controls.Input.Toolkit
  namespace: System.Windows.Controls
  summary: "\nPerforms addition of a date time and a time span in a global context.\n"
  example: []
  syntax:
    content: public virtual DateTime OnIncrement(DateTime value, TimeSpan timeSpan)
    parameters:
    - id: value
      type: System.DateTime
      description: The value.
    - id: timeSpan
      type: System.TimeSpan
      description: The time span.
    return:
      type: System.DateTime
      description: The DateTime after incrementing by TimeSpan.
    content.vb: Public Overridable Function OnIncrement(value As Date, timeSpan As TimeSpan) As Date
  overload: System.Windows.Controls.TimeGlobalizationInfo.OnIncrement*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Windows.Controls.TimeGlobalizationInfo.OnDecrement(System.DateTime,System.TimeSpan)
  commentId: M:System.Windows.Controls.TimeGlobalizationInfo.OnDecrement(System.DateTime,System.TimeSpan)
  id: OnDecrement(System.DateTime,System.TimeSpan)
  parent: System.Windows.Controls.TimeGlobalizationInfo
  langs:
  - csharp
  - vb
  name: OnDecrement(DateTime, TimeSpan)
  nameWithType: TimeGlobalizationInfo.OnDecrement(DateTime, TimeSpan)
  fullName: System.Windows.Controls.TimeGlobalizationInfo.OnDecrement(System.DateTime, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: OnDecrement
    path: ../OpenSilverGit/src/Runtime/Controls.Input.Toolkit/TimeInput/TimeGlobalizationInfo.cs
    startLine: 501
  assemblies:
  - OpenSilver.Controls.Input.Toolkit
  namespace: System.Windows.Controls
  summary: "\nSubtracts a time span from a date time in a global context.\n"
  example: []
  syntax:
    content: public virtual DateTime OnDecrement(DateTime value, TimeSpan timeSpan)
    parameters:
    - id: value
      type: System.DateTime
      description: The value.
    - id: timeSpan
      type: System.TimeSpan
      description: The time span.
    return:
      type: System.DateTime
      description: The DateTime after decrementing by TimeSpan.
    content.vb: Public Overridable Function OnDecrement(value As Date, timeSpan As TimeSpan) As Date
  overload: System.Windows.Controls.TimeGlobalizationInfo.OnDecrement*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Windows.Controls
  commentId: N:System.Windows.Controls
  name: System.Windows.Controls
  nameWithType: System.Windows.Controls
  fullName: System.Windows.Controls
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.Windows.Controls.TimeGlobalizationInfo.ActualCulture*
  commentId: Overload:System.Windows.Controls.TimeGlobalizationInfo.ActualCulture
  name: ActualCulture
  nameWithType: TimeGlobalizationInfo.ActualCulture
  fullName: System.Windows.Controls.TimeGlobalizationInfo.ActualCulture
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: System.Windows.Controls.TimeGlobalizationInfo.TimeSeparators*
  commentId: Overload:System.Windows.Controls.TimeGlobalizationInfo.TimeSeparators
  name: TimeSeparators
  nameWithType: TimeGlobalizationInfo.TimeSeparators
  fullName: System.Windows.Controls.TimeGlobalizationInfo.TimeSeparators
- uid: System.Collections.Generic.IList{System.Char}
  commentId: T:System.Collections.Generic.IList{System.Char}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Char>
  nameWithType: IList<Char>
  fullName: System.Collections.Generic.IList<System.Char>
  nameWithType.vb: IList(Of Char)
  fullName.vb: System.Collections.Generic.IList(Of System.Char)
  name.vb: IList(Of Char)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Windows.Controls.TimeGlobalizationInfo.AMDesignator*
  commentId: Overload:System.Windows.Controls.TimeGlobalizationInfo.AMDesignator
  name: AMDesignator
  nameWithType: TimeGlobalizationInfo.AMDesignator
  fullName: System.Windows.Controls.TimeGlobalizationInfo.AMDesignator
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Controls.TimeGlobalizationInfo.PMDesignator*
  commentId: Overload:System.Windows.Controls.TimeGlobalizationInfo.PMDesignator
  name: PMDesignator
  nameWithType: TimeGlobalizationInfo.PMDesignator
  fullName: System.Windows.Controls.TimeGlobalizationInfo.PMDesignator
- uid: System.Windows.Controls.TimeGlobalizationInfo.GetTransformedFormat*
  commentId: Overload:System.Windows.Controls.TimeGlobalizationInfo.GetTransformedFormat
  name: GetTransformedFormat
  nameWithType: TimeGlobalizationInfo.GetTransformedFormat
  fullName: System.Windows.Controls.TimeGlobalizationInfo.GetTransformedFormat
- uid: System.Windows.Controls.TimeGlobalizationInfo.MapDigitToCharacter*
  commentId: Overload:System.Windows.Controls.TimeGlobalizationInfo.MapDigitToCharacter
  name: MapDigitToCharacter
  nameWithType: TimeGlobalizationInfo.MapDigitToCharacter
  fullName: System.Windows.Controls.TimeGlobalizationInfo.MapDigitToCharacter
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Windows.Controls.TimeGlobalizationInfo.MapCharacterToDigit*
  commentId: Overload:System.Windows.Controls.TimeGlobalizationInfo.MapCharacterToDigit
  name: MapCharacterToDigit
  nameWithType: TimeGlobalizationInfo.MapCharacterToDigit
  fullName: System.Windows.Controls.TimeGlobalizationInfo.MapCharacterToDigit
- uid: System.Windows.Controls.TimeGlobalizationInfo.GetActualTimeParsers*
  commentId: Overload:System.Windows.Controls.TimeGlobalizationInfo.GetActualTimeParsers
  name: GetActualTimeParsers
  nameWithType: TimeGlobalizationInfo.GetActualTimeParsers
  fullName: System.Windows.Controls.TimeGlobalizationInfo.GetActualTimeParsers
- uid: System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser}
  commentId: T:System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TimeParser>
  nameWithType: IEnumerable<TimeParser>
  fullName: System.Collections.Generic.IEnumerable<System.Windows.Controls.TimeParser>
  nameWithType.vb: IEnumerable(Of TimeParser)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Windows.Controls.TimeParser)
  name.vb: IEnumerable(Of TimeParser)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Controls.TimeParser
    name: TimeParser
    nameWithType: TimeParser
    fullName: System.Windows.Controls.TimeParser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Controls.TimeParser
    name: TimeParser
    nameWithType: TimeParser
    fullName: System.Windows.Controls.TimeParser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Controls.TimeGlobalizationInfo.FormatTime*
  commentId: Overload:System.Windows.Controls.TimeGlobalizationInfo.FormatTime
  name: FormatTime
  nameWithType: TimeGlobalizationInfo.FormatTime
  fullName: System.Windows.Controls.TimeGlobalizationInfo.FormatTime
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Controls.ITimeFormat
  commentId: T:System.Windows.Controls.ITimeFormat
  parent: System.Windows.Controls
  name: ITimeFormat
  nameWithType: ITimeFormat
  fullName: System.Windows.Controls.ITimeFormat
- uid: System.Char[]
  isExternal: true
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullName.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Controls.TimeGlobalizationInfo.ParseTime*
  commentId: Overload:System.Windows.Controls.TimeGlobalizationInfo.ParseTime
  name: ParseTime
  nameWithType: TimeGlobalizationInfo.ParseTime
  fullName: System.Windows.Controls.TimeGlobalizationInfo.ParseTime
- uid: System.Windows.Controls.TimeGlobalizationInfo.TryParseTime*
  commentId: Overload:System.Windows.Controls.TimeGlobalizationInfo.TryParseTime
  name: TryParseTime
  nameWithType: TimeGlobalizationInfo.TryParseTime
  fullName: System.Windows.Controls.TimeGlobalizationInfo.TryParseTime
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Controls.TimeGlobalizationInfo.GetTimeUnitAtTextPosition*
  commentId: Overload:System.Windows.Controls.TimeGlobalizationInfo.GetTimeUnitAtTextPosition
  name: GetTimeUnitAtTextPosition
  nameWithType: TimeGlobalizationInfo.GetTimeUnitAtTextPosition
  fullName: System.Windows.Controls.TimeGlobalizationInfo.GetTimeUnitAtTextPosition
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Windows.Controls.TimeGlobalizationInfo.GetTextPositionForTimeUnit*
  commentId: Overload:System.Windows.Controls.TimeGlobalizationInfo.GetTextPositionForTimeUnit
  name: GetTextPositionForTimeUnit
  nameWithType: TimeGlobalizationInfo.GetTextPositionForTimeUnit
  fullName: System.Windows.Controls.TimeGlobalizationInfo.GetTextPositionForTimeUnit
- uid: System.Windows.Controls.TimeGlobalizationInfo.OnIncrement*
  commentId: Overload:System.Windows.Controls.TimeGlobalizationInfo.OnIncrement
  name: OnIncrement
  nameWithType: TimeGlobalizationInfo.OnIncrement
  fullName: System.Windows.Controls.TimeGlobalizationInfo.OnIncrement
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Windows.Controls.TimeGlobalizationInfo.OnDecrement*
  commentId: Overload:System.Windows.Controls.TimeGlobalizationInfo.OnDecrement
  name: OnDecrement
  nameWithType: TimeGlobalizationInfo.OnDecrement
  fullName: System.Windows.Controls.TimeGlobalizationInfo.OnDecrement
