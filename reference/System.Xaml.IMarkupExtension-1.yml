### YamlMime:ManagedReference
items:
- uid: System.Xaml.IMarkupExtension`1
  commentId: T:System.Xaml.IMarkupExtension`1
  id: IMarkupExtension`1
  parent: System.Xaml
  children:
  - System.Xaml.IMarkupExtension`1.ProvideValue(System.IServiceProvider)
  langs:
  - csharp
  - vb
  name: IMarkupExtension<T>
  nameWithType: IMarkupExtension<T>
  fullName: System.Xaml.IMarkupExtension<T>
  type: Interface
  source:
    remote:
      path: src/Runtime/OpenSilver.Xaml/System.Xaml/IMarkupExtension.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IMarkupExtension
    path: ../OpenSilverGit/src/Runtime/OpenSilver.Xaml/System.Xaml/IMarkupExtension.cs
    startLine: 26
  assemblies:
  - OpenSilver.Xaml
  namespace: System.Xaml
  summary: "\nProvides an interface basis for XAML markup extension implementations that can be supported\nby Silverlight XAML processors.\n"
  example: []
  syntax:
    content: >-
      public interface IMarkupExtension<out T>
          where T : class
    typeParameters:
    - id: T
      description: "\nThe type of the object that is returned by the <xref href=\"System.Xaml.IMarkupExtension%601.ProvideValue(System.IServiceProvider)\" data-throw-if-not-resolved=\"false\"></xref>\nimplementation. This type parameter is covariant. That is, you can use either \nthe type you specified or any type that is more derived.\n"
    content.vb: Public Interface IMarkupExtension(Of Out T As Class)
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  nameWithType.vb: IMarkupExtension(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: System.Xaml.IMarkupExtension(Of T)
  name.vb: IMarkupExtension(Of T)
- uid: System.Xaml.IMarkupExtension`1.ProvideValue(System.IServiceProvider)
  commentId: M:System.Xaml.IMarkupExtension`1.ProvideValue(System.IServiceProvider)
  id: ProvideValue(System.IServiceProvider)
  parent: System.Xaml.IMarkupExtension`1
  langs:
  - csharp
  - vb
  name: ProvideValue(IServiceProvider)
  nameWithType: IMarkupExtension<T>.ProvideValue(IServiceProvider)
  fullName: System.Xaml.IMarkupExtension<T>.ProvideValue(System.IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Runtime/OpenSilver.Xaml/System.Xaml/IMarkupExtension.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ProvideValue
    path: ../OpenSilverGit/src/Runtime/OpenSilver.Xaml/System.Xaml/IMarkupExtension.cs
    startLine: 39
  assemblies:
  - OpenSilver.Xaml
  namespace: System.Xaml
  summary: "\nReturns an object that is provided as the value of the target property for the\nmarkup extension.\n"
  example: []
  syntax:
    content: T ProvideValue(IServiceProvider serviceProvider)
    parameters:
    - id: serviceProvider
      type: System.IServiceProvider
      description: "\nA service provider helper that can provide services for the markup extension.\n"
    return:
      type: '{T}'
      description: "\nThe value to set on the property where the extension is applied.\n"
    content.vb: Function ProvideValue(serviceProvider As IServiceProvider) As T
  overload: System.Xaml.IMarkupExtension`1.ProvideValue*
  nameWithType.vb: IMarkupExtension(Of T).ProvideValue(IServiceProvider)
  fullName.vb: System.Xaml.IMarkupExtension(Of T).ProvideValue(System.IServiceProvider)
references:
- uid: System.Xaml.IMarkupExtension`1.ProvideValue(System.IServiceProvider)
  commentId: M:System.Xaml.IMarkupExtension`1.ProvideValue(System.IServiceProvider)
  isExternal: true
  name: ProvideValue(IServiceProvider)
  nameWithType: IMarkupExtension<T>.ProvideValue(IServiceProvider)
  fullName: System.Xaml.IMarkupExtension<T>.ProvideValue(System.IServiceProvider)
  nameWithType.vb: IMarkupExtension(Of T).ProvideValue(IServiceProvider)
  fullName.vb: System.Xaml.IMarkupExtension(Of T).ProvideValue(System.IServiceProvider)
  spec.csharp:
  - uid: System.Xaml.IMarkupExtension`1.ProvideValue(System.IServiceProvider)
    name: ProvideValue
    nameWithType: IMarkupExtension<T>.ProvideValue
    fullName: System.Xaml.IMarkupExtension<T>.ProvideValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xaml.IMarkupExtension`1.ProvideValue(System.IServiceProvider)
    name: ProvideValue
    nameWithType: IMarkupExtension(Of T).ProvideValue
    fullName: System.Xaml.IMarkupExtension(Of T).ProvideValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xaml
  commentId: N:System.Xaml
  name: System.Xaml
  nameWithType: System.Xaml
  fullName: System.Xaml
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: System.Xaml.IMarkupExtension`1.ProvideValue*
  commentId: Overload:System.Xaml.IMarkupExtension`1.ProvideValue
  name: ProvideValue
  nameWithType: IMarkupExtension<T>.ProvideValue
  fullName: System.Xaml.IMarkupExtension<T>.ProvideValue
  nameWithType.vb: IMarkupExtension(Of T).ProvideValue
  fullName.vb: System.Xaml.IMarkupExtension(Of T).ProvideValue
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: T
  name: T
  nameWithType: T
  fullName: T
