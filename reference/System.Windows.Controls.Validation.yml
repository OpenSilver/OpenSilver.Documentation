### YamlMime:ManagedReference
items:
- uid: System.Windows.Controls.Validation
  commentId: T:System.Windows.Controls.Validation
  id: Validation
  parent: System.Windows.Controls
  children:
  - System.Windows.Controls.Validation.ClearInvalid(System.Windows.Data.BindingExpression)
  - System.Windows.Controls.Validation.ErrorsProperty
  - System.Windows.Controls.Validation.GetErrors(System.Windows.DependencyObject)
  - System.Windows.Controls.Validation.GetHasError(System.Windows.DependencyObject)
  - System.Windows.Controls.Validation.HasErrorProperty
  - System.Windows.Controls.Validation.MarkInvalid(System.Windows.Data.BindingExpression,System.Windows.Controls.ValidationError)
  langs:
  - csharp
  - vb
  name: Validation
  nameWithType: Validation
  fullName: System.Windows.Controls.Validation
  type: Class
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/Validation.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Validation
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/Validation.cs
    startLine: 24
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nProvides methods and attached properties that support data validation and govern\nthe visual state of the control.\n"
  example: []
  syntax:
    content: public static class Validation
    content.vb: Public Module Validation
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: System.Windows.Controls.Validation.ErrorsProperty
  commentId: F:System.Windows.Controls.Validation.ErrorsProperty
  id: ErrorsProperty
  parent: System.Windows.Controls.Validation
  langs:
  - csharp
  - vb
  name: ErrorsProperty
  nameWithType: Validation.ErrorsProperty
  fullName: System.Windows.Controls.Validation.ErrorsProperty
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/Validation.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ErrorsProperty
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/Validation.cs
    startLine: 29
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nIdentifies the <xref href=\"System.Windows.Controls.Validation\" data-throw-if-not-resolved=\"false\"></xref> Errors attached property.\n"
  example: []
  syntax:
    content: public static readonly DependencyProperty ErrorsProperty
    return:
      type: System.Windows.DependencyProperty
    content.vb: Public Shared ReadOnly ErrorsProperty As DependencyProperty
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.Controls.Validation.GetErrors(System.Windows.DependencyObject)
  commentId: M:System.Windows.Controls.Validation.GetErrors(System.Windows.DependencyObject)
  id: GetErrors(System.Windows.DependencyObject)
  parent: System.Windows.Controls.Validation
  langs:
  - csharp
  - vb
  name: GetErrors(DependencyObject)
  nameWithType: Validation.GetErrors(DependencyObject)
  fullName: System.Windows.Controls.Validation.GetErrors(System.Windows.DependencyObject)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/Validation.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetErrors
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/Validation.cs
    startLine: 49
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGets the value of the <xref href=\"System.Windows.Controls.Validation\" data-throw-if-not-resolved=\"false\"></xref> Errors attached\nproperty of the specified element.\n"
  example: []
  syntax:
    content: public static ReadOnlyObservableCollection<ValidationError> GetErrors(DependencyObject element)
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "\nThe <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref> object to read the value from.\n"
    return:
      type: System.Collections.ObjectModel.ReadOnlyObservableCollection{System.Windows.Controls.ValidationError}
      description: "\nA <xref href=\"System.Collections.ObjectModel.ReadOnlyObservableCollection%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public Shared Function GetErrors(element As DependencyObject) As ReadOnlyObservableCollection(Of ValidationError)
  overload: System.Windows.Controls.Validation.GetErrors*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nelement is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.Validation.HasErrorProperty
  commentId: F:System.Windows.Controls.Validation.HasErrorProperty
  id: HasErrorProperty
  parent: System.Windows.Controls.Validation
  langs:
  - csharp
  - vb
  name: HasErrorProperty
  nameWithType: Validation.HasErrorProperty
  fullName: System.Windows.Controls.Validation.HasErrorProperty
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/Validation.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: HasErrorProperty
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/Validation.cs
    startLine: 92
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nIdentifies the <xref href=\"System.Windows.Controls.Validation\" data-throw-if-not-resolved=\"false\"></xref> HasError attached property.\n"
  example: []
  syntax:
    content: public static readonly DependencyProperty HasErrorProperty
    return:
      type: System.Windows.DependencyProperty
    content.vb: Public Shared ReadOnly HasErrorProperty As DependencyProperty
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.Controls.Validation.GetHasError(System.Windows.DependencyObject)
  commentId: M:System.Windows.Controls.Validation.GetHasError(System.Windows.DependencyObject)
  id: GetHasError(System.Windows.DependencyObject)
  parent: System.Windows.Controls.Validation
  langs:
  - csharp
  - vb
  name: GetHasError(DependencyObject)
  nameWithType: Validation.GetHasError(DependencyObject)
  fullName: System.Windows.Controls.Validation.GetHasError(System.Windows.DependencyObject)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/Validation.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetHasError
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/Validation.cs
    startLine: 113
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGets the value of the <xref href=\"System.Windows.Controls.Validation\" data-throw-if-not-resolved=\"false\"></xref> HasError attached\nproperty of the specified element.\n"
  example: []
  syntax:
    content: public static bool GetHasError(DependencyObject element)
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "\nThe <xref href=\"System.Windows.UIElement\" data-throw-if-not-resolved=\"false\"></xref> object to read the value from.\n"
    return:
      type: System.Boolean
      description: "\nThe value of the <xref href=\"System.Windows.Controls.Validation\" data-throw-if-not-resolved=\"false\"></xref> HasError attached property\nof the specified element.\n"
    content.vb: Public Shared Function GetHasError(element As DependencyObject) As Boolean
  overload: System.Windows.Controls.Validation.GetHasError*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nelement is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.Validation.ClearInvalid(System.Windows.Data.BindingExpression)
  commentId: M:System.Windows.Controls.Validation.ClearInvalid(System.Windows.Data.BindingExpression)
  id: ClearInvalid(System.Windows.Data.BindingExpression)
  parent: System.Windows.Controls.Validation
  langs:
  - csharp
  - vb
  name: ClearInvalid(BindingExpression)
  nameWithType: Validation.ClearInvalid(BindingExpression)
  fullName: System.Windows.Controls.Validation.ClearInvalid(System.Windows.Data.BindingExpression)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/Validation.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ClearInvalid
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/Validation.cs
    startLine: 132
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nClears the ValidationError that was set through a call\nto MarkInvalid or a previously failed validation of that BindingExpression.\n"
  example: []
  syntax:
    content: public static void ClearInvalid(BindingExpression bindingExpression)
    parameters:
    - id: bindingExpression
      type: System.Windows.Data.BindingExpression
      description: "\nThe object to turn valid.\n"
    content.vb: Public Shared Sub ClearInvalid(bindingExpression As BindingExpression)
  overload: System.Windows.Controls.Validation.ClearInvalid*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nbindingExpression is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.Validation.MarkInvalid(System.Windows.Data.BindingExpression,System.Windows.Controls.ValidationError)
  commentId: M:System.Windows.Controls.Validation.MarkInvalid(System.Windows.Data.BindingExpression,System.Windows.Controls.ValidationError)
  id: MarkInvalid(System.Windows.Data.BindingExpression,System.Windows.Controls.ValidationError)
  parent: System.Windows.Controls.Validation
  langs:
  - csharp
  - vb
  name: MarkInvalid(BindingExpression, ValidationError)
  nameWithType: Validation.MarkInvalid(BindingExpression, ValidationError)
  fullName: System.Windows.Controls.Validation.MarkInvalid(System.Windows.Data.BindingExpression, System.Windows.Controls.ValidationError)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/Validation.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: MarkInvalid
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/Validation.cs
    startLine: 156
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nMark this BindingExpression as invalid.  If the BindingExpression has been\nexplicitly marked invalid in this way, then it will remain\ninvalid until ClearInvalid is called or another transfer to the source validates successfully.\n"
  example: []
  syntax:
    content: public static void MarkInvalid(BindingExpression bindingExpression, ValidationError validationError)
    parameters:
    - id: bindingExpression
      type: System.Windows.Data.BindingExpression
      description: "\nThe <xref href=\"System.Windows.Data.BindingExpression\" data-throw-if-not-resolved=\"false\"></xref> object to mark as invalid.\n"
    - id: validationError
      type: System.Windows.Controls.ValidationError
      description: "\nThe <xref href=\"System.Windows.Controls.ValidationError\" data-throw-if-not-resolved=\"false\"></xref> object to use.\n"
    content.vb: Public Shared Sub MarkInvalid(bindingExpression As BindingExpression, validationError As ValidationError)
  overload: System.Windows.Controls.Validation.MarkInvalid*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nbindingExpression is null or validationError is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Windows.Controls
  commentId: N:System.Windows.Controls
  name: System.Windows.Controls
  nameWithType: System.Windows.Controls
  fullName: System.Windows.Controls
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.Windows.Controls.Validation
  commentId: T:System.Windows.Controls.Validation
  name: Validation
  nameWithType: Validation
  fullName: System.Windows.Controls.Validation
- uid: System.Windows.DependencyProperty
  commentId: T:System.Windows.DependencyProperty
  parent: System.Windows
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows
  commentId: N:System.Windows
  name: System.Windows
  nameWithType: System.Windows
  fullName: System.Windows
- uid: System.Windows.UIElement
  commentId: T:System.Windows.UIElement
  parent: System.Windows
  name: UIElement
  nameWithType: UIElement
  fullName: System.Windows.UIElement
- uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1
  isExternal: true
  name: ReadOnlyObservableCollection<T>
  nameWithType: ReadOnlyObservableCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<T>
  nameWithType.vb: ReadOnlyObservableCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of T)
  name.vb: ReadOnlyObservableCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
    name: ReadOnlyObservableCollection
    nameWithType: ReadOnlyObservableCollection
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
    name: ReadOnlyObservableCollection
    nameWithType: ReadOnlyObservableCollection
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.Windows.Controls.Validation.GetErrors*
  commentId: Overload:System.Windows.Controls.Validation.GetErrors
  name: GetErrors
  nameWithType: Validation.GetErrors
  fullName: System.Windows.Controls.Validation.GetErrors
- uid: System.Windows.DependencyObject
  commentId: T:System.Windows.DependencyObject
  parent: System.Windows
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Collections.ObjectModel.ReadOnlyObservableCollection{System.Windows.Controls.ValidationError}
  commentId: T:System.Collections.ObjectModel.ReadOnlyObservableCollection{System.Windows.Controls.ValidationError}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
  name: ReadOnlyObservableCollection<ValidationError>
  nameWithType: ReadOnlyObservableCollection<ValidationError>
  fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<System.Windows.Controls.ValidationError>
  nameWithType.vb: ReadOnlyObservableCollection(Of ValidationError)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of System.Windows.Controls.ValidationError)
  name.vb: ReadOnlyObservableCollection(Of ValidationError)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
    name: ReadOnlyObservableCollection
    nameWithType: ReadOnlyObservableCollection
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Controls.ValidationError
    name: ValidationError
    nameWithType: ValidationError
    fullName: System.Windows.Controls.ValidationError
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
    name: ReadOnlyObservableCollection
    nameWithType: ReadOnlyObservableCollection
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Controls.ValidationError
    name: ValidationError
    nameWithType: ValidationError
    fullName: System.Windows.Controls.ValidationError
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.Windows.Controls.Validation.GetHasError*
  commentId: Overload:System.Windows.Controls.Validation.GetHasError
  name: GetHasError
  nameWithType: Validation.GetHasError
  fullName: System.Windows.Controls.Validation.GetHasError
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Controls.Validation.ClearInvalid*
  commentId: Overload:System.Windows.Controls.Validation.ClearInvalid
  name: ClearInvalid
  nameWithType: Validation.ClearInvalid
  fullName: System.Windows.Controls.Validation.ClearInvalid
- uid: System.Windows.Data.BindingExpression
  commentId: T:System.Windows.Data.BindingExpression
  parent: System.Windows.Data
  name: BindingExpression
  nameWithType: BindingExpression
  fullName: System.Windows.Data.BindingExpression
- uid: System.Windows.Data
  commentId: N:System.Windows.Data
  name: System.Windows.Data
  nameWithType: System.Windows.Data
  fullName: System.Windows.Data
- uid: System.Windows.Controls.ValidationError
  commentId: T:System.Windows.Controls.ValidationError
  parent: System.Windows.Controls
  name: ValidationError
  nameWithType: ValidationError
  fullName: System.Windows.Controls.ValidationError
- uid: System.Windows.Controls.Validation.MarkInvalid*
  commentId: Overload:System.Windows.Controls.Validation.MarkInvalid
  name: MarkInvalid
  nameWithType: Validation.MarkInvalid
  fullName: System.Windows.Controls.Validation.MarkInvalid
