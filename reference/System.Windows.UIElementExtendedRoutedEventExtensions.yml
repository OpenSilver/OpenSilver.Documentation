### YamlMime:ManagedReference
items:
- uid: System.Windows.UIElementExtendedRoutedEventExtensions
  commentId: T:System.Windows.UIElementExtendedRoutedEventExtensions
  id: UIElementExtendedRoutedEventExtensions
  parent: System.Windows
  children:
  - System.Windows.UIElementExtendedRoutedEventExtensions.AddHandler(System.Windows.UIElement,Microsoft.Windows.ExtendedRoutedEvent,System.Delegate,System.Boolean)
  - System.Windows.UIElementExtendedRoutedEventExtensions.RemoveHandler(System.Windows.UIElement,Microsoft.Windows.ExtendedRoutedEvent,System.Delegate)
  langs:
  - csharp
  - vb
  name: UIElementExtendedRoutedEventExtensions
  nameWithType: UIElementExtendedRoutedEventExtensions
  fullName: System.Windows.UIElementExtendedRoutedEventExtensions
  type: Class
  source:
    remote:
      path: src/Runtime/Controls.Toolkit/DragDrop/UIElementExtendedRoutedEventExtensions.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: UIElementExtendedRoutedEventExtensions
    path: ../OpenSilverGit/src/Runtime/Controls.Toolkit/DragDrop/UIElementExtendedRoutedEventExtensions.cs
    startLine: 20
  assemblies:
  - OpenSilver.Controls.Toolkit
  namespace: System.Windows
  summary: "\nThis class contains extension methods that mimic the \nAddHandler/RemoveHandler methods for routed events.\n"
  remarks: "\nThese methods are in the System.Windows namespace so that they can be\nused as extension methods without bringing the Microsoft.Windows\nnamespace into the scope.\n"
  example: []
  syntax:
    content: public static class UIElementExtendedRoutedEventExtensions
    content.vb: Public Module UIElementExtendedRoutedEventExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: System.Windows.UIElementExtendedRoutedEventExtensions.AddHandler(System.Windows.UIElement,Microsoft.Windows.ExtendedRoutedEvent,System.Delegate,System.Boolean)
  commentId: M:System.Windows.UIElementExtendedRoutedEventExtensions.AddHandler(System.Windows.UIElement,Microsoft.Windows.ExtendedRoutedEvent,System.Delegate,System.Boolean)
  id: AddHandler(System.Windows.UIElement,Microsoft.Windows.ExtendedRoutedEvent,System.Delegate,System.Boolean)
  isExtensionMethod: true
  parent: System.Windows.UIElementExtendedRoutedEventExtensions
  langs:
  - csharp
  - vb
  name: AddHandler(UIElement, ExtendedRoutedEvent, Delegate, Boolean)
  nameWithType: UIElementExtendedRoutedEventExtensions.AddHandler(UIElement, ExtendedRoutedEvent, Delegate, Boolean)
  fullName: System.Windows.UIElementExtendedRoutedEventExtensions.AddHandler(System.Windows.UIElement, Microsoft.Windows.ExtendedRoutedEvent, System.Delegate, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.Toolkit/DragDrop/UIElementExtendedRoutedEventExtensions.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: AddHandler
    path: ../OpenSilverGit/src/Runtime/Controls.Toolkit/DragDrop/UIElementExtendedRoutedEventExtensions.cs
    startLine: 45
  assemblies:
  - OpenSilver.Controls.Toolkit
  namespace: System.Windows
  summary: "\nAdds a routed event handler for a specified routed event, adding the handler\nto the handler collection on the current element.\n"
  example: []
  syntax:
    content: public static void AddHandler(this UIElement that, ExtendedRoutedEvent routedEvent, Delegate handler, bool handledEventsToo)
    parameters:
    - id: that
      type: System.Windows.UIElement
      description: The element to add a handler for.
    - id: routedEvent
      type: Microsoft.Windows.ExtendedRoutedEvent
      description: An identifier for the routed event to be handled.
    - id: handler
      type: System.Delegate
      description: A reference to the handler implementation.
    - id: handledEventsToo
      type: System.Boolean
      description: >-
        True to register the handler such that it is invoked even when the routed

        event is marked handled in its event data; false to register the handler

        with the default condition that it will not be invoked if the routed event

        is already marked handled. The default is false.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AddHandler(that As UIElement, routedEvent As ExtendedRoutedEvent, handler As  Delegate, handledEventsToo As Boolean)
  overload: System.Windows.UIElementExtendedRoutedEventExtensions.AddHandler*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.UIElementExtendedRoutedEventExtensions.RemoveHandler(System.Windows.UIElement,Microsoft.Windows.ExtendedRoutedEvent,System.Delegate)
  commentId: M:System.Windows.UIElementExtendedRoutedEventExtensions.RemoveHandler(System.Windows.UIElement,Microsoft.Windows.ExtendedRoutedEvent,System.Delegate)
  id: RemoveHandler(System.Windows.UIElement,Microsoft.Windows.ExtendedRoutedEvent,System.Delegate)
  isExtensionMethod: true
  parent: System.Windows.UIElementExtendedRoutedEventExtensions
  langs:
  - csharp
  - vb
  name: RemoveHandler(UIElement, ExtendedRoutedEvent, Delegate)
  nameWithType: UIElementExtendedRoutedEventExtensions.RemoveHandler(UIElement, ExtendedRoutedEvent, Delegate)
  fullName: System.Windows.UIElementExtendedRoutedEventExtensions.RemoveHandler(System.Windows.UIElement, Microsoft.Windows.ExtendedRoutedEvent, System.Delegate)
  type: Method
  source:
    remote:
      path: src/Runtime/Controls.Toolkit/DragDrop/UIElementExtendedRoutedEventExtensions.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: RemoveHandler
    path: ../OpenSilverGit/src/Runtime/Controls.Toolkit/DragDrop/UIElementExtendedRoutedEventExtensions.cs
    startLine: 105
  assemblies:
  - OpenSilver.Controls.Toolkit
  namespace: System.Windows
  summary: "\nRemoves a routed event handler for a specified routed event, removing the handler\nfrom the handler collection on the current element.\n"
  example: []
  syntax:
    content: public static void RemoveHandler(this UIElement that, ExtendedRoutedEvent routedEvent, Delegate handler)
    parameters:
    - id: that
      type: System.Windows.UIElement
      description: The element to remove the handler from.
    - id: routedEvent
      type: Microsoft.Windows.ExtendedRoutedEvent
      description: An identifier for the routed event to be handled.
    - id: handler
      type: System.Delegate
      description: A reference to the handler implementation.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RemoveHandler(that As UIElement, routedEvent As ExtendedRoutedEvent, handler As  Delegate)
  overload: System.Windows.UIElementExtendedRoutedEventExtensions.RemoveHandler*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Windows
  commentId: N:System.Windows
  name: System.Windows
  nameWithType: System.Windows
  fullName: System.Windows
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.Windows.UIElementExtendedRoutedEventExtensions.AddHandler*
  commentId: Overload:System.Windows.UIElementExtendedRoutedEventExtensions.AddHandler
  name: AddHandler
  nameWithType: UIElementExtendedRoutedEventExtensions.AddHandler
  fullName: System.Windows.UIElementExtendedRoutedEventExtensions.AddHandler
- uid: System.Windows.UIElement
  commentId: T:System.Windows.UIElement
  parent: System.Windows
  name: UIElement
  nameWithType: UIElement
  fullName: System.Windows.UIElement
- uid: Microsoft.Windows.ExtendedRoutedEvent
  commentId: T:Microsoft.Windows.ExtendedRoutedEvent
  parent: Microsoft.Windows
  name: ExtendedRoutedEvent
  nameWithType: ExtendedRoutedEvent
  fullName: Microsoft.Windows.ExtendedRoutedEvent
- uid: System.Delegate
  commentId: T:System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Windows
  commentId: N:Microsoft.Windows
  name: Microsoft.Windows
  nameWithType: Microsoft.Windows
  fullName: Microsoft.Windows
- uid: System.Windows.UIElementExtendedRoutedEventExtensions.RemoveHandler*
  commentId: Overload:System.Windows.UIElementExtendedRoutedEventExtensions.RemoveHandler
  name: RemoveHandler
  nameWithType: UIElementExtendedRoutedEventExtensions.RemoveHandler
  fullName: System.Windows.UIElementExtendedRoutedEventExtensions.RemoveHandler
