### YamlMime:ManagedReference
items:
- uid: System.Windows.Thickness
  commentId: T:System.Windows.Thickness
  id: Thickness
  parent: System.Windows
  children:
  - System.Windows.Thickness.#ctor(System.Double)
  - System.Windows.Thickness.#ctor(System.Double,System.Double,System.Double,System.Double)
  - System.Windows.Thickness.Bottom
  - System.Windows.Thickness.Equals(System.Object)
  - System.Windows.Thickness.Equals(System.Windows.Thickness)
  - System.Windows.Thickness.GetHashCode
  - System.Windows.Thickness.Left
  - System.Windows.Thickness.op_Equality(System.Windows.Thickness,System.Windows.Thickness)
  - System.Windows.Thickness.op_Inequality(System.Windows.Thickness,System.Windows.Thickness)
  - System.Windows.Thickness.Right
  - System.Windows.Thickness.Top
  - System.Windows.Thickness.ToString
  langs:
  - csharp
  - vb
  name: Thickness
  nameWithType: Thickness
  fullName: System.Windows.Thickness
  type: Struct
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Thickness.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Thickness
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Thickness.cs
    startLine: 22
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nDescribes the thickness of a frame around a rectangle. Four <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values\ndescribe the <xref href=\"System.Windows.Thickness.Left\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Windows.Thickness.Top\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Windows.Thickness.Right\" data-throw-if-not-resolved=\"false\"></xref>, and \n<xref href=\"System.Windows.Thickness.Bottom\" data-throw-if-not-resolved=\"false\"></xref> sides of the rectangle, respectively.\n"
  example: []
  syntax:
    content: 'public struct Thickness : IEquatable<Thickness>'
    content.vb: >-
      Public Structure Thickness
          Implements IEquatable(Of Thickness)
  implements:
  - System.IEquatable{System.Windows.Thickness}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Windows.Thickness.#ctor(System.Double)
  commentId: M:System.Windows.Thickness.#ctor(System.Double)
  id: '#ctor(System.Double)'
  parent: System.Windows.Thickness
  langs:
  - csharp
  - vb
  name: Thickness(Double)
  nameWithType: Thickness.Thickness(Double)
  fullName: System.Windows.Thickness.Thickness(System.Double)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Thickness.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Thickness.cs
    startLine: 31
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nInitializes a <xref href=\"System.Windows.Thickness\" data-throw-if-not-resolved=\"false\"></xref> structure that has the specified uniform\nlength on each side.\n"
  example: []
  syntax:
    content: public Thickness(double uniformLength)
    parameters:
    - id: uniformLength
      type: System.Double
      description: "\nThe uniform length applied to all four sides of the bounding rectangle.\n"
    content.vb: Public Sub New(uniformLength As Double)
  overload: System.Windows.Thickness.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.Thickness.#ctor(System.Double,System.Double,System.Double,System.Double)
  commentId: M:System.Windows.Thickness.#ctor(System.Double,System.Double,System.Double,System.Double)
  id: '#ctor(System.Double,System.Double,System.Double,System.Double)'
  parent: System.Windows.Thickness
  langs:
  - csharp
  - vb
  name: Thickness(Double, Double, Double, Double)
  nameWithType: Thickness.Thickness(Double, Double, Double, Double)
  fullName: System.Windows.Thickness.Thickness(System.Double, System.Double, System.Double, System.Double)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Thickness.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Thickness.cs
    startLine: 52
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nInitializes a <xref href=\"System.Windows.Thickness\" data-throw-if-not-resolved=\"false\"></xref> structure that has specific lengths (supplied\nas a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>) applied to each side of the rectangle.\n"
  example: []
  syntax:
    content: public Thickness(double left, double top, double right, double bottom)
    parameters:
    - id: left
      type: System.Double
      description: "\nThe thickness for the left side of the rectangle.\n"
    - id: top
      type: System.Double
      description: "\nThe thickness for the upper side of the rectangle.\n"
    - id: right
      type: System.Double
      description: "\nThe thickness for the right side of the rectangle\n"
    - id: bottom
      type: System.Double
      description: "\nThe thickness for the lower side of the rectangle.\n"
    content.vb: Public Sub New(left As Double, top As Double, right As Double, bottom As Double)
  overload: System.Windows.Thickness.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.Thickness.Bottom
  commentId: P:System.Windows.Thickness.Bottom
  id: Bottom
  parent: System.Windows.Thickness
  langs:
  - csharp
  - vb
  name: Bottom
  nameWithType: Thickness.Bottom
  fullName: System.Windows.Thickness.Bottom
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Thickness.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Bottom
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Thickness.cs
    startLine: 67
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets the width, in pixels, of the lower side of the bounding rectangle.\n"
  example: []
  syntax:
    content: public double Bottom { readonly get; set; }
    parameters: []
    return:
      type: System.Double
      description: "\nA <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> that represents the width, in pixels, of the lower side of the\nbounding rectangle for this instance of <xref href=\"System.Windows.Thickness\" data-throw-if-not-resolved=\"false\"></xref>. The default is 0.\n"
    content.vb: Public Property Bottom As Double
  overload: System.Windows.Thickness.Bottom*
  modifiers.csharp:
  - public
  - readonly get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.Thickness.Left
  commentId: P:System.Windows.Thickness.Left
  id: Left
  parent: System.Windows.Thickness
  langs:
  - csharp
  - vb
  name: Left
  nameWithType: Thickness.Left
  fullName: System.Windows.Thickness.Left
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Thickness.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Left
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Thickness.cs
    startLine: 76
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets the width, in pixels, of the left side of the bounding rectangle.\n"
  example: []
  syntax:
    content: public double Left { readonly get; set; }
    parameters: []
    return:
      type: System.Double
      description: "\nA <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> that represents the width, in pixels, of the left side of the\nbounding rectangle for this instance of <xref href=\"System.Windows.Thickness\" data-throw-if-not-resolved=\"false\"></xref>. The default is 0.\n"
    content.vb: Public Property Left As Double
  overload: System.Windows.Thickness.Left*
  modifiers.csharp:
  - public
  - readonly get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.Thickness.Right
  commentId: P:System.Windows.Thickness.Right
  id: Right
  parent: System.Windows.Thickness
  langs:
  - csharp
  - vb
  name: Right
  nameWithType: Thickness.Right
  fullName: System.Windows.Thickness.Right
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Thickness.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Right
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Thickness.cs
    startLine: 85
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets the width, in pixels, of the right side of the bounding rectangle.\n"
  example: []
  syntax:
    content: public double Right { readonly get; set; }
    parameters: []
    return:
      type: System.Double
      description: "\nA <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> that represents the width, in pixels, of the right side of the\nbounding rectangle for this instance of <xref href=\"System.Windows.Thickness\" data-throw-if-not-resolved=\"false\"></xref>. The default is 0.\n"
    content.vb: Public Property Right As Double
  overload: System.Windows.Thickness.Right*
  modifiers.csharp:
  - public
  - readonly get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.Thickness.Top
  commentId: P:System.Windows.Thickness.Top
  id: Top
  parent: System.Windows.Thickness
  langs:
  - csharp
  - vb
  name: Top
  nameWithType: Thickness.Top
  fullName: System.Windows.Thickness.Top
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Thickness.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Top
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Thickness.cs
    startLine: 94
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets the width, in pixels, of the upper side of the bounding rectangle.\n"
  example: []
  syntax:
    content: public double Top { readonly get; set; }
    parameters: []
    return:
      type: System.Double
      description: "\nA <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> that represents the width, in pixels, of the upper side of the\nbounding rectangle for this instance of <xref href=\"System.Windows.Thickness\" data-throw-if-not-resolved=\"false\"></xref>. The default is 0.\n"
    content.vb: Public Property Top As Double
  overload: System.Windows.Thickness.Top*
  modifiers.csharp:
  - public
  - readonly get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.Thickness.Equals(System.Object)
  commentId: M:System.Windows.Thickness.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.Thickness
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Thickness.Equals(Object)
  fullName: System.Windows.Thickness.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Thickness.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Equals
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Thickness.cs
    startLine: 105
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nCompares this <xref href=\"System.Windows.Thickness\" data-throw-if-not-resolved=\"false\"></xref> structure to another <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> for equality.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: "\nThe object to compare.\n"
    return:
      type: System.Boolean
      description: "\ntrue if the two objects are equal; otherwise, false.\n"
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: System.Windows.Thickness.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Windows.Thickness.Equals(System.Windows.Thickness)
  commentId: M:System.Windows.Thickness.Equals(System.Windows.Thickness)
  id: Equals(System.Windows.Thickness)
  parent: System.Windows.Thickness
  langs:
  - csharp
  - vb
  name: Equals(Thickness)
  nameWithType: Thickness.Equals(Thickness)
  fullName: System.Windows.Thickness.Equals(System.Windows.Thickness)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Thickness.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Equals
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Thickness.cs
    startLine: 118
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nCompares this <xref href=\"System.Windows.Thickness\" data-throw-if-not-resolved=\"false\"></xref> structure to another <xref href=\"System.Windows.Thickness\" data-throw-if-not-resolved=\"false\"></xref>\nstructure for equality.\n"
  example: []
  syntax:
    content: public bool Equals(Thickness thickness)
    parameters:
    - id: thickness
      type: System.Windows.Thickness
      description: "\nAn instance of <xref href=\"System.Windows.Thickness\" data-throw-if-not-resolved=\"false\"></xref> to compare for equality.\n"
    return:
      type: System.Boolean
      description: "\ntrue if the two instances of <xref href=\"System.Windows.Thickness\" data-throw-if-not-resolved=\"false\"></xref> are equal; otherwise, false.\n"
    content.vb: Public Function Equals(thickness As Thickness) As Boolean
  overload: System.Windows.Thickness.Equals*
  implements:
  - System.IEquatable{System.Windows.Thickness}.Equals(System.Windows.Thickness)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.Thickness.GetHashCode
  commentId: M:System.Windows.Thickness.GetHashCode
  id: GetHashCode
  parent: System.Windows.Thickness
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Thickness.GetHashCode()
  fullName: System.Windows.Thickness.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Thickness.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetHashCode
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Thickness.cs
    startLine: 126
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nReturns the hash code of the structure.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: "\nA hash code for this instance of <xref href=\"System.Windows.Thickness\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: System.Windows.Thickness.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Windows.Thickness.ToString
  commentId: M:System.Windows.Thickness.ToString
  id: ToString
  parent: System.Windows.Thickness
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Thickness.ToString()
  fullName: System.Windows.Thickness.ToString()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Thickness.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ToString
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Thickness.cs
    startLine: 135
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nReturns the string representation of the <xref href=\"System.Windows.Thickness\" data-throw-if-not-resolved=\"false\"></xref> structure.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nA <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents the <xref href=\"System.Windows.Thickness\" data-throw-if-not-resolved=\"false\"></xref> value.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: System.Windows.Thickness.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Windows.Thickness.op_Equality(System.Windows.Thickness,System.Windows.Thickness)
  commentId: M:System.Windows.Thickness.op_Equality(System.Windows.Thickness,System.Windows.Thickness)
  id: op_Equality(System.Windows.Thickness,System.Windows.Thickness)
  parent: System.Windows.Thickness
  langs:
  - csharp
  - vb
  name: Equality(Thickness, Thickness)
  nameWithType: Thickness.Equality(Thickness, Thickness)
  fullName: System.Windows.Thickness.Equality(System.Windows.Thickness, System.Windows.Thickness)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Thickness.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Equality
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Thickness.cs
    startLine: 149
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nCompares the value of two <xref href=\"System.Windows.Thickness\" data-throw-if-not-resolved=\"false\"></xref> structures for equality.\n"
  example: []
  syntax:
    content: public static bool operator ==(Thickness t1, Thickness t2)
    parameters:
    - id: t1
      type: System.Windows.Thickness
      description: "\nThe first structure to compare.\n"
    - id: t2
      type: System.Windows.Thickness
      description: "\nThe other structure to compare.\n"
    return:
      type: System.Boolean
      description: "\ntrue if the two instances of <xref href=\"System.Windows.Thickness\" data-throw-if-not-resolved=\"false\"></xref> are equal; otherwise, false.\n"
    content.vb: Public Shared Operator =(t1 As Thickness, t2 As Thickness) As Boolean
  overload: System.Windows.Thickness.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Thickness.op_Inequality(System.Windows.Thickness,System.Windows.Thickness)
  commentId: M:System.Windows.Thickness.op_Inequality(System.Windows.Thickness,System.Windows.Thickness)
  id: op_Inequality(System.Windows.Thickness,System.Windows.Thickness)
  parent: System.Windows.Thickness
  langs:
  - csharp
  - vb
  name: Inequality(Thickness, Thickness)
  nameWithType: Thickness.Inequality(Thickness, Thickness)
  fullName: System.Windows.Thickness.Inequality(System.Windows.Thickness, System.Windows.Thickness)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Thickness.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Inequality
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Thickness.cs
    startLine: 165
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nCompares two <xref href=\"System.Windows.Thickness\" data-throw-if-not-resolved=\"false\"></xref> structures for inequality.\n"
  example: []
  syntax:
    content: public static bool operator !=(Thickness t1, Thickness t2)
    parameters:
    - id: t1
      type: System.Windows.Thickness
      description: "\nThe first structure to compare.\n"
    - id: t2
      type: System.Windows.Thickness
      description: "\nThe other structure to compare.\n"
    return:
      type: System.Boolean
      description: "\ntrue if the two instances of <xref href=\"System.Windows.Thickness\" data-throw-if-not-resolved=\"false\"></xref> are not equal; otherwise,\nfalse.\n"
    content.vb: Public Shared Operator <>(t1 As Thickness, t2 As Thickness) As Boolean
  overload: System.Windows.Thickness.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.Thickness.Left
  commentId: P:System.Windows.Thickness.Left
  isExternal: true
- uid: System.Windows.Thickness.Top
  commentId: P:System.Windows.Thickness.Top
  isExternal: true
- uid: System.Windows.Thickness.Right
  commentId: P:System.Windows.Thickness.Right
  isExternal: true
- uid: System.Windows.Thickness.Bottom
  commentId: P:System.Windows.Thickness.Bottom
  isExternal: true
- uid: System.Windows
  commentId: N:System.Windows
  name: System.Windows
  nameWithType: System.Windows
  fullName: System.Windows
- uid: System.IEquatable{System.Windows.Thickness}
  commentId: T:System.IEquatable{System.Windows.Thickness}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Thickness>
  nameWithType: IEquatable<Thickness>
  fullName: System.IEquatable<System.Windows.Thickness>
  nameWithType.vb: IEquatable(Of Thickness)
  fullName.vb: System.IEquatable(Of System.Windows.Thickness)
  name.vb: IEquatable(Of Thickness)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Thickness
    name: Thickness
    nameWithType: Thickness
    fullName: System.Windows.Thickness
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Thickness
    name: Thickness
    nameWithType: Thickness
    fullName: System.Windows.Thickness
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Thickness
  commentId: T:System.Windows.Thickness
  parent: System.Windows
  name: Thickness
  nameWithType: Thickness
  fullName: System.Windows.Thickness
- uid: System.Windows.Thickness.#ctor*
  commentId: Overload:System.Windows.Thickness.#ctor
  name: Thickness
  nameWithType: Thickness.Thickness
  fullName: System.Windows.Thickness.Thickness
- uid: System.Windows.Thickness.Bottom*
  commentId: Overload:System.Windows.Thickness.Bottom
  name: Bottom
  nameWithType: Thickness.Bottom
  fullName: System.Windows.Thickness.Bottom
- uid: System.Windows.Thickness.Left*
  commentId: Overload:System.Windows.Thickness.Left
  name: Left
  nameWithType: Thickness.Left
  fullName: System.Windows.Thickness.Left
- uid: System.Windows.Thickness.Right*
  commentId: Overload:System.Windows.Thickness.Right
  name: Right
  nameWithType: Thickness.Right
  fullName: System.Windows.Thickness.Right
- uid: System.Windows.Thickness.Top*
  commentId: Overload:System.Windows.Thickness.Top
  name: Top
  nameWithType: Thickness.Top
  fullName: System.Windows.Thickness.Top
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Thickness.Equals*
  commentId: Overload:System.Windows.Thickness.Equals
  name: Equals
  nameWithType: Thickness.Equals
  fullName: System.Windows.Thickness.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.IEquatable{System.Windows.Thickness}.Equals(System.Windows.Thickness)
  commentId: M:System.IEquatable{System.Windows.Thickness}.Equals(System.Windows.Thickness)
  parent: System.IEquatable{System.Windows.Thickness}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Thickness)
  nameWithType: IEquatable<Thickness>.Equals(Thickness)
  fullName: System.IEquatable<System.Windows.Thickness>.Equals(System.Windows.Thickness)
  nameWithType.vb: IEquatable(Of Thickness).Equals(Thickness)
  fullName.vb: System.IEquatable(Of System.Windows.Thickness).Equals(System.Windows.Thickness)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Thickness>.Equals
    fullName: System.IEquatable<System.Windows.Thickness>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.Thickness
    name: Thickness
    nameWithType: Thickness
    fullName: System.Windows.Thickness
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Thickness).Equals
    fullName: System.IEquatable(Of System.Windows.Thickness).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Windows.Thickness
    name: Thickness
    nameWithType: Thickness
    fullName: System.Windows.Thickness
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Thickness.GetHashCode*
  commentId: Overload:System.Windows.Thickness.GetHashCode
  name: GetHashCode
  nameWithType: Thickness.GetHashCode
  fullName: System.Windows.Thickness.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Thickness.ToString*
  commentId: Overload:System.Windows.Thickness.ToString
  name: ToString
  nameWithType: Thickness.ToString
  fullName: System.Windows.Thickness.ToString
- uid: System.Windows.Thickness.op_Equality*
  commentId: Overload:System.Windows.Thickness.op_Equality
  name: Equality
  nameWithType: Thickness.Equality
  fullName: System.Windows.Thickness.Equality
- uid: System.Windows.Thickness.op_Inequality*
  commentId: Overload:System.Windows.Thickness.op_Inequality
  name: Inequality
  nameWithType: Thickness.Inequality
  fullName: System.Windows.Thickness.Inequality
