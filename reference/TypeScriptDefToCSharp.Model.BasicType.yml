### YamlMime:ManagedReference
items:
- uid: TypeScriptDefToCSharp.Model.BasicType
  commentId: T:TypeScriptDefToCSharp.Model.BasicType
  id: BasicType
  parent: TypeScriptDefToCSharp.Model
  children:
  - TypeScriptDefToCSharp.Model.BasicType.#ctor
  - TypeScriptDefToCSharp.Model.BasicType.#ctor(System.Xml.Linq.XElement)
  - TypeScriptDefToCSharp.Model.BasicType.Name
  - TypeScriptDefToCSharp.Model.BasicType.New(System.String)
  - TypeScriptDefToCSharp.Model.BasicType.Object
  - TypeScriptDefToCSharp.Model.BasicType.ToString
  langs:
  - csharp
  - vb
  name: BasicType
  nameWithType: BasicType
  fullName: TypeScriptDefToCSharp.Model.BasicType
  type: Class
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/BasicType.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: BasicType
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/BasicType.cs
    startLine: 26
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: 'public class BasicType : TSType'
    content.vb: >-
      Public Class BasicType
          Implements TSType
  inheritance:
  - System.Object
  implements:
  - TypeScriptDefToCSharp.Model.TSType
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TypeScriptDefToCSharp.Model.BasicType.Object
  commentId: F:TypeScriptDefToCSharp.Model.BasicType.Object
  id: Object
  parent: TypeScriptDefToCSharp.Model.BasicType
  langs:
  - csharp
  - vb
  name: Object
  nameWithType: BasicType.Object
  fullName: TypeScriptDefToCSharp.Model.BasicType.Object
  type: Field
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/BasicType.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Object
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/BasicType.cs
    startLine: 28
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public static readonly BasicType Object
    return:
      type: TypeScriptDefToCSharp.Model.BasicType
    content.vb: Public Shared ReadOnly Object As BasicType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TypeScriptDefToCSharp.Model.BasicType.Name
  commentId: P:TypeScriptDefToCSharp.Model.BasicType.Name
  id: Name
  parent: TypeScriptDefToCSharp.Model.BasicType
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: BasicType.Name
  fullName: TypeScriptDefToCSharp.Model.BasicType.Name
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/BasicType.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Name
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/BasicType.cs
    startLine: 30
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: TypeScriptDefToCSharp.Model.BasicType.Name*
  implements:
  - TypeScriptDefToCSharp.Model.TSType.Name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.BasicType.#ctor
  commentId: M:TypeScriptDefToCSharp.Model.BasicType.#ctor
  id: '#ctor'
  parent: TypeScriptDefToCSharp.Model.BasicType
  langs:
  - csharp
  - vb
  name: BasicType()
  nameWithType: BasicType.BasicType()
  fullName: TypeScriptDefToCSharp.Model.BasicType.BasicType()
  type: Constructor
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/BasicType.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/BasicType.cs
    startLine: 32
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public BasicType()
    content.vb: Public Sub New
  overload: TypeScriptDefToCSharp.Model.BasicType.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.BasicType.#ctor(System.Xml.Linq.XElement)
  commentId: M:TypeScriptDefToCSharp.Model.BasicType.#ctor(System.Xml.Linq.XElement)
  id: '#ctor(System.Xml.Linq.XElement)'
  parent: TypeScriptDefToCSharp.Model.BasicType
  langs:
  - csharp
  - vb
  name: BasicType(XElement)
  nameWithType: BasicType.BasicType(XElement)
  fullName: TypeScriptDefToCSharp.Model.BasicType.BasicType(System.Xml.Linq.XElement)
  type: Constructor
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/BasicType.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/BasicType.cs
    startLine: 36
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public BasicType(XElement elem)
    parameters:
    - id: elem
      type: System.Xml.Linq.XElement
    content.vb: Public Sub New(elem As XElement)
  overload: TypeScriptDefToCSharp.Model.BasicType.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TypeScriptDefToCSharp.Model.BasicType.ToString
  commentId: M:TypeScriptDefToCSharp.Model.BasicType.ToString
  id: ToString
  parent: TypeScriptDefToCSharp.Model.BasicType
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: BasicType.ToString()
  fullName: TypeScriptDefToCSharp.Model.BasicType.ToString()
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/BasicType.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ToString
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/BasicType.cs
    startLine: 95
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: TypeScriptDefToCSharp.Model.BasicType.ToString*
  implements:
  - TypeScriptDefToCSharp.Model.TSType.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TypeScriptDefToCSharp.Model.BasicType.New(System.String)
  commentId: M:TypeScriptDefToCSharp.Model.BasicType.New(System.String)
  id: New(System.String)
  parent: TypeScriptDefToCSharp.Model.BasicType
  langs:
  - csharp
  - vb
  name: New(String)
  nameWithType: BasicType.New(String)
  fullName: TypeScriptDefToCSharp.Model.BasicType.New(System.String)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/Model/BasicType.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: New
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/Model/BasicType.cs
    startLine: 102
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TypeScriptDefToCSharp.Model
  syntax:
    content: public string New(string jsObj)
    parameters:
    - id: jsObj
      type: System.String
    return:
      type: System.String
    content.vb: Public Function New(jsObj As String) As String
  overload: TypeScriptDefToCSharp.Model.BasicType.New*
  implements:
  - TypeScriptDefToCSharp.Model.TSType.New(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TypeScriptDefToCSharp.Model
  commentId: N:TypeScriptDefToCSharp.Model
  name: TypeScriptDefToCSharp.Model
  nameWithType: TypeScriptDefToCSharp.Model
  fullName: TypeScriptDefToCSharp.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TypeScriptDefToCSharp.Model.TSType
  commentId: T:TypeScriptDefToCSharp.Model.TSType
  parent: TypeScriptDefToCSharp.Model
  name: TSType
  nameWithType: TSType
  fullName: TypeScriptDefToCSharp.Model.TSType
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: TypeScriptDefToCSharp.Model.BasicType
  commentId: T:TypeScriptDefToCSharp.Model.BasicType
  parent: TypeScriptDefToCSharp.Model
  name: BasicType
  nameWithType: BasicType
  fullName: TypeScriptDefToCSharp.Model.BasicType
- uid: TypeScriptDefToCSharp.Model.BasicType.Name*
  commentId: Overload:TypeScriptDefToCSharp.Model.BasicType.Name
  name: Name
  nameWithType: BasicType.Name
  fullName: TypeScriptDefToCSharp.Model.BasicType.Name
- uid: TypeScriptDefToCSharp.Model.TSType.Name
  commentId: P:TypeScriptDefToCSharp.Model.TSType.Name
  parent: TypeScriptDefToCSharp.Model.TSType
  name: Name
  nameWithType: TSType.Name
  fullName: TypeScriptDefToCSharp.Model.TSType.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TypeScriptDefToCSharp.Model.BasicType.#ctor*
  commentId: Overload:TypeScriptDefToCSharp.Model.BasicType.#ctor
  name: BasicType
  nameWithType: BasicType.BasicType
  fullName: TypeScriptDefToCSharp.Model.BasicType.BasicType
- uid: System.Xml.Linq.XElement
  commentId: T:System.Xml.Linq.XElement
  parent: System.Xml.Linq
  isExternal: true
  name: XElement
  nameWithType: XElement
  fullName: System.Xml.Linq.XElement
- uid: System.Xml.Linq
  commentId: N:System.Xml.Linq
  isExternal: true
  name: System.Xml.Linq
  nameWithType: System.Xml.Linq
  fullName: System.Xml.Linq
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.BasicType.ToString*
  commentId: Overload:TypeScriptDefToCSharp.Model.BasicType.ToString
  name: ToString
  nameWithType: BasicType.ToString
  fullName: TypeScriptDefToCSharp.Model.BasicType.ToString
- uid: TypeScriptDefToCSharp.Model.TSType.ToString
  commentId: M:TypeScriptDefToCSharp.Model.TSType.ToString
  parent: TypeScriptDefToCSharp.Model.TSType
  name: ToString()
  nameWithType: TSType.ToString()
  fullName: TypeScriptDefToCSharp.Model.TSType.ToString()
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.TSType.ToString
    name: ToString
    nameWithType: TSType.ToString
    fullName: TypeScriptDefToCSharp.Model.TSType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.TSType.ToString
    name: ToString
    nameWithType: TSType.ToString
    fullName: TypeScriptDefToCSharp.Model.TSType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefToCSharp.Model.BasicType.New*
  commentId: Overload:TypeScriptDefToCSharp.Model.BasicType.New
  name: New
  nameWithType: BasicType.New
  fullName: TypeScriptDefToCSharp.Model.BasicType.New
- uid: TypeScriptDefToCSharp.Model.TSType.New(System.String)
  commentId: M:TypeScriptDefToCSharp.Model.TSType.New(System.String)
  parent: TypeScriptDefToCSharp.Model.TSType
  isExternal: true
  name: New(String)
  nameWithType: TSType.New(String)
  fullName: TypeScriptDefToCSharp.Model.TSType.New(System.String)
  spec.csharp:
  - uid: TypeScriptDefToCSharp.Model.TSType.New(System.String)
    name: New
    nameWithType: TSType.New
    fullName: TypeScriptDefToCSharp.Model.TSType.New
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefToCSharp.Model.TSType.New(System.String)
    name: New
    nameWithType: TSType.New
    fullName: TypeScriptDefToCSharp.Model.TSType.New
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
