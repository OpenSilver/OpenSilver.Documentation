### YamlMime:ManagedReference
items:
- uid: TinyPG.ParseNode
  commentId: T:TinyPG.ParseNode
  id: ParseNode
  parent: TinyPG
  children:
  - TinyPG.ParseNode.#ctor(TinyPG.Token,System.String)
  - TinyPG.ParseNode.CreateNode(TinyPG.Token,System.String)
  - TinyPG.ParseNode.EvalAccessTag(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalAnonymousType(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalBlockElement(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalClass(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalEnum(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalExport(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalExtends(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalFunction(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalFunctionType(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalGeneric(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalGetter(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalImport(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalIndexer(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalInterface(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalNamespace(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalNamespaceContent(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalParamList(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalSetter(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalStart(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalType(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalTypeof(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.EvalVariable(TinyPG.ParseTree,System.Object[])
  - TinyPG.ParseNode.GetValue(TinyPG.ParseTree,TinyPG.TokenType,System.Int32)
  - TinyPG.ParseNode.GetValue(TinyPG.ParseTree,TinyPG.TokenType,System.Int32@)
  - TinyPG.ParseNode.nodes
  - TinyPG.ParseNode.Nodes
  - TinyPG.ParseNode.Parent
  - TinyPG.ParseNode.text
  - TinyPG.ParseNode.Text
  - TinyPG.ParseNode.Token
  langs:
  - csharp
  - vb
  name: ParseNode
  nameWithType: ParseNode
  fullName: TinyPG.ParseNode
  type: Class
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ParseNode
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 115
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: >-
      [Serializable]

      public class ParseNode
    content.vb: >-
      <Serializable>

      Public Class ParseNode
  inheritance:
  - System.Object
  derivedClasses:
  - TinyPG.ParseTree
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyPG.ParseNode.text
  commentId: F:TinyPG.ParseNode.text
  id: text
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: text
  nameWithType: ParseNode.text
  fullName: TinyPG.ParseNode.text
  type: Field
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: text
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 119
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected string text
    return:
      type: System.String
    content.vb: Protected text As String
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyPG.ParseNode.nodes
  commentId: F:TinyPG.ParseNode.nodes
  id: nodes
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: nodes
  nameWithType: ParseNode.nodes
  fullName: TinyPG.ParseNode.nodes
  type: Field
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: nodes
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 120
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected List<ParseNode> nodes
    return:
      type: System.Collections.Generic.List{TinyPG.ParseNode}
    content.vb: Protected nodes As List(Of ParseNode)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyPG.ParseNode.Nodes
  commentId: P:TinyPG.ParseNode.Nodes
  id: Nodes
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: Nodes
  nameWithType: ParseNode.Nodes
  fullName: TinyPG.ParseNode.Nodes
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Nodes
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 122
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: public List<ParseNode> Nodes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{TinyPG.ParseNode}
    content.vb: Public ReadOnly Property Nodes As List(Of ParseNode)
  overload: TinyPG.ParseNode.Nodes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyPG.ParseNode.Parent
  commentId: F:TinyPG.ParseNode.Parent
  id: Parent
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: ParseNode.Parent
  fullName: TinyPG.ParseNode.Parent
  type: Field
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Parent
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 125
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: public ParseNode Parent
    return:
      type: TinyPG.ParseNode
    content.vb: Public Parent As ParseNode
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyPG.ParseNode.Token
  commentId: F:TinyPG.ParseNode.Token
  id: Token
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: Token
  nameWithType: ParseNode.Token
  fullName: TinyPG.ParseNode.Token
  type: Field
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Token
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 126
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: public Token Token
    return:
      type: TinyPG.Token
    content.vb: Public Token As Token
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyPG.ParseNode.Text
  commentId: P:TinyPG.ParseNode.Text
  id: Text
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: Text
  nameWithType: ParseNode.Text
  fullName: TinyPG.ParseNode.Text
  type: Property
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Text
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 128
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: public string Text { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Text As String
  overload: TinyPG.ParseNode.Text*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyPG.ParseNode.CreateNode(TinyPG.Token,System.String)
  commentId: M:TinyPG.ParseNode.CreateNode(TinyPG.Token,System.String)
  id: CreateNode(TinyPG.Token,System.String)
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: CreateNode(Token, String)
  nameWithType: ParseNode.CreateNode(Token, String)
  fullName: TinyPG.ParseNode.CreateNode(TinyPG.Token, System.String)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CreateNode
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 134
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: public virtual ParseNode CreateNode(Token token, string text)
    parameters:
    - id: token
      type: TinyPG.Token
    - id: text
      type: System.String
    return:
      type: TinyPG.ParseNode
    content.vb: Public Overridable Function CreateNode(token As Token, text As String) As ParseNode
  overload: TinyPG.ParseNode.CreateNode*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyPG.ParseNode.#ctor(TinyPG.Token,System.String)
  commentId: M:TinyPG.ParseNode.#ctor(TinyPG.Token,System.String)
  id: '#ctor(TinyPG.Token,System.String)'
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: ParseNode(Token, String)
  nameWithType: ParseNode.ParseNode(Token, String)
  fullName: TinyPG.ParseNode.ParseNode(TinyPG.Token, System.String)
  type: Constructor
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 141
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected ParseNode(Token token, string text)
    parameters:
    - id: token
      type: TinyPG.Token
    - id: text
      type: System.String
    content.vb: Protected Sub New(token As Token, text As String)
  overload: TinyPG.ParseNode.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyPG.ParseNode.GetValue(TinyPG.ParseTree,TinyPG.TokenType,System.Int32)
  commentId: M:TinyPG.ParseNode.GetValue(TinyPG.ParseTree,TinyPG.TokenType,System.Int32)
  id: GetValue(TinyPG.ParseTree,TinyPG.TokenType,System.Int32)
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: GetValue(ParseTree, TokenType, Int32)
  nameWithType: ParseNode.GetValue(ParseTree, TokenType, Int32)
  fullName: TinyPG.ParseNode.GetValue(TinyPG.ParseTree, TinyPG.TokenType, System.Int32)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetValue
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 148
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected object GetValue(ParseTree tree, TokenType type, int index)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: type
      type: TinyPG.TokenType
    - id: index
      type: System.Int32
    return:
      type: System.Object
    content.vb: Protected Function GetValue(tree As ParseTree, type As TokenType, index As Integer) As Object
  overload: TinyPG.ParseNode.GetValue*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyPG.ParseNode.GetValue(TinyPG.ParseTree,TinyPG.TokenType,System.Int32@)
  commentId: M:TinyPG.ParseNode.GetValue(TinyPG.ParseTree,TinyPG.TokenType,System.Int32@)
  id: GetValue(TinyPG.ParseTree,TinyPG.TokenType,System.Int32@)
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: GetValue(ParseTree, TokenType, ref Int32)
  nameWithType: ParseNode.GetValue(ParseTree, TokenType, ref Int32)
  fullName: TinyPG.ParseNode.GetValue(TinyPG.ParseTree, TinyPG.TokenType, ref System.Int32)
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetValue
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 153
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected object GetValue(ParseTree tree, TokenType type, ref int index)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: type
      type: TinyPG.TokenType
    - id: index
      type: System.Int32
    return:
      type: System.Object
    content.vb: Protected Function GetValue(tree As ParseTree, type As TokenType, ByRef index As Integer) As Object
  overload: TinyPG.ParseNode.GetValue*
  nameWithType.vb: ParseNode.GetValue(ParseTree, TokenType, ByRef Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: TinyPG.ParseNode.GetValue(TinyPG.ParseTree, TinyPG.TokenType, ByRef System.Int32)
  name.vb: GetValue(ParseTree, TokenType, ByRef Int32)
- uid: TinyPG.ParseNode.EvalStart(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalStart(TinyPG.ParseTree,System.Object[])
  id: EvalStart(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: EvalStart(ParseTree, Object[])
  nameWithType: ParseNode.EvalStart(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalStart(TinyPG.ParseTree, System.Object[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EvalStart
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 260
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected virtual object EvalStart(ParseTree tree, params object[] paramlist)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: paramlist
      type: System.Object[]
    return:
      type: System.Object
    content.vb: Protected Overridable Function EvalStart(tree As ParseTree, ParamArray paramlist As Object()) As Object
  overload: TinyPG.ParseNode.EvalStart*
  nameWithType.vb: ParseNode.EvalStart(ParseTree, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: TinyPG.ParseNode.EvalStart(TinyPG.ParseTree, System.Object())
  name.vb: EvalStart(ParseTree, Object())
- uid: TinyPG.ParseNode.EvalNamespace(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalNamespace(TinyPG.ParseTree,System.Object[])
  id: EvalNamespace(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: EvalNamespace(ParseTree, Object[])
  nameWithType: ParseNode.EvalNamespace(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalNamespace(TinyPG.ParseTree, System.Object[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EvalNamespace
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 265
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected virtual object EvalNamespace(ParseTree tree, params object[] paramlist)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: paramlist
      type: System.Object[]
    return:
      type: System.Object
    content.vb: Protected Overridable Function EvalNamespace(tree As ParseTree, ParamArray paramlist As Object()) As Object
  overload: TinyPG.ParseNode.EvalNamespace*
  nameWithType.vb: ParseNode.EvalNamespace(ParseTree, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: TinyPG.ParseNode.EvalNamespace(TinyPG.ParseTree, System.Object())
  name.vb: EvalNamespace(ParseTree, Object())
- uid: TinyPG.ParseNode.EvalNamespaceContent(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalNamespaceContent(TinyPG.ParseTree,System.Object[])
  id: EvalNamespaceContent(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: EvalNamespaceContent(ParseTree, Object[])
  nameWithType: ParseNode.EvalNamespaceContent(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalNamespaceContent(TinyPG.ParseTree, System.Object[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EvalNamespaceContent
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 270
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected virtual object EvalNamespaceContent(ParseTree tree, params object[] paramlist)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: paramlist
      type: System.Object[]
    return:
      type: System.Object
    content.vb: Protected Overridable Function EvalNamespaceContent(tree As ParseTree, ParamArray paramlist As Object()) As Object
  overload: TinyPG.ParseNode.EvalNamespaceContent*
  nameWithType.vb: ParseNode.EvalNamespaceContent(ParseTree, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: TinyPG.ParseNode.EvalNamespaceContent(TinyPG.ParseTree, System.Object())
  name.vb: EvalNamespaceContent(ParseTree, Object())
- uid: TinyPG.ParseNode.EvalGeneric(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalGeneric(TinyPG.ParseTree,System.Object[])
  id: EvalGeneric(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: EvalGeneric(ParseTree, Object[])
  nameWithType: ParseNode.EvalGeneric(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalGeneric(TinyPG.ParseTree, System.Object[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EvalGeneric
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 275
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected virtual object EvalGeneric(ParseTree tree, params object[] paramlist)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: paramlist
      type: System.Object[]
    return:
      type: System.Object
    content.vb: Protected Overridable Function EvalGeneric(tree As ParseTree, ParamArray paramlist As Object()) As Object
  overload: TinyPG.ParseNode.EvalGeneric*
  nameWithType.vb: ParseNode.EvalGeneric(ParseTree, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: TinyPG.ParseNode.EvalGeneric(TinyPG.ParseTree, System.Object())
  name.vb: EvalGeneric(ParseTree, Object())
- uid: TinyPG.ParseNode.EvalFunctionType(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalFunctionType(TinyPG.ParseTree,System.Object[])
  id: EvalFunctionType(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: EvalFunctionType(ParseTree, Object[])
  nameWithType: ParseNode.EvalFunctionType(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalFunctionType(TinyPG.ParseTree, System.Object[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EvalFunctionType
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 280
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected virtual object EvalFunctionType(ParseTree tree, params object[] paramlist)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: paramlist
      type: System.Object[]
    return:
      type: System.Object
    content.vb: Protected Overridable Function EvalFunctionType(tree As ParseTree, ParamArray paramlist As Object()) As Object
  overload: TinyPG.ParseNode.EvalFunctionType*
  nameWithType.vb: ParseNode.EvalFunctionType(ParseTree, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: TinyPG.ParseNode.EvalFunctionType(TinyPG.ParseTree, System.Object())
  name.vb: EvalFunctionType(ParseTree, Object())
- uid: TinyPG.ParseNode.EvalTypeof(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalTypeof(TinyPG.ParseTree,System.Object[])
  id: EvalTypeof(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: EvalTypeof(ParseTree, Object[])
  nameWithType: ParseNode.EvalTypeof(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalTypeof(TinyPG.ParseTree, System.Object[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EvalTypeof
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 285
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected virtual object EvalTypeof(ParseTree tree, params object[] paramlist)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: paramlist
      type: System.Object[]
    return:
      type: System.Object
    content.vb: Protected Overridable Function EvalTypeof(tree As ParseTree, ParamArray paramlist As Object()) As Object
  overload: TinyPG.ParseNode.EvalTypeof*
  nameWithType.vb: ParseNode.EvalTypeof(ParseTree, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: TinyPG.ParseNode.EvalTypeof(TinyPG.ParseTree, System.Object())
  name.vb: EvalTypeof(ParseTree, Object())
- uid: TinyPG.ParseNode.EvalAnonymousType(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalAnonymousType(TinyPG.ParseTree,System.Object[])
  id: EvalAnonymousType(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: EvalAnonymousType(ParseTree, Object[])
  nameWithType: ParseNode.EvalAnonymousType(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalAnonymousType(TinyPG.ParseTree, System.Object[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EvalAnonymousType
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 290
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected virtual object EvalAnonymousType(ParseTree tree, params object[] paramlist)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: paramlist
      type: System.Object[]
    return:
      type: System.Object
    content.vb: Protected Overridable Function EvalAnonymousType(tree As ParseTree, ParamArray paramlist As Object()) As Object
  overload: TinyPG.ParseNode.EvalAnonymousType*
  nameWithType.vb: ParseNode.EvalAnonymousType(ParseTree, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: TinyPG.ParseNode.EvalAnonymousType(TinyPG.ParseTree, System.Object())
  name.vb: EvalAnonymousType(ParseTree, Object())
- uid: TinyPG.ParseNode.EvalType(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalType(TinyPG.ParseTree,System.Object[])
  id: EvalType(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: EvalType(ParseTree, Object[])
  nameWithType: ParseNode.EvalType(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalType(TinyPG.ParseTree, System.Object[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EvalType
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 295
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected virtual object EvalType(ParseTree tree, params object[] paramlist)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: paramlist
      type: System.Object[]
    return:
      type: System.Object
    content.vb: Protected Overridable Function EvalType(tree As ParseTree, ParamArray paramlist As Object()) As Object
  overload: TinyPG.ParseNode.EvalType*
  nameWithType.vb: ParseNode.EvalType(ParseTree, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: TinyPG.ParseNode.EvalType(TinyPG.ParseTree, System.Object())
  name.vb: EvalType(ParseTree, Object())
- uid: TinyPG.ParseNode.EvalVariable(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalVariable(TinyPG.ParseTree,System.Object[])
  id: EvalVariable(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: EvalVariable(ParseTree, Object[])
  nameWithType: ParseNode.EvalVariable(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalVariable(TinyPG.ParseTree, System.Object[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EvalVariable
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 300
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected virtual object EvalVariable(ParseTree tree, params object[] paramlist)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: paramlist
      type: System.Object[]
    return:
      type: System.Object
    content.vb: Protected Overridable Function EvalVariable(tree As ParseTree, ParamArray paramlist As Object()) As Object
  overload: TinyPG.ParseNode.EvalVariable*
  nameWithType.vb: ParseNode.EvalVariable(ParseTree, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: TinyPG.ParseNode.EvalVariable(TinyPG.ParseTree, System.Object())
  name.vb: EvalVariable(ParseTree, Object())
- uid: TinyPG.ParseNode.EvalIndexer(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalIndexer(TinyPG.ParseTree,System.Object[])
  id: EvalIndexer(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: EvalIndexer(ParseTree, Object[])
  nameWithType: ParseNode.EvalIndexer(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalIndexer(TinyPG.ParseTree, System.Object[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EvalIndexer
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 305
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected virtual object EvalIndexer(ParseTree tree, params object[] paramlist)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: paramlist
      type: System.Object[]
    return:
      type: System.Object
    content.vb: Protected Overridable Function EvalIndexer(tree As ParseTree, ParamArray paramlist As Object()) As Object
  overload: TinyPG.ParseNode.EvalIndexer*
  nameWithType.vb: ParseNode.EvalIndexer(ParseTree, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: TinyPG.ParseNode.EvalIndexer(TinyPG.ParseTree, System.Object())
  name.vb: EvalIndexer(ParseTree, Object())
- uid: TinyPG.ParseNode.EvalParamList(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalParamList(TinyPG.ParseTree,System.Object[])
  id: EvalParamList(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: EvalParamList(ParseTree, Object[])
  nameWithType: ParseNode.EvalParamList(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalParamList(TinyPG.ParseTree, System.Object[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EvalParamList
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 310
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected virtual object EvalParamList(ParseTree tree, params object[] paramlist)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: paramlist
      type: System.Object[]
    return:
      type: System.Object
    content.vb: Protected Overridable Function EvalParamList(tree As ParseTree, ParamArray paramlist As Object()) As Object
  overload: TinyPG.ParseNode.EvalParamList*
  nameWithType.vb: ParseNode.EvalParamList(ParseTree, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: TinyPG.ParseNode.EvalParamList(TinyPG.ParseTree, System.Object())
  name.vb: EvalParamList(ParseTree, Object())
- uid: TinyPG.ParseNode.EvalFunction(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalFunction(TinyPG.ParseTree,System.Object[])
  id: EvalFunction(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: EvalFunction(ParseTree, Object[])
  nameWithType: ParseNode.EvalFunction(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalFunction(TinyPG.ParseTree, System.Object[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EvalFunction
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 315
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected virtual object EvalFunction(ParseTree tree, params object[] paramlist)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: paramlist
      type: System.Object[]
    return:
      type: System.Object
    content.vb: Protected Overridable Function EvalFunction(tree As ParseTree, ParamArray paramlist As Object()) As Object
  overload: TinyPG.ParseNode.EvalFunction*
  nameWithType.vb: ParseNode.EvalFunction(ParseTree, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: TinyPG.ParseNode.EvalFunction(TinyPG.ParseTree, System.Object())
  name.vb: EvalFunction(ParseTree, Object())
- uid: TinyPG.ParseNode.EvalBlockElement(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalBlockElement(TinyPG.ParseTree,System.Object[])
  id: EvalBlockElement(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: EvalBlockElement(ParseTree, Object[])
  nameWithType: ParseNode.EvalBlockElement(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalBlockElement(TinyPG.ParseTree, System.Object[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EvalBlockElement
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 320
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected virtual object EvalBlockElement(ParseTree tree, params object[] paramlist)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: paramlist
      type: System.Object[]
    return:
      type: System.Object
    content.vb: Protected Overridable Function EvalBlockElement(tree As ParseTree, ParamArray paramlist As Object()) As Object
  overload: TinyPG.ParseNode.EvalBlockElement*
  nameWithType.vb: ParseNode.EvalBlockElement(ParseTree, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: TinyPG.ParseNode.EvalBlockElement(TinyPG.ParseTree, System.Object())
  name.vb: EvalBlockElement(ParseTree, Object())
- uid: TinyPG.ParseNode.EvalInterface(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalInterface(TinyPG.ParseTree,System.Object[])
  id: EvalInterface(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: EvalInterface(ParseTree, Object[])
  nameWithType: ParseNode.EvalInterface(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalInterface(TinyPG.ParseTree, System.Object[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EvalInterface
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 325
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected virtual object EvalInterface(ParseTree tree, params object[] paramlist)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: paramlist
      type: System.Object[]
    return:
      type: System.Object
    content.vb: Protected Overridable Function EvalInterface(tree As ParseTree, ParamArray paramlist As Object()) As Object
  overload: TinyPG.ParseNode.EvalInterface*
  nameWithType.vb: ParseNode.EvalInterface(ParseTree, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: TinyPG.ParseNode.EvalInterface(TinyPG.ParseTree, System.Object())
  name.vb: EvalInterface(ParseTree, Object())
- uid: TinyPG.ParseNode.EvalClass(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalClass(TinyPG.ParseTree,System.Object[])
  id: EvalClass(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: EvalClass(ParseTree, Object[])
  nameWithType: ParseNode.EvalClass(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalClass(TinyPG.ParseTree, System.Object[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EvalClass
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 330
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected virtual object EvalClass(ParseTree tree, params object[] paramlist)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: paramlist
      type: System.Object[]
    return:
      type: System.Object
    content.vb: Protected Overridable Function EvalClass(tree As ParseTree, ParamArray paramlist As Object()) As Object
  overload: TinyPG.ParseNode.EvalClass*
  nameWithType.vb: ParseNode.EvalClass(ParseTree, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: TinyPG.ParseNode.EvalClass(TinyPG.ParseTree, System.Object())
  name.vb: EvalClass(ParseTree, Object())
- uid: TinyPG.ParseNode.EvalAccessTag(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalAccessTag(TinyPG.ParseTree,System.Object[])
  id: EvalAccessTag(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: EvalAccessTag(ParseTree, Object[])
  nameWithType: ParseNode.EvalAccessTag(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalAccessTag(TinyPG.ParseTree, System.Object[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EvalAccessTag
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 335
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected virtual object EvalAccessTag(ParseTree tree, params object[] paramlist)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: paramlist
      type: System.Object[]
    return:
      type: System.Object
    content.vb: Protected Overridable Function EvalAccessTag(tree As ParseTree, ParamArray paramlist As Object()) As Object
  overload: TinyPG.ParseNode.EvalAccessTag*
  nameWithType.vb: ParseNode.EvalAccessTag(ParseTree, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: TinyPG.ParseNode.EvalAccessTag(TinyPG.ParseTree, System.Object())
  name.vb: EvalAccessTag(ParseTree, Object())
- uid: TinyPG.ParseNode.EvalGetter(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalGetter(TinyPG.ParseTree,System.Object[])
  id: EvalGetter(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: EvalGetter(ParseTree, Object[])
  nameWithType: ParseNode.EvalGetter(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalGetter(TinyPG.ParseTree, System.Object[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EvalGetter
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 340
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected virtual object EvalGetter(ParseTree tree, params object[] paramlist)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: paramlist
      type: System.Object[]
    return:
      type: System.Object
    content.vb: Protected Overridable Function EvalGetter(tree As ParseTree, ParamArray paramlist As Object()) As Object
  overload: TinyPG.ParseNode.EvalGetter*
  nameWithType.vb: ParseNode.EvalGetter(ParseTree, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: TinyPG.ParseNode.EvalGetter(TinyPG.ParseTree, System.Object())
  name.vb: EvalGetter(ParseTree, Object())
- uid: TinyPG.ParseNode.EvalSetter(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalSetter(TinyPG.ParseTree,System.Object[])
  id: EvalSetter(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: EvalSetter(ParseTree, Object[])
  nameWithType: ParseNode.EvalSetter(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalSetter(TinyPG.ParseTree, System.Object[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EvalSetter
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 345
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected virtual object EvalSetter(ParseTree tree, params object[] paramlist)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: paramlist
      type: System.Object[]
    return:
      type: System.Object
    content.vb: Protected Overridable Function EvalSetter(tree As ParseTree, ParamArray paramlist As Object()) As Object
  overload: TinyPG.ParseNode.EvalSetter*
  nameWithType.vb: ParseNode.EvalSetter(ParseTree, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: TinyPG.ParseNode.EvalSetter(TinyPG.ParseTree, System.Object())
  name.vb: EvalSetter(ParseTree, Object())
- uid: TinyPG.ParseNode.EvalExtends(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalExtends(TinyPG.ParseTree,System.Object[])
  id: EvalExtends(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: EvalExtends(ParseTree, Object[])
  nameWithType: ParseNode.EvalExtends(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalExtends(TinyPG.ParseTree, System.Object[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EvalExtends
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 350
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected virtual object EvalExtends(ParseTree tree, params object[] paramlist)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: paramlist
      type: System.Object[]
    return:
      type: System.Object
    content.vb: Protected Overridable Function EvalExtends(tree As ParseTree, ParamArray paramlist As Object()) As Object
  overload: TinyPG.ParseNode.EvalExtends*
  nameWithType.vb: ParseNode.EvalExtends(ParseTree, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: TinyPG.ParseNode.EvalExtends(TinyPG.ParseTree, System.Object())
  name.vb: EvalExtends(ParseTree, Object())
- uid: TinyPG.ParseNode.EvalExport(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalExport(TinyPG.ParseTree,System.Object[])
  id: EvalExport(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: EvalExport(ParseTree, Object[])
  nameWithType: ParseNode.EvalExport(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalExport(TinyPG.ParseTree, System.Object[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EvalExport
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 355
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected virtual object EvalExport(ParseTree tree, params object[] paramlist)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: paramlist
      type: System.Object[]
    return:
      type: System.Object
    content.vb: Protected Overridable Function EvalExport(tree As ParseTree, ParamArray paramlist As Object()) As Object
  overload: TinyPG.ParseNode.EvalExport*
  nameWithType.vb: ParseNode.EvalExport(ParseTree, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: TinyPG.ParseNode.EvalExport(TinyPG.ParseTree, System.Object())
  name.vb: EvalExport(ParseTree, Object())
- uid: TinyPG.ParseNode.EvalImport(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalImport(TinyPG.ParseTree,System.Object[])
  id: EvalImport(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: EvalImport(ParseTree, Object[])
  nameWithType: ParseNode.EvalImport(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalImport(TinyPG.ParseTree, System.Object[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EvalImport
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 360
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected virtual object EvalImport(ParseTree tree, params object[] paramlist)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: paramlist
      type: System.Object[]
    return:
      type: System.Object
    content.vb: Protected Overridable Function EvalImport(tree As ParseTree, ParamArray paramlist As Object()) As Object
  overload: TinyPG.ParseNode.EvalImport*
  nameWithType.vb: ParseNode.EvalImport(ParseTree, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: TinyPG.ParseNode.EvalImport(TinyPG.ParseTree, System.Object())
  name.vb: EvalImport(ParseTree, Object())
- uid: TinyPG.ParseNode.EvalEnum(TinyPG.ParseTree,System.Object[])
  commentId: M:TinyPG.ParseNode.EvalEnum(TinyPG.ParseTree,System.Object[])
  id: EvalEnum(TinyPG.ParseTree,System.Object[])
  parent: TinyPG.ParseNode
  langs:
  - csharp
  - vb
  name: EvalEnum(ParseTree, Object[])
  nameWithType: ParseNode.EvalEnum(ParseTree, Object[])
  fullName: TinyPG.ParseNode.EvalEnum(TinyPG.ParseTree, System.Object[])
  type: Method
  source:
    remote:
      path: src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: EvalEnum
    path: ../OpenSilverGit/src/Compiler/Compiler.TypeScriptDefToCSharp/ParseTree.cs
    startLine: 365
  assemblies:
  - OpenSilver.Compiler.TypeScriptDefToCSharp
  namespace: TinyPG
  syntax:
    content: protected virtual object EvalEnum(ParseTree tree, params object[] paramlist)
    parameters:
    - id: tree
      type: TinyPG.ParseTree
    - id: paramlist
      type: System.Object[]
    return:
      type: System.Object
    content.vb: Protected Overridable Function EvalEnum(tree As ParseTree, ParamArray paramlist As Object()) As Object
  overload: TinyPG.ParseNode.EvalEnum*
  nameWithType.vb: ParseNode.EvalEnum(ParseTree, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: TinyPG.ParseNode.EvalEnum(TinyPG.ParseTree, System.Object())
  name.vb: EvalEnum(ParseTree, Object())
references:
- uid: TinyPG
  commentId: N:TinyPG
  name: TinyPG
  nameWithType: TinyPG
  fullName: TinyPG
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.List{TinyPG.ParseNode}
  commentId: T:System.Collections.Generic.List{TinyPG.ParseNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ParseNode>
  nameWithType: List<ParseNode>
  fullName: System.Collections.Generic.List<TinyPG.ParseNode>
  nameWithType.vb: List(Of ParseNode)
  fullName.vb: System.Collections.Generic.List(Of TinyPG.ParseNode)
  name.vb: List(Of ParseNode)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyPG.ParseNode
    name: ParseNode
    nameWithType: ParseNode
    fullName: TinyPG.ParseNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyPG.ParseNode
    name: ParseNode
    nameWithType: ParseNode
    fullName: TinyPG.ParseNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyPG.ParseNode.Nodes*
  commentId: Overload:TinyPG.ParseNode.Nodes
  name: Nodes
  nameWithType: ParseNode.Nodes
  fullName: TinyPG.ParseNode.Nodes
- uid: TinyPG.ParseNode
  commentId: T:TinyPG.ParseNode
  parent: TinyPG
  name: ParseNode
  nameWithType: ParseNode
  fullName: TinyPG.ParseNode
- uid: TinyPG.Token
  commentId: T:TinyPG.Token
  parent: TinyPG
  name: Token
  nameWithType: Token
  fullName: TinyPG.Token
- uid: TinyPG.ParseNode.Text*
  commentId: Overload:TinyPG.ParseNode.Text
  name: Text
  nameWithType: ParseNode.Text
  fullName: TinyPG.ParseNode.Text
- uid: TinyPG.ParseNode.CreateNode*
  commentId: Overload:TinyPG.ParseNode.CreateNode
  name: CreateNode
  nameWithType: ParseNode.CreateNode
  fullName: TinyPG.ParseNode.CreateNode
- uid: TinyPG.ParseNode.#ctor*
  commentId: Overload:TinyPG.ParseNode.#ctor
  name: ParseNode
  nameWithType: ParseNode.ParseNode
  fullName: TinyPG.ParseNode.ParseNode
- uid: TinyPG.ParseNode.GetValue*
  commentId: Overload:TinyPG.ParseNode.GetValue
  name: GetValue
  nameWithType: ParseNode.GetValue
  fullName: TinyPG.ParseNode.GetValue
- uid: TinyPG.ParseTree
  commentId: T:TinyPG.ParseTree
  parent: TinyPG
  name: ParseTree
  nameWithType: ParseTree
  fullName: TinyPG.ParseTree
- uid: TinyPG.TokenType
  commentId: T:TinyPG.TokenType
  parent: TinyPG
  name: TokenType
  nameWithType: TokenType
  fullName: TinyPG.TokenType
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyPG.ParseNode.EvalStart*
  commentId: Overload:TinyPG.ParseNode.EvalStart
  name: EvalStart
  nameWithType: ParseNode.EvalStart
  fullName: TinyPG.ParseNode.EvalStart
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyPG.ParseNode.EvalNamespace*
  commentId: Overload:TinyPG.ParseNode.EvalNamespace
  name: EvalNamespace
  nameWithType: ParseNode.EvalNamespace
  fullName: TinyPG.ParseNode.EvalNamespace
- uid: TinyPG.ParseNode.EvalNamespaceContent*
  commentId: Overload:TinyPG.ParseNode.EvalNamespaceContent
  name: EvalNamespaceContent
  nameWithType: ParseNode.EvalNamespaceContent
  fullName: TinyPG.ParseNode.EvalNamespaceContent
- uid: TinyPG.ParseNode.EvalGeneric*
  commentId: Overload:TinyPG.ParseNode.EvalGeneric
  name: EvalGeneric
  nameWithType: ParseNode.EvalGeneric
  fullName: TinyPG.ParseNode.EvalGeneric
- uid: TinyPG.ParseNode.EvalFunctionType*
  commentId: Overload:TinyPG.ParseNode.EvalFunctionType
  name: EvalFunctionType
  nameWithType: ParseNode.EvalFunctionType
  fullName: TinyPG.ParseNode.EvalFunctionType
- uid: TinyPG.ParseNode.EvalTypeof*
  commentId: Overload:TinyPG.ParseNode.EvalTypeof
  name: EvalTypeof
  nameWithType: ParseNode.EvalTypeof
  fullName: TinyPG.ParseNode.EvalTypeof
- uid: TinyPG.ParseNode.EvalAnonymousType*
  commentId: Overload:TinyPG.ParseNode.EvalAnonymousType
  name: EvalAnonymousType
  nameWithType: ParseNode.EvalAnonymousType
  fullName: TinyPG.ParseNode.EvalAnonymousType
- uid: TinyPG.ParseNode.EvalType*
  commentId: Overload:TinyPG.ParseNode.EvalType
  name: EvalType
  nameWithType: ParseNode.EvalType
  fullName: TinyPG.ParseNode.EvalType
- uid: TinyPG.ParseNode.EvalVariable*
  commentId: Overload:TinyPG.ParseNode.EvalVariable
  name: EvalVariable
  nameWithType: ParseNode.EvalVariable
  fullName: TinyPG.ParseNode.EvalVariable
- uid: TinyPG.ParseNode.EvalIndexer*
  commentId: Overload:TinyPG.ParseNode.EvalIndexer
  name: EvalIndexer
  nameWithType: ParseNode.EvalIndexer
  fullName: TinyPG.ParseNode.EvalIndexer
- uid: TinyPG.ParseNode.EvalParamList*
  commentId: Overload:TinyPG.ParseNode.EvalParamList
  name: EvalParamList
  nameWithType: ParseNode.EvalParamList
  fullName: TinyPG.ParseNode.EvalParamList
- uid: TinyPG.ParseNode.EvalFunction*
  commentId: Overload:TinyPG.ParseNode.EvalFunction
  name: EvalFunction
  nameWithType: ParseNode.EvalFunction
  fullName: TinyPG.ParseNode.EvalFunction
- uid: TinyPG.ParseNode.EvalBlockElement*
  commentId: Overload:TinyPG.ParseNode.EvalBlockElement
  name: EvalBlockElement
  nameWithType: ParseNode.EvalBlockElement
  fullName: TinyPG.ParseNode.EvalBlockElement
- uid: TinyPG.ParseNode.EvalInterface*
  commentId: Overload:TinyPG.ParseNode.EvalInterface
  name: EvalInterface
  nameWithType: ParseNode.EvalInterface
  fullName: TinyPG.ParseNode.EvalInterface
- uid: TinyPG.ParseNode.EvalClass*
  commentId: Overload:TinyPG.ParseNode.EvalClass
  name: EvalClass
  nameWithType: ParseNode.EvalClass
  fullName: TinyPG.ParseNode.EvalClass
- uid: TinyPG.ParseNode.EvalAccessTag*
  commentId: Overload:TinyPG.ParseNode.EvalAccessTag
  name: EvalAccessTag
  nameWithType: ParseNode.EvalAccessTag
  fullName: TinyPG.ParseNode.EvalAccessTag
- uid: TinyPG.ParseNode.EvalGetter*
  commentId: Overload:TinyPG.ParseNode.EvalGetter
  name: EvalGetter
  nameWithType: ParseNode.EvalGetter
  fullName: TinyPG.ParseNode.EvalGetter
- uid: TinyPG.ParseNode.EvalSetter*
  commentId: Overload:TinyPG.ParseNode.EvalSetter
  name: EvalSetter
  nameWithType: ParseNode.EvalSetter
  fullName: TinyPG.ParseNode.EvalSetter
- uid: TinyPG.ParseNode.EvalExtends*
  commentId: Overload:TinyPG.ParseNode.EvalExtends
  name: EvalExtends
  nameWithType: ParseNode.EvalExtends
  fullName: TinyPG.ParseNode.EvalExtends
- uid: TinyPG.ParseNode.EvalExport*
  commentId: Overload:TinyPG.ParseNode.EvalExport
  name: EvalExport
  nameWithType: ParseNode.EvalExport
  fullName: TinyPG.ParseNode.EvalExport
- uid: TinyPG.ParseNode.EvalImport*
  commentId: Overload:TinyPG.ParseNode.EvalImport
  name: EvalImport
  nameWithType: ParseNode.EvalImport
  fullName: TinyPG.ParseNode.EvalImport
- uid: TinyPG.ParseNode.EvalEnum*
  commentId: Overload:TinyPG.ParseNode.EvalEnum
  name: EvalEnum
  nameWithType: ParseNode.EvalEnum
  fullName: TinyPG.ParseNode.EvalEnum
