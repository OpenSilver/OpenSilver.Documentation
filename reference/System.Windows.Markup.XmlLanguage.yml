### YamlMime:ManagedReference
items:
- uid: System.Windows.Markup.XmlLanguage
  commentId: T:System.Windows.Markup.XmlLanguage
  id: XmlLanguage
  parent: System.Windows.Markup
  children:
  - System.Windows.Markup.XmlLanguage.Equals(System.Object)
  - System.Windows.Markup.XmlLanguage.GetHashCode
  - System.Windows.Markup.XmlLanguage.GetLanguage(System.String)
  - System.Windows.Markup.XmlLanguage.IetfLanguageTag
  - System.Windows.Markup.XmlLanguage.op_Equality(System.Windows.Markup.XmlLanguage,System.Windows.Markup.XmlLanguage)
  - System.Windows.Markup.XmlLanguage.op_Inequality(System.Windows.Markup.XmlLanguage,System.Windows.Markup.XmlLanguage)
  langs:
  - csharp
  - vb
  name: XmlLanguage
  nameWithType: XmlLanguage
  fullName: System.Windows.Markup.XmlLanguage
  type: Class
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Markup/XmlLanguage.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: XmlLanguage
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Markup/XmlLanguage.cs
    startLine: 21
  assemblies:
  - OpenSilver
  namespace: System.Windows.Markup
  summary: "\nRepresents culture information for use in XML and XAML markup.\n"
  example: []
  syntax:
    content: public sealed class XmlLanguage
    content.vb: Public NotInheritable Class XmlLanguage
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Windows.Markup.XmlLanguage.IetfLanguageTag
  commentId: P:System.Windows.Markup.XmlLanguage.IetfLanguageTag
  id: IetfLanguageTag
  parent: System.Windows.Markup.XmlLanguage
  langs:
  - csharp
  - vb
  name: IetfLanguageTag
  nameWithType: XmlLanguage.IetfLanguageTag
  fullName: System.Windows.Markup.XmlLanguage.IetfLanguageTag
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Markup/XmlLanguage.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IetfLanguageTag
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Markup/XmlLanguage.cs
    startLine: 33
  assemblies:
  - OpenSilver
  namespace: System.Windows.Markup
  summary: "\nGets the string representation of the language tag.\n"
  example: []
  syntax:
    content: public string IetfLanguageTag { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property IetfLanguageTag As String
  overload: System.Windows.Markup.XmlLanguage.IetfLanguageTag*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Windows.Markup.XmlLanguage.GetLanguage(System.String)
  commentId: M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)
  id: GetLanguage(System.String)
  parent: System.Windows.Markup.XmlLanguage
  langs:
  - csharp
  - vb
  name: GetLanguage(String)
  nameWithType: XmlLanguage.GetLanguage(String)
  fullName: System.Windows.Markup.XmlLanguage.GetLanguage(System.String)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Markup/XmlLanguage.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetLanguage
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Markup/XmlLanguage.cs
    startLine: 52
  assemblies:
  - OpenSilver
  namespace: System.Windows.Markup
  summary: "\nReturns a <xref href=\"System.Windows.Markup.XmlLanguage\" data-throw-if-not-resolved=\"false\"></xref> instance, based on a string representing\nthe language per RFC 3066.\n"
  example: []
  syntax:
    content: public static XmlLanguage GetLanguage(string ietfLanguageTag)
    parameters:
    - id: ietfLanguageTag
      type: System.String
      description: "\nAn RFC 3066 language string, or an empty string (&quot;&quot;).\n"
    return:
      type: System.Windows.Markup.XmlLanguage
      description: "\nA new <xref href=\"System.Windows.Markup.XmlLanguage\" data-throw-if-not-resolved=\"false\"></xref> with the provided string as its <xref href=\"System.Windows.Markup.XmlLanguage.IetfLanguageTag\" data-throw-if-not-resolved=\"false\"></xref>\nvalue.\n"
    content.vb: Public Shared Function GetLanguage(ietfLanguageTag As String) As XmlLanguage
  overload: System.Windows.Markup.XmlLanguage.GetLanguage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nietfLanguageTag is null.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nietfLanguageTag cannot be processed as a valid IETF language.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Markup.XmlLanguage.Equals(System.Object)
  commentId: M:System.Windows.Markup.XmlLanguage.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.Markup.XmlLanguage
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: XmlLanguage.Equals(Object)
  fullName: System.Windows.Markup.XmlLanguage.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Markup/XmlLanguage.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Equals
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Markup/XmlLanguage.cs
    startLine: 78
  assemblies:
  - OpenSilver
  namespace: System.Windows.Markup
  summary: "\nChecks for equality of an object to the current object.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: "\nThe object to compare to the calling object.\n"
    return:
      type: System.Boolean
      description: "\ntrue if the objects are the same object; otherwise, false.\n"
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: System.Windows.Markup.XmlLanguage.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Windows.Markup.XmlLanguage.GetHashCode
  commentId: M:System.Windows.Markup.XmlLanguage.GetHashCode
  id: GetHashCode
  parent: System.Windows.Markup.XmlLanguage
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: XmlLanguage.GetHashCode()
  fullName: System.Windows.Markup.XmlLanguage.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Markup/XmlLanguage.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetHashCode
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Markup/XmlLanguage.cs
    startLine: 89
  assemblies:
  - OpenSilver
  namespace: System.Windows.Markup
  summary: "\nServes as a hash function for the <xref href=\"System.Windows.Markup.XmlLanguage\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: "\nAn integer hash value.\n"
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: System.Windows.Markup.XmlLanguage.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Windows.Markup.XmlLanguage.op_Equality(System.Windows.Markup.XmlLanguage,System.Windows.Markup.XmlLanguage)
  commentId: M:System.Windows.Markup.XmlLanguage.op_Equality(System.Windows.Markup.XmlLanguage,System.Windows.Markup.XmlLanguage)
  id: op_Equality(System.Windows.Markup.XmlLanguage,System.Windows.Markup.XmlLanguage)
  parent: System.Windows.Markup.XmlLanguage
  langs:
  - csharp
  - vb
  name: Equality(XmlLanguage, XmlLanguage)
  nameWithType: XmlLanguage.Equality(XmlLanguage, XmlLanguage)
  fullName: System.Windows.Markup.XmlLanguage.Equality(System.Windows.Markup.XmlLanguage, System.Windows.Markup.XmlLanguage)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Markup/XmlLanguage.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Equality
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Markup/XmlLanguage.cs
    startLine: 108
  assemblies:
  - OpenSilver
  namespace: System.Windows.Markup
  summary: "\nDetermines whether two specified <xref href=\"System.Windows.Markup.XmlLanguage\" data-throw-if-not-resolved=\"false\"></xref> objects have\nthe same value.\n"
  example: []
  syntax:
    content: public static bool operator ==(XmlLanguage xmlLanguage1, XmlLanguage xmlLanguage2)
    parameters:
    - id: xmlLanguage1
      type: System.Windows.Markup.XmlLanguage
      description: "\nThe first <xref href=\"System.Windows.Markup.XmlLanguage\" data-throw-if-not-resolved=\"false\"></xref> to compare.\n"
    - id: xmlLanguage2
      type: System.Windows.Markup.XmlLanguage
      description: "\nThe second <xref href=\"System.Windows.Markup.XmlLanguage\" data-throw-if-not-resolved=\"false\"></xref> to compare.\n"
    return:
      type: System.Boolean
      description: "\ntrue if the value of xmlLanguage1 is the same as the value of xmlLanguage2; otherwise,\nfalse.\n"
    content.vb: Public Shared Operator =(xmlLanguage1 As XmlLanguage, xmlLanguage2 As XmlLanguage) As Boolean
  overload: System.Windows.Markup.XmlLanguage.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Markup.XmlLanguage.op_Inequality(System.Windows.Markup.XmlLanguage,System.Windows.Markup.XmlLanguage)
  commentId: M:System.Windows.Markup.XmlLanguage.op_Inequality(System.Windows.Markup.XmlLanguage,System.Windows.Markup.XmlLanguage)
  id: op_Inequality(System.Windows.Markup.XmlLanguage,System.Windows.Markup.XmlLanguage)
  parent: System.Windows.Markup.XmlLanguage
  langs:
  - csharp
  - vb
  name: Inequality(XmlLanguage, XmlLanguage)
  nameWithType: XmlLanguage.Inequality(XmlLanguage, XmlLanguage)
  fullName: System.Windows.Markup.XmlLanguage.Inequality(System.Windows.Markup.XmlLanguage, System.Windows.Markup.XmlLanguage)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Markup/XmlLanguage.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Inequality
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Markup/XmlLanguage.cs
    startLine: 134
  assemblies:
  - OpenSilver
  namespace: System.Windows.Markup
  summary: "\nDetermines whether two specified <xref href=\"System.Windows.Markup.XmlLanguage\" data-throw-if-not-resolved=\"false\"></xref> objects have\na different value.\n"
  example: []
  syntax:
    content: public static bool operator !=(XmlLanguage xmlLanguage1, XmlLanguage xmlLanguage2)
    parameters:
    - id: xmlLanguage1
      type: System.Windows.Markup.XmlLanguage
      description: "\nThe first <xref href=\"System.Windows.Markup.XmlLanguage\" data-throw-if-not-resolved=\"false\"></xref> to compare.\n"
    - id: xmlLanguage2
      type: System.Windows.Markup.XmlLanguage
      description: "\nThe second <xref href=\"System.Windows.Markup.XmlLanguage\" data-throw-if-not-resolved=\"false\"></xref> to compare.\n"
    return:
      type: System.Boolean
      description: "\ntrue if the value of xmlLanguage1 is different from the value of xmlLanguage2;\notherwise, false.\n"
    content.vb: Public Shared Operator <>(xmlLanguage1 As XmlLanguage, xmlLanguage2 As XmlLanguage) As Boolean
  overload: System.Windows.Markup.XmlLanguage.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Windows.Markup
  commentId: N:System.Windows.Markup
  name: System.Windows.Markup
  nameWithType: System.Windows.Markup
  fullName: System.Windows.Markup
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: System.Windows.Markup.XmlLanguage.IetfLanguageTag*
  commentId: Overload:System.Windows.Markup.XmlLanguage.IetfLanguageTag
  name: IetfLanguageTag
  nameWithType: XmlLanguage.IetfLanguageTag
  fullName: System.Windows.Markup.XmlLanguage.IetfLanguageTag
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Markup.XmlLanguage
  commentId: T:System.Windows.Markup.XmlLanguage
  parent: System.Windows.Markup
  name: XmlLanguage
  nameWithType: XmlLanguage
  fullName: System.Windows.Markup.XmlLanguage
- uid: System.Windows.Markup.XmlLanguage.IetfLanguageTag
  commentId: P:System.Windows.Markup.XmlLanguage.IetfLanguageTag
  isExternal: true
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: System.Windows.Markup.XmlLanguage.GetLanguage*
  commentId: Overload:System.Windows.Markup.XmlLanguage.GetLanguage
  name: GetLanguage
  nameWithType: XmlLanguage.GetLanguage
  fullName: System.Windows.Markup.XmlLanguage.GetLanguage
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Markup.XmlLanguage.Equals*
  commentId: Overload:System.Windows.Markup.XmlLanguage.Equals
  name: Equals
  nameWithType: XmlLanguage.Equals
  fullName: System.Windows.Markup.XmlLanguage.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Markup.XmlLanguage.GetHashCode*
  commentId: Overload:System.Windows.Markup.XmlLanguage.GetHashCode
  name: GetHashCode
  nameWithType: XmlLanguage.GetHashCode
  fullName: System.Windows.Markup.XmlLanguage.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Markup.XmlLanguage.op_Equality*
  commentId: Overload:System.Windows.Markup.XmlLanguage.op_Equality
  name: Equality
  nameWithType: XmlLanguage.Equality
  fullName: System.Windows.Markup.XmlLanguage.Equality
- uid: System.Windows.Markup.XmlLanguage.op_Inequality*
  commentId: Overload:System.Windows.Markup.XmlLanguage.op_Inequality
  name: Inequality
  nameWithType: XmlLanguage.Inequality
  fullName: System.Windows.Markup.XmlLanguage.Inequality
