### YamlMime:ManagedReference
items:
- uid: Microsoft.Expression.Interactivity.Core.ActionCommand
  commentId: T:Microsoft.Expression.Interactivity.Core.ActionCommand
  id: ActionCommand
  parent: Microsoft.Expression.Interactivity.Core
  children:
  - Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action)
  - Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action{System.Object})
  - Microsoft.Expression.Interactivity.Core.ActionCommand.Execute(System.Object)
  - Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecute(System.Object)
  - Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecuteChanged
  langs:
  - csharp
  - vb
  name: ActionCommand
  nameWithType: ActionCommand
  fullName: Microsoft.Expression.Interactivity.Core.ActionCommand
  type: Class
  source:
    remote:
      path: src/Runtime/Blend/Interactions/Interactivity/Core/ActionCommand.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ActionCommand
    path: ../OpenSilverGit/src/Runtime/Blend/Interactions/Interactivity/Core/ActionCommand.cs
    startLine: 12
  assemblies:
  - OpenSilver.Expression.Interactions
  namespace: Microsoft.Expression.Interactivity.Core
  summary: "\nA basic implementation of ICommand that wraps a method that takes no parameters or a method that takes one parameter.\n"
  example: []
  syntax:
    content: 'public sealed class ActionCommand : ICommand'
    content.vb: >-
      Public NotInheritable Class ActionCommand
          Implements ICommand
  inheritance:
  - System.Object
  implements:
  - System.Windows.Input.ICommand
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action)
  commentId: M:Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action)
  id: '#ctor(System.Action)'
  parent: Microsoft.Expression.Interactivity.Core.ActionCommand
  langs:
  - csharp
  - vb
  name: ActionCommand(Action)
  nameWithType: ActionCommand.ActionCommand(Action)
  fullName: Microsoft.Expression.Interactivity.Core.ActionCommand.ActionCommand(System.Action)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Blend/Interactions/Interactivity/Core/ActionCommand.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Blend/Interactions/Interactivity/Core/ActionCommand.cs
    startLine: 22
  assemblies:
  - OpenSilver.Expression.Interactions
  namespace: Microsoft.Expression.Interactivity.Core
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Expression.Interactivity.Core.ActionCommand\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  remarks: Use this constructor to provide an action that ignores the ICommand parameter.
  example: []
  syntax:
    content: public ActionCommand(Action action)
    parameters:
    - id: action
      type: System.Action
      description: The action.
    content.vb: Public Sub New(action As Action)
  overload: Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action{System.Object})
  commentId: M:Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action{System.Object})
  id: '#ctor(System.Action{System.Object})'
  parent: Microsoft.Expression.Interactivity.Core.ActionCommand
  langs:
  - csharp
  - vb
  name: ActionCommand(Action<Object>)
  nameWithType: ActionCommand.ActionCommand(Action<Object>)
  fullName: Microsoft.Expression.Interactivity.Core.ActionCommand.ActionCommand(System.Action<System.Object>)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Blend/Interactions/Interactivity/Core/ActionCommand.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Blend/Interactions/Interactivity/Core/ActionCommand.cs
    startLine: 32
  assemblies:
  - OpenSilver.Expression.Interactions
  namespace: Microsoft.Expression.Interactivity.Core
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Expression.Interactivity.Core.ActionCommand\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  remarks: Use this constructor to provide an action that uses the object parameter passed by the Execute method.
  example: []
  syntax:
    content: public ActionCommand(Action<object> objectAction)
    parameters:
    - id: objectAction
      type: System.Action{System.Object}
      description: An action that takes an object parameter.
    content.vb: Public Sub New(objectAction As Action(Of Object))
  overload: Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor*
  nameWithType.vb: ActionCommand.ActionCommand(Action(Of Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Expression.Interactivity.Core.ActionCommand.ActionCommand(System.Action(Of System.Object))
  name.vb: ActionCommand(Action(Of Object))
- uid: Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecuteChanged
  commentId: E:Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecuteChanged
  id: System#Windows#Input#ICommand#CanExecuteChanged
  isEii: true
  parent: Microsoft.Expression.Interactivity.Core.ActionCommand
  langs:
  - csharp
  - vb
  name: ICommand.CanExecuteChanged
  nameWithType: ActionCommand.ICommand.CanExecuteChanged
  fullName: Microsoft.Expression.Interactivity.Core.ActionCommand.System.Windows.Input.ICommand.CanExecuteChanged
  type: Event
  source:
    remote:
      path: src/Runtime/Blend/Interactions/Interactivity/Core/ActionCommand.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Windows.Input.ICommand.CanExecuteChanged
    path: ../OpenSilverGit/src/Runtime/Blend/Interactions/Interactivity/Core/ActionCommand.cs
    startLine: 45
  assemblies:
  - OpenSilver.Expression.Interactions
  namespace: Microsoft.Expression.Interactivity.Core
  summary: "\nOccurs when changes occur that affect whether the command should execute. Will not be fired by ActionCommand.\n"
  example: []
  syntax:
    content: event EventHandler ICommand.CanExecuteChanged
    return:
      type: System.EventHandler
    content.vb: Event System.Windows.Input.ICommand.CanExecuteChanged As EventHandler Implements ICommand.CanExecuteChanged
  implements:
  - System.Windows.Input.ICommand.CanExecuteChanged
  nameWithType.vb: ActionCommand.System.Windows.Input.ICommand.CanExecuteChanged
  name.vb: System.Windows.Input.ICommand.CanExecuteChanged
- uid: Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecute(System.Object)
  commentId: M:Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecute(System.Object)
  id: System#Windows#Input#ICommand#CanExecute(System.Object)
  isEii: true
  parent: Microsoft.Expression.Interactivity.Core.ActionCommand
  langs:
  - csharp
  - vb
  name: ICommand.CanExecute(Object)
  nameWithType: ActionCommand.ICommand.CanExecute(Object)
  fullName: Microsoft.Expression.Interactivity.Core.ActionCommand.System.Windows.Input.ICommand.CanExecute(System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Blend/Interactions/Interactivity/Core/ActionCommand.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Windows.Input.ICommand.CanExecute
    path: ../OpenSilverGit/src/Runtime/Blend/Interactions/Interactivity/Core/ActionCommand.cs
    startLine: 58
  assemblies:
  - OpenSilver.Expression.Interactions
  namespace: Microsoft.Expression.Interactivity.Core
  summary: "\nDefines the method that determines whether the command can execute in its current state.\n"
  example: []
  syntax:
    content: bool ICommand.CanExecute(object parameter)
    parameters:
    - id: parameter
      type: System.Object
      description: Data used by the command.  If the command does not require data to be passed, then this object can be set to null.
    return:
      type: System.Boolean
      description: "\nAlways returns true.\n"
    content.vb: Function System.Windows.Input.ICommand.CanExecute(parameter As Object) As Boolean Implements ICommand.CanExecute
  overload: Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecute*
  implements:
  - System.Windows.Input.ICommand.CanExecute(System.Object)
  nameWithType.vb: ActionCommand.System.Windows.Input.ICommand.CanExecute(Object)
  name.vb: System.Windows.Input.ICommand.CanExecute(Object)
- uid: Microsoft.Expression.Interactivity.Core.ActionCommand.Execute(System.Object)
  commentId: M:Microsoft.Expression.Interactivity.Core.ActionCommand.Execute(System.Object)
  id: Execute(System.Object)
  parent: Microsoft.Expression.Interactivity.Core.ActionCommand
  langs:
  - csharp
  - vb
  name: Execute(Object)
  nameWithType: ActionCommand.Execute(Object)
  fullName: Microsoft.Expression.Interactivity.Core.ActionCommand.Execute(System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Blend/Interactions/Interactivity/Core/ActionCommand.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Execute
    path: ../OpenSilverGit/src/Runtime/Blend/Interactions/Interactivity/Core/ActionCommand.cs
    startLine: 67
  assemblies:
  - OpenSilver.Expression.Interactions
  namespace: Microsoft.Expression.Interactivity.Core
  summary: "\nDefines the method to be called when the command is invoked.\n"
  example: []
  syntax:
    content: public void Execute(object parameter)
    parameters:
    - id: parameter
      type: System.Object
      description: Data used by the command.  If the command does not require data to be passed, then this object can be set to null.
    content.vb: Public Sub Execute(parameter As Object)
  overload: Microsoft.Expression.Interactivity.Core.ActionCommand.Execute*
  implements:
  - System.Windows.Input.ICommand.Execute(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Expression.Interactivity.Core
  commentId: N:Microsoft.Expression.Interactivity.Core
  name: Microsoft.Expression.Interactivity.Core
  nameWithType: Microsoft.Expression.Interactivity.Core
  fullName: Microsoft.Expression.Interactivity.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.ICommand
  commentId: T:System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.Windows.Input
  commentId: N:System.Windows.Input
  name: System.Windows.Input
  nameWithType: System.Windows.Input
  fullName: System.Windows.Input
- uid: Microsoft.Expression.Interactivity.Core.ActionCommand
  commentId: T:Microsoft.Expression.Interactivity.Core.ActionCommand
  name: ActionCommand
  nameWithType: ActionCommand
  fullName: Microsoft.Expression.Interactivity.Core.ActionCommand
- uid: Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor*
  commentId: Overload:Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor
  name: ActionCommand
  nameWithType: ActionCommand.ActionCommand
  fullName: Microsoft.Expression.Interactivity.Core.ActionCommand.ActionCommand
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Action{System.Object}
  commentId: T:System.Action{System.Object}
  parent: System
  definition: System.Action`1
  name: Action<Object>
  nameWithType: Action<Object>
  fullName: System.Action<System.Object>
  nameWithType.vb: Action(Of Object)
  fullName.vb: System.Action(Of System.Object)
  name.vb: Action(Of Object)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Input.ICommand.CanExecuteChanged
  commentId: E:System.Windows.Input.ICommand.CanExecuteChanged
  parent: System.Windows.Input.ICommand
  isExternal: true
  name: CanExecuteChanged
  nameWithType: ICommand.CanExecuteChanged
  fullName: System.Windows.Input.ICommand.CanExecuteChanged
- uid: System.EventHandler
  commentId: T:System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecute*
  commentId: Overload:Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecute
  name: ICommand.CanExecute
  nameWithType: ActionCommand.ICommand.CanExecute
  fullName: Microsoft.Expression.Interactivity.Core.ActionCommand.System.Windows.Input.ICommand.CanExecute
  nameWithType.vb: ActionCommand.System.Windows.Input.ICommand.CanExecute
  name.vb: System.Windows.Input.ICommand.CanExecute
- uid: System.Windows.Input.ICommand.CanExecute(System.Object)
  commentId: M:System.Windows.Input.ICommand.CanExecute(System.Object)
  parent: System.Windows.Input.ICommand
  isExternal: true
  name: CanExecute(Object)
  nameWithType: ICommand.CanExecute(Object)
  fullName: System.Windows.Input.ICommand.CanExecute(System.Object)
  spec.csharp:
  - uid: System.Windows.Input.ICommand.CanExecute(System.Object)
    name: CanExecute
    nameWithType: ICommand.CanExecute
    fullName: System.Windows.Input.ICommand.CanExecute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.Input.ICommand.CanExecute(System.Object)
    name: CanExecute
    nameWithType: ICommand.CanExecute
    fullName: System.Windows.Input.ICommand.CanExecute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Expression.Interactivity.Core.ActionCommand.Execute*
  commentId: Overload:Microsoft.Expression.Interactivity.Core.ActionCommand.Execute
  name: Execute
  nameWithType: ActionCommand.Execute
  fullName: Microsoft.Expression.Interactivity.Core.ActionCommand.Execute
- uid: System.Windows.Input.ICommand.Execute(System.Object)
  commentId: M:System.Windows.Input.ICommand.Execute(System.Object)
  parent: System.Windows.Input.ICommand
  isExternal: true
  name: Execute(Object)
  nameWithType: ICommand.Execute(Object)
  fullName: System.Windows.Input.ICommand.Execute(System.Object)
  spec.csharp:
  - uid: System.Windows.Input.ICommand.Execute(System.Object)
    name: Execute
    nameWithType: ICommand.Execute
    fullName: System.Windows.Input.ICommand.Execute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.Input.ICommand.Execute(System.Object)
    name: Execute
    nameWithType: ICommand.Execute
    fullName: System.Windows.Input.ICommand.Execute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
