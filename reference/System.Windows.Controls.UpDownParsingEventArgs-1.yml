### YamlMime:ManagedReference
items:
- uid: System.Windows.Controls.UpDownParsingEventArgs`1
  commentId: T:System.Windows.Controls.UpDownParsingEventArgs`1
  id: UpDownParsingEventArgs`1
  parent: System.Windows.Controls
  children:
  - System.Windows.Controls.UpDownParsingEventArgs`1.#ctor(System.String)
  - System.Windows.Controls.UpDownParsingEventArgs`1.Handled
  - System.Windows.Controls.UpDownParsingEventArgs`1.Text
  - System.Windows.Controls.UpDownParsingEventArgs`1.Value
  langs:
  - csharp
  - vb
  name: UpDownParsingEventArgs<T>
  nameWithType: UpDownParsingEventArgs<T>
  fullName: System.Windows.Controls.UpDownParsingEventArgs<T>
  type: Class
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/UpDownParsingEventArgs.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: UpDownParsingEventArgs
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/UpDownParsingEventArgs.cs
    startLine: 16
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nProvides data for the UpDownBase.Parsing event.\n"
  example: []
  syntax:
    content: 'public class UpDownParsingEventArgs<T> : RoutedEventArgs'
    typeParameters:
    - id: T
      description: Type of Value property.
    content.vb: >-
      Public Class UpDownParsingEventArgs(Of T)
          Inherits RoutedEventArgs
  inheritance:
  - System.Object
  - System.EventArgs
  - System.Windows.RoutedEventArgs
  inheritedMembers:
  - System.Windows.RoutedEventArgs.OriginalSource
  - System.EventArgs.Empty
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  nameWithType.vb: UpDownParsingEventArgs(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Windows.Controls.UpDownParsingEventArgs(Of T)
  name.vb: UpDownParsingEventArgs(Of T)
- uid: System.Windows.Controls.UpDownParsingEventArgs`1.Text
  commentId: P:System.Windows.Controls.UpDownParsingEventArgs`1.Text
  id: Text
  parent: System.Windows.Controls.UpDownParsingEventArgs`1
  langs:
  - csharp
  - vb
  name: Text
  nameWithType: UpDownParsingEventArgs<T>.Text
  fullName: System.Windows.Controls.UpDownParsingEventArgs<T>.Text
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/UpDownParsingEventArgs.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Text
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/UpDownParsingEventArgs.cs
    startLine: 21
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGets the original string value that will be parsed.\n"
  example: []
  syntax:
    content: public string Text { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Text As String
  overload: System.Windows.Controls.UpDownParsingEventArgs`1.Text*
  nameWithType.vb: UpDownParsingEventArgs(Of T).Text
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Windows.Controls.UpDownParsingEventArgs(Of T).Text
- uid: System.Windows.Controls.UpDownParsingEventArgs`1.Value
  commentId: P:System.Windows.Controls.UpDownParsingEventArgs`1.Value
  id: Value
  parent: System.Windows.Controls.UpDownParsingEventArgs`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: UpDownParsingEventArgs<T>.Value
  fullName: System.Windows.Controls.UpDownParsingEventArgs<T>.Value
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/UpDownParsingEventArgs.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Value
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/UpDownParsingEventArgs.cs
    startLine: 27
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGets or sets the value to be used.\n"
  example: []
  syntax:
    content: public T Value { get; set; }
    parameters: []
    return:
      type: '{T}'
      description: The parsed value.
    content.vb: Public Property Value As T
  overload: System.Windows.Controls.UpDownParsingEventArgs`1.Value*
  nameWithType.vb: UpDownParsingEventArgs(Of T).Value
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.Controls.UpDownParsingEventArgs(Of T).Value
- uid: System.Windows.Controls.UpDownParsingEventArgs`1.Handled
  commentId: P:System.Windows.Controls.UpDownParsingEventArgs`1.Handled
  id: Handled
  parent: System.Windows.Controls.UpDownParsingEventArgs`1
  langs:
  - csharp
  - vb
  name: Handled
  nameWithType: UpDownParsingEventArgs<T>.Handled
  fullName: System.Windows.Controls.UpDownParsingEventArgs<T>.Handled
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/UpDownParsingEventArgs.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Handled
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/UpDownParsingEventArgs.cs
    startLine: 34
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGets or sets a value indicating whether \nthis <xref href=\"System.Windows.Controls.UpDownParsingEventArgs%601\" data-throw-if-not-resolved=\"false\"></xref> is handled.\n"
  example: []
  syntax:
    content: public bool Handled { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>True</code> if handled; otherwise, <code>false</code>.
    content.vb: Public Property Handled As Boolean
  overload: System.Windows.Controls.UpDownParsingEventArgs`1.Handled*
  nameWithType.vb: UpDownParsingEventArgs(Of T).Handled
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.Controls.UpDownParsingEventArgs(Of T).Handled
- uid: System.Windows.Controls.UpDownParsingEventArgs`1.#ctor(System.String)
  commentId: M:System.Windows.Controls.UpDownParsingEventArgs`1.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Windows.Controls.UpDownParsingEventArgs`1
  langs:
  - csharp
  - vb
  name: UpDownParsingEventArgs(String)
  nameWithType: UpDownParsingEventArgs<T>.UpDownParsingEventArgs(String)
  fullName: System.Windows.Controls.UpDownParsingEventArgs<T>.UpDownParsingEventArgs(System.String)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/UpDownParsingEventArgs.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/UpDownParsingEventArgs.cs
    startLine: 41
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nInitializes a new instance of the \n<xref href=\"System.Windows.Controls.UpDownParsingEventArgs%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public UpDownParsingEventArgs(string text)
    parameters:
    - id: text
      type: System.String
      description: The text that will be parsed.
    content.vb: Public Sub New(text As String)
  overload: System.Windows.Controls.UpDownParsingEventArgs`1.#ctor*
  nameWithType.vb: UpDownParsingEventArgs(Of T).UpDownParsingEventArgs(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Windows.Controls.UpDownParsingEventArgs(Of T).UpDownParsingEventArgs(System.String)
references:
- uid: System.Windows.Controls
  commentId: N:System.Windows.Controls
  name: System.Windows.Controls
  nameWithType: System.Windows.Controls
  fullName: System.Windows.Controls
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  commentId: T:System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.RoutedEventArgs
  commentId: T:System.Windows.RoutedEventArgs
  parent: System.Windows
  name: RoutedEventArgs
  nameWithType: RoutedEventArgs
  fullName: System.Windows.RoutedEventArgs
- uid: System.Windows.RoutedEventArgs.OriginalSource
  commentId: P:System.Windows.RoutedEventArgs.OriginalSource
  parent: System.Windows.RoutedEventArgs
  name: OriginalSource
  nameWithType: RoutedEventArgs.OriginalSource
  fullName: System.Windows.RoutedEventArgs.OriginalSource
- uid: System.EventArgs.Empty
  commentId: F:System.EventArgs.Empty
  parent: System.EventArgs
  isExternal: true
  name: Empty
  nameWithType: EventArgs.Empty
  fullName: System.EventArgs.Empty
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.Windows
  commentId: N:System.Windows
  name: System.Windows
  nameWithType: System.Windows
  fullName: System.Windows
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: System.Windows.Controls.UpDownParsingEventArgs`1.Text*
  commentId: Overload:System.Windows.Controls.UpDownParsingEventArgs`1.Text
  name: Text
  nameWithType: UpDownParsingEventArgs<T>.Text
  fullName: System.Windows.Controls.UpDownParsingEventArgs<T>.Text
  nameWithType.vb: UpDownParsingEventArgs(Of T).Text
  fullName.vb: System.Windows.Controls.UpDownParsingEventArgs(Of T).Text
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Controls.UpDownParsingEventArgs`1.Value*
  commentId: Overload:System.Windows.Controls.UpDownParsingEventArgs`1.Value
  name: Value
  nameWithType: UpDownParsingEventArgs<T>.Value
  fullName: System.Windows.Controls.UpDownParsingEventArgs<T>.Value
  nameWithType.vb: UpDownParsingEventArgs(Of T).Value
  fullName.vb: System.Windows.Controls.UpDownParsingEventArgs(Of T).Value
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Windows.Controls.UpDownParsingEventArgs`1
  commentId: T:System.Windows.Controls.UpDownParsingEventArgs`1
  name: UpDownParsingEventArgs<T>
  nameWithType: UpDownParsingEventArgs<T>
  fullName: System.Windows.Controls.UpDownParsingEventArgs<T>
  nameWithType.vb: UpDownParsingEventArgs(Of T)
  fullName.vb: System.Windows.Controls.UpDownParsingEventArgs(Of T)
  name.vb: UpDownParsingEventArgs(Of T)
  spec.csharp:
  - uid: System.Windows.Controls.UpDownParsingEventArgs`1
    name: UpDownParsingEventArgs
    nameWithType: UpDownParsingEventArgs
    fullName: System.Windows.Controls.UpDownParsingEventArgs
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Windows.Controls.UpDownParsingEventArgs`1
    name: UpDownParsingEventArgs
    nameWithType: UpDownParsingEventArgs
    fullName: System.Windows.Controls.UpDownParsingEventArgs
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Controls.UpDownParsingEventArgs`1.Handled*
  commentId: Overload:System.Windows.Controls.UpDownParsingEventArgs`1.Handled
  name: Handled
  nameWithType: UpDownParsingEventArgs<T>.Handled
  fullName: System.Windows.Controls.UpDownParsingEventArgs<T>.Handled
  nameWithType.vb: UpDownParsingEventArgs(Of T).Handled
  fullName.vb: System.Windows.Controls.UpDownParsingEventArgs(Of T).Handled
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Controls.UpDownParsingEventArgs`1.#ctor*
  commentId: Overload:System.Windows.Controls.UpDownParsingEventArgs`1.#ctor
  name: UpDownParsingEventArgs
  nameWithType: UpDownParsingEventArgs<T>.UpDownParsingEventArgs
  fullName: System.Windows.Controls.UpDownParsingEventArgs<T>.UpDownParsingEventArgs
  nameWithType.vb: UpDownParsingEventArgs(Of T).UpDownParsingEventArgs
  fullName.vb: System.Windows.Controls.UpDownParsingEventArgs(Of T).UpDownParsingEventArgs
