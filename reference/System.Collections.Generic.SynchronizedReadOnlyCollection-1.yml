### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  commentId: T:System.Collections.Generic.SynchronizedReadOnlyCollection`1
  id: SynchronizedReadOnlyCollection`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Contains(`0)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Count
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#IndexOf(`0)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#Count
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add(System.Object)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)
  langs:
  - csharp
  - vb
  name: SynchronizedReadOnlyCollection<T>
  nameWithType: SynchronizedReadOnlyCollection<T>
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>
  type: Class
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: SynchronizedReadOnlyCollection
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 13
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: >-
      [ComVisible(false)]

      [NotImplemented]

      public class SynchronizedReadOnlyCollection<T> : IList<T>, ICollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable
    typeParameters:
    - id: T
    content.vb: >-
      <ComVisible(False)>

      <NotImplemented>

      Public Class SynchronizedReadOnlyCollection(Of T)
          Implements IList(Of T), ICollection(Of T), IEnumerable(Of T), IList, ICollection, IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IList{{T}}
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
    ctor: System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T)
  name.vb: SynchronizedReadOnlyCollection(Of T)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: SynchronizedReadOnlyCollection(Object, IEnumerable<T>)
  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object, IEnumerable<T>)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(System.Object, System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 30
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: >-
      [NotImplemented]

      public SynchronizedReadOnlyCollection(object syncRoot, IEnumerable<T> list)
    parameters:
    - id: syncRoot
      type: System.Object
    - id: list
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: >-
      <NotImplemented>

      Public Sub New(syncRoot As Object, list As IEnumerable(Of T))
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).SynchronizedReadOnlyCollection(Object, IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).SynchronizedReadOnlyCollection(System.Object, System.Collections.Generic.IEnumerable(Of T))
  name.vb: SynchronizedReadOnlyCollection(Object, IEnumerable(Of T))
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: SynchronizedReadOnlyCollection<T>.Item[Int32]
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: this[]
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 43
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: >-
      [NotImplemented]

      public T this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: '{T}'
    content.vb: >-
      <NotImplemented>

      Public ReadOnly Property Item(index As Integer) As T
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item*
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  id: System#Collections#Generic#IList{T}#Item(System.Int32)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList<T>.Item[Int32]
  nameWithType: SynchronizedReadOnlyCollection<T>.IList<T>.Item[Int32]
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.Generic.IList<T>.this[]
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 49
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: T IList<T>.this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: '{T}'
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IList<T>.Item(index As Integer) As T Implements IList(Of T).this[]
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item*
  implements:
  - System.Collections.Generic.IList{{T}}.Item(System.Int32)
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.Item(Int32)
  modifiers.csharp:
  - get
  - set
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.Item(System.Int32)
  name.vb: System.Collections.Generic.IList<T>.Item(Int32)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList.Item[Int32]
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Item[Int32]
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.IList.this[]
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 62
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: object IList.this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Object
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this[]
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item*
  implements:
  - System.Collections.IList.Item(System.Int32)
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Item(Int32)
  modifiers.csharp:
  - get
  - set
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count
  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count
  id: Count
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: SynchronizedReadOnlyCollection<T>.Count
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Count
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Count
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 81
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: >-
      [NotImplemented]

      public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <NotImplemented>

      Public ReadOnly Property Count As Integer
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count*
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).Count
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items
  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items
  id: Items
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: Items
  nameWithType: SynchronizedReadOnlyCollection<T>.Items
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Items
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Items
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 90
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: >-
      [NotImplemented]

      protected IList<T> Items { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{{T}}
    content.vb: >-
      <NotImplemented>

      Protected ReadOnly Property Items As IList(Of T)
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items*
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).Items
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).Items
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Count
  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Count
  id: System#Collections#Generic#ICollection{T}#Count
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Count
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.Count
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Count
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.Generic.ICollection<T>.Count
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 93
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: int ICollection<T>.Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<T>.Count As Integer Implements ICollection(Of T).Count
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Count*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Count
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Count
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Count
  name.vb: System.Collections.Generic.ICollection<T>.Count
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#Count
  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#Count
  id: System#Collections#ICollection#Count
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: ICollection.Count
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection.Count
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.Count
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.ICollection.Count
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 101
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: int ICollection.Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.Count As Integer Implements ICollection.Count
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#Count*
  implements:
  - System.Collections.ICollection.Count
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.ICollection.Count
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.ICollection.Count
  name.vb: System.Collections.ICollection.Count
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.IsReadOnly
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.Generic.ICollection<T>.IsReadOnly
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 109
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: bool ICollection<T>.IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<T>.IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{{T}}.IsReadOnly
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly
  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList.IsReadOnly
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.IsReadOnly
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsReadOnly
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.IList.IsReadOnly
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 117
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: bool IList.IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsReadOnly As Boolean Implements IList.IsReadOnly
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly*
  implements:
  - System.Collections.IList.IsReadOnly
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.IList.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize
  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList.IsFixedSize
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.IsFixedSize
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsFixedSize
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.IList.IsFixedSize
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 125
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: bool IList.IsFixedSize { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsFixedSize As Boolean Implements IList.IsFixedSize
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize*
  implements:
  - System.Collections.IList.IsFixedSize
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.IList.IsFixedSize
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: ICollection.IsSynchronized
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.ICollection.IsSynchronized
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 133
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized*
  implements:
  - System.Collections.ICollection.IsSynchronized
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: ICollection.SyncRoot
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection.SyncRoot
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.ICollection.SyncRoot
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 141
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: object ICollection.SyncRoot { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot*
  implements:
  - System.Collections.ICollection.SyncRoot
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.Contains(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Contains(T)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Contains
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 163
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: >-
      [NotImplemented]

      public bool Contains(T value)
    parameters:
    - id: value
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: >-
      <NotImplemented>

      Public Function Contains(value As T) As Boolean
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains*
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).Contains(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).Contains(T)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CopyTo
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 179
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: >-
      [NotImplemented]

      public void CopyTo(T[] array, int index)
    parameters:
    - id: array
      type: '{T}[]'
    - id: index
      type: System.Int32
    content.vb: >-
      <NotImplemented>

      Public Sub CopyTo(array As T(), index As Integer)
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo*
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).CopyTo(T(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: SynchronizedReadOnlyCollection<T>.GetEnumerator()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetEnumerator
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 191
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: >-
      [NotImplemented]

      public IEnumerator<T> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
    content.vb: >-
      <NotImplemented>

      Public Function GetEnumerator As IEnumerator(Of T)
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator*
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).GetEnumerator()
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IndexOf(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.IndexOf(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IndexOf(T)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IndexOf
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 206
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: >-
      [NotImplemented]

      public int IndexOf(T value)
    parameters:
    - id: value
      type: '{T}'
    return:
      type: System.Int32
    content.vb: >-
      <NotImplemented>

      Public Function IndexOf(value As T) As Integer
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf*
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).IndexOf(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).IndexOf(T)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Add(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.Add(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.Generic.ICollection<T>.Add
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 212
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: void ICollection<T>.Add(T item)
    parameters:
    - id: item
      type: '{T}'
    content.vb: Sub System.Collections.Generic.ICollection<T>.Add(item As T) Implements ICollection(Of T).Add
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Add({T})
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  name.vb: System.Collections.Generic.ICollection<T>.Add(T)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList.Add(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Add(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Add(System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.IList.Add
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 217
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: int IList.Add(object value)
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Int32
    content.vb: Function System.Collections.IList.Add(value As Object) As Integer Implements IList.Add
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add*
  implements:
  - System.Collections.IList.Add(System.Object)
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Add(Object)
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear
  id: System#Collections#Generic#ICollection{T}#Clear
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Clear()
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.Clear()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Clear()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.Generic.ICollection<T>.Clear
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 222
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: void ICollection<T>.Clear()
    content.vb: Sub System.Collections.Generic.ICollection<T>.Clear Implements ICollection(Of T).Clear
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Clear
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Clear()
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Clear()
  name.vb: System.Collections.Generic.ICollection<T>.Clear()
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear
  id: System#Collections#IList#Clear
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList.Clear()
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Clear()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Clear()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.IList.Clear
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 227
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: void IList.Clear()
    content.vb: Sub System.Collections.IList.Clear Implements IList.Clear
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear*
  implements:
  - System.Collections.IList.Clear
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Clear()
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Clear()
  name.vb: System.Collections.IList.Clear()
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Contains(`0)
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Contains(`0)
  id: System#Collections#Generic#ICollection{T}#Contains(`0)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Contains(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Contains(T)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.Generic.ICollection<T>.Contains
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 232
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: bool ICollection<T>.Contains(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Function System.Collections.Generic.ICollection<T>.Contains(item As T) As Boolean Implements ICollection(Of T).Contains
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Contains*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Contains({T})
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Contains(T)
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Contains(T)
  name.vb: System.Collections.Generic.ICollection<T>.Contains(T)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList.Contains(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Contains(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.IList.Contains
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 237
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: bool IList.Contains(object value)
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Function System.Collections.IList.Contains(value As Object) As Boolean Implements IList.Contains
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains*
  implements:
  - System.Collections.IList.Contains(System.Object)
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Contains(Object)
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  id: System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.CopyTo(T[], Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.Generic.ICollection<T>.CopyTo
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 242
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: void ICollection<T>.CopyTo(T[] array, int arrayIndex)
    parameters:
    - id: array
      type: '{T}[]'
    - id: arrayIndex
      type: System.Int32
    content.vb: Sub System.Collections.Generic.ICollection<T>.CopyTo(array As T(), arrayIndex As Integer) Implements ICollection(Of T).CopyTo
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#CopyTo*
  implements:
  - System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.CopyTo(T(), System.Int32)
  name.vb: System.Collections.Generic.ICollection<T>.CopyTo(T(), Int32)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.ICollection.CopyTo
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 247
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: void ICollection.CopyTo(Array array, int index)
    parameters:
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo*
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: SynchronizedReadOnlyCollection<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 252
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
    content.vb: Function System.Collections.Generic.IEnumerable<T>.GetEnumerator As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: SynchronizedReadOnlyCollection<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 257
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#IndexOf(`0)
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#IndexOf(`0)
  id: System#Collections#Generic#IList{T}#IndexOf(`0)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList<T>.IndexOf(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList<T>.IndexOf(T)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.Generic.IList<T>.IndexOf
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 262
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: int IList<T>.IndexOf(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Int32
    content.vb: Function System.Collections.Generic.IList<T>.IndexOf(item As T) As Integer Implements IList(Of T).IndexOf
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#IndexOf*
  implements:
  - System.Collections.Generic.IList{{T}}.IndexOf({T})
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.IndexOf(T)
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.IndexOf(T)
  name.vb: System.Collections.Generic.IList<T>.IndexOf(T)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList.IndexOf(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.IndexOf(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.IndexOf(System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.IList.IndexOf
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 267
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: int IList.IndexOf(object value)
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Int32
    content.vb: Function System.Collections.IList.IndexOf(value As Object) As Integer Implements IList.IndexOf
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf*
  implements:
  - System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.IList.IndexOf(Object)
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  id: System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList<T>.Insert(Int32, T)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.Generic.IList<T>.Insert
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 272
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: void IList<T>.Insert(int index, T item)
    parameters:
    - id: index
      type: System.Int32
    - id: item
      type: '{T}'
    content.vb: Sub System.Collections.Generic.IList<T>.Insert(index As Integer, item As T) Implements IList(Of T).Insert
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert*
  implements:
  - System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.Insert(Int32, T)
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  name.vb: System.Collections.Generic.IList<T>.Insert(Int32, T)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList.Insert(Int32, Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Insert(Int32, Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Insert(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.IList.Insert
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 277
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: void IList.Insert(int index, object value)
    parameters:
    - id: index
      type: System.Int32
    - id: value
      type: System.Object
    content.vb: Sub System.Collections.IList.Insert(index As Integer, value As Object) Implements IList.Insert
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert*
  implements:
  - System.Collections.IList.Insert(System.Int32,System.Object)
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  id: System#Collections#Generic#ICollection{T}#Remove(`0)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Remove(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Remove(T)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.Generic.ICollection<T>.Remove
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 282
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: bool ICollection<T>.Remove(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Function System.Collections.Generic.ICollection<T>.Remove(item As T) As Boolean Implements ICollection(Of T).Remove
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Remove({T})
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Remove(T)
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Remove(T)
  name.vb: System.Collections.Generic.ICollection<T>.Remove(T)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList.Remove(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Remove(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.IList.Remove
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 287
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: void IList.Remove(object value)
    parameters:
    - id: value
      type: System.Object
    content.vb: Sub System.Collections.IList.Remove(value As Object) Implements IList.Remove
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove*
  implements:
  - System.Collections.IList.Remove(System.Object)
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Remove(Object)
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  id: System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList<T>.RemoveAt(Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.Generic.IList<T>.RemoveAt
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 292
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: void IList<T>.RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
    content.vb: Sub System.Collections.Generic.IList<T>.RemoveAt(index As Integer) Implements IList(Of T).RemoveAt
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt*
  implements:
  - System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  name.vb: System.Collections.Generic.IList<T>.RemoveAt(Int32)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)
  id: System#Collections#IList#RemoveAt(System.Int32)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList.RemoveAt(Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.RemoveAt(Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.IList.RemoveAt
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Collections.Generic/WORKINPROGRESS/SynchronizedReadOnlyCollection.cs
    startLine: 297
  assemblies:
  - OpenSilver
  namespace: System.Collections.Generic
  syntax:
    content: void IList.RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
    content.vb: Sub System.Collections.IList.RemoveAt(index As Integer) Implements IList.RemoveAt
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt*
  implements:
  - System.Collections.IList.RemoveAt(System.Int32)
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.IList.RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.IList.RemoveAt(System.Int32)
  name.vb: System.Collections.IList.RemoveAt(Int32)
references:
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor
  name: SynchronizedReadOnlyCollection
  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).SynchronizedReadOnlyCollection
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).SynchronizedReadOnlyCollection
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item
  name: Item
  nameWithType: SynchronizedReadOnlyCollection<T>.Item
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Item
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).Item
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).Item
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item
  name: IList<T>.Item
  nameWithType: SynchronizedReadOnlyCollection<T>.IList<T>.Item
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Item
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.Item
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.Item
  name.vb: System.Collections.Generic.IList<T>.Item
- uid: System.Collections.Generic.IList{{T}}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList{`0}.Item(System.Int32)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item
  name: IList.Item
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Item
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Item
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Item
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Item
  name.vb: System.Collections.IList.Item
- uid: System.Collections.IList.Item(System.Int32)
  commentId: P:System.Collections.IList.Item(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: Item[Int32]
  nameWithType: IList.Item[Int32]
  fullName: System.Collections.IList.Item[System.Int32]
  nameWithType.vb: IList.Item(Int32)
  fullName.vb: System.Collections.IList.Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    nameWithType: IList.Item
    fullName: System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    nameWithType: IList.Item
    fullName: System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count
  name: Count
  nameWithType: SynchronizedReadOnlyCollection<T>.Count
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Count
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).Count
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).Count
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items
  name: Items
  nameWithType: SynchronizedReadOnlyCollection<T>.Items
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Items
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).Items
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).Items
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Count*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Count
  name: ICollection<T>.Count
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.Count
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Count
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Count
  name.vb: System.Collections.Generic.ICollection<T>.Count
- uid: System.Collections.Generic.ICollection{{T}}.Count
  commentId: P:System.Collections.Generic.ICollection{`0}.Count
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#Count*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#Count
  name: ICollection.Count
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection.Count
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.Count
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.ICollection.Count
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.ICollection.Count
  name.vb: System.Collections.ICollection.Count
- uid: System.Collections.ICollection.Count
  commentId: P:System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: true
  name: Count
  nameWithType: ICollection.Count
  fullName: System.Collections.ICollection.Count
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  name: ICollection<T>.IsReadOnly
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.ICollection{{T}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{`0}.IsReadOnly
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly
  name: IList.IsReadOnly
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.IsReadOnly
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsReadOnly
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.IList.IsReadOnly
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Collections.IList.IsReadOnly
  commentId: P:System.Collections.IList.IsReadOnly
  parent: System.Collections.IList
  isExternal: true
  name: IsReadOnly
  nameWithType: IList.IsReadOnly
  fullName: System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize
  name: IList.IsFixedSize
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.IsFixedSize
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsFixedSize
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.IList.IsFixedSize
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.IList.IsFixedSize
  commentId: P:System.Collections.IList.IsFixedSize
  parent: System.Collections.IList
  isExternal: true
  name: IsFixedSize
  nameWithType: IList.IsFixedSize
  fullName: System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized
  name: ICollection.IsSynchronized
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.ICollection.IsSynchronized
  commentId: P:System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: true
  name: IsSynchronized
  nameWithType: ICollection.IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot
  name: ICollection.SyncRoot
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection.SyncRoot
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.ICollection.SyncRoot
  commentId: P:System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: true
  name: SyncRoot
  nameWithType: ICollection.SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains
  name: Contains
  nameWithType: SynchronizedReadOnlyCollection<T>.Contains
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Contains
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).Contains
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).Contains
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo
  name: CopyTo
  nameWithType: SynchronizedReadOnlyCollection<T>.CopyTo
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.CopyTo
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).CopyTo
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).CopyTo
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator
  name: GetEnumerator
  nameWithType: SynchronizedReadOnlyCollection<T>.GetEnumerator
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.GetEnumerator
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).GetEnumerator
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).GetEnumerator
- uid: System.Collections.Generic.IEnumerator{{T}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf
  name: IndexOf
  nameWithType: SynchronizedReadOnlyCollection<T>.IndexOf
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IndexOf
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).IndexOf
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).IndexOf
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add
  name: ICollection<T>.Add
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.Add
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Add
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Add
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Add
  name.vb: System.Collections.Generic.ICollection<T>.Add
- uid: System.Collections.Generic.ICollection{{T}}.Add({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Add(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add
  name: IList.Add
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Add
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Add
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Add
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Add
  name.vb: System.Collections.IList.Add
- uid: System.Collections.IList.Add(System.Object)
  commentId: M:System.Collections.IList.Add(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Add(Object)
  nameWithType: IList.Add(Object)
  fullName: System.Collections.IList.Add(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    nameWithType: IList.Add
    fullName: System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    nameWithType: IList.Add
    fullName: System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear
  name: ICollection<T>.Clear
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.Clear
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Clear
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Clear
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Clear
  name.vb: System.Collections.Generic.ICollection<T>.Clear
- uid: System.Collections.Generic.ICollection{{T}}.Clear
  commentId: M:System.Collections.Generic.ICollection{`0}.Clear
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear
  name: IList.Clear
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Clear
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Clear
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Clear
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Clear
  name.vb: System.Collections.IList.Clear
- uid: System.Collections.IList.Clear
  commentId: M:System.Collections.IList.Clear
  parent: System.Collections.IList
  isExternal: true
  name: Clear()
  nameWithType: IList.Clear()
  fullName: System.Collections.IList.Clear()
  spec.csharp:
  - uid: System.Collections.IList.Clear
    name: Clear
    nameWithType: IList.Clear
    fullName: System.Collections.IList.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Clear
    name: Clear
    nameWithType: IList.Clear
    fullName: System.Collections.IList.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Contains*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Contains
  name: ICollection<T>.Contains
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.Contains
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Contains
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Contains
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Contains
  name.vb: System.Collections.Generic.ICollection<T>.Contains
- uid: System.Collections.Generic.ICollection{{T}}.Contains({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Contains(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains
  name: IList.Contains
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Contains
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Contains
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Contains
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Contains
  name.vb: System.Collections.IList.Contains
- uid: System.Collections.IList.Contains(System.Object)
  commentId: M:System.Collections.IList.Contains(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Contains(Object)
  nameWithType: IList.Contains(Object)
  fullName: System.Collections.IList.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    nameWithType: IList.Contains
    fullName: System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    nameWithType: IList.Contains
    fullName: System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#CopyTo*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#CopyTo
  name: ICollection<T>.CopyTo
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.CopyTo
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.CopyTo
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.CopyTo
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.CopyTo
  name.vb: System.Collections.Generic.ICollection<T>.CopyTo
- uid: System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo
  name: ICollection.CopyTo
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection.CopyTo
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.CopyTo
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.ICollection.CopyTo
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.ICollection.CopyTo
  name.vb: System.Collections.ICollection.CopyTo
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  nameWithType: ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Array
  commentId: T:System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  name: IEnumerable<T>.GetEnumerator
  nameWithType: SynchronizedReadOnlyCollection<T>.IEnumerable<T>.GetEnumerator
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: SynchronizedReadOnlyCollection<T>.IEnumerable.GetEnumerator
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#IndexOf*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#IndexOf
  name: IList<T>.IndexOf
  nameWithType: SynchronizedReadOnlyCollection<T>.IList<T>.IndexOf
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList<T>.IndexOf
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.IndexOf
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.IndexOf
  name.vb: System.Collections.Generic.IList<T>.IndexOf
- uid: System.Collections.Generic.IList{{T}}.IndexOf({T})
  commentId: M:System.Collections.Generic.IList{`0}.IndexOf(`0)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf
  name: IList.IndexOf
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.IndexOf
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.IndexOf
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.IList.IndexOf
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.IList.IndexOf
  name.vb: System.Collections.IList.IndexOf
- uid: System.Collections.IList.IndexOf(System.Object)
  commentId: M:System.Collections.IList.IndexOf(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: IndexOf(Object)
  nameWithType: IList.IndexOf(Object)
  fullName: System.Collections.IList.IndexOf(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    nameWithType: IList.IndexOf
    fullName: System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    nameWithType: IList.IndexOf
    fullName: System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert
  name: IList<T>.Insert
  nameWithType: SynchronizedReadOnlyCollection<T>.IList<T>.Insert
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Insert
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.Insert
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.Insert
  name.vb: System.Collections.Generic.IList<T>.Insert
- uid: System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})
  commentId: M:System.Collections.Generic.IList{`0}.Insert(System.Int32,`0)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert
  name: IList.Insert
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Insert
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Insert
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Insert
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Insert
  name.vb: System.Collections.IList.Insert
- uid: System.Collections.IList.Insert(System.Int32,System.Object)
  commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Insert(Int32, Object)
  nameWithType: IList.Insert(Int32, Object)
  fullName: System.Collections.IList.Insert(System.Int32, System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    nameWithType: IList.Insert
    fullName: System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    nameWithType: IList.Insert
    fullName: System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove
  name: ICollection<T>.Remove
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.Remove
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Remove
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Remove
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Remove
  name.vb: System.Collections.Generic.ICollection<T>.Remove
- uid: System.Collections.Generic.ICollection{{T}}.Remove({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Remove(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove
  name: IList.Remove
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Remove
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Remove
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Remove
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.IList.Remove
  name.vb: System.Collections.IList.Remove
- uid: System.Collections.IList.Remove(System.Object)
  commentId: M:System.Collections.IList.Remove(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Remove(Object)
  nameWithType: IList.Remove(Object)
  fullName: System.Collections.IList.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    nameWithType: IList.Remove
    fullName: System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    nameWithType: IList.Remove
    fullName: System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt
  name: IList<T>.RemoveAt
  nameWithType: SynchronizedReadOnlyCollection<T>.IList<T>.RemoveAt
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList<T>.RemoveAt
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.RemoveAt
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.RemoveAt
  name.vb: System.Collections.Generic.IList<T>.RemoveAt
- uid: System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList{`0}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt*
  commentId: Overload:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt
  name: IList.RemoveAt
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.RemoveAt
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.RemoveAt
  nameWithType.vb: SynchronizedReadOnlyCollection(Of T).System.Collections.IList.RemoveAt
  fullName.vb: System.Collections.Generic.SynchronizedReadOnlyCollection(Of T).System.Collections.IList.RemoveAt
  name.vb: System.Collections.IList.RemoveAt
- uid: System.Collections.IList.RemoveAt(System.Int32)
  commentId: M:System.Collections.IList.RemoveAt(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList.RemoveAt(Int32)
  fullName: System.Collections.IList.RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList.RemoveAt
    fullName: System.Collections.IList.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList.RemoveAt
    fullName: System.Collections.IList.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
