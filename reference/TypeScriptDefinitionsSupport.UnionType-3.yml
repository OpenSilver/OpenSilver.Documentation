### YamlMime:ManagedReference
items:
- uid: TypeScriptDefinitionsSupport.UnionType`3
  commentId: T:TypeScriptDefinitionsSupport.UnionType`3
  id: UnionType`3
  parent: TypeScriptDefinitionsSupport
  children:
  - TypeScriptDefinitionsSupport.UnionType`3.#ctor(`0)
  - TypeScriptDefinitionsSupport.UnionType`3.#ctor(`1)
  - TypeScriptDefinitionsSupport.UnionType`3.#ctor(`2)
  - TypeScriptDefinitionsSupport.UnionType`3.FromJavaScriptInstance(System.Object)
  - TypeScriptDefinitionsSupport.UnionType`3.op_Implicit(`0)~TypeScriptDefinitionsSupport.UnionType{`0,`1,`2}
  - TypeScriptDefinitionsSupport.UnionType`3.op_Implicit(`1)~TypeScriptDefinitionsSupport.UnionType{`0,`1,`2}
  - TypeScriptDefinitionsSupport.UnionType`3.op_Implicit(`2)~TypeScriptDefinitionsSupport.UnionType{`0,`1,`2}
  - TypeScriptDefinitionsSupport.UnionType`3.op_Implicit(TypeScriptDefinitionsSupport.UnionType{`0,`1,`2})~`0
  - TypeScriptDefinitionsSupport.UnionType`3.op_Implicit(TypeScriptDefinitionsSupport.UnionType{`0,`1,`2})~`1
  - TypeScriptDefinitionsSupport.UnionType`3.op_Implicit(TypeScriptDefinitionsSupport.UnionType{`0,`1,`2})~`2
  langs:
  - csharp
  - vb
  name: UnionType<T0, T1, T2>
  nameWithType: UnionType<T0, T1, T2>
  fullName: TypeScriptDefinitionsSupport.UnionType<T0, T1, T2>
  type: Class
  source:
    remote:
      path: src/Runtime/Runtime/TypeScriptDefinitionsSupportFiles/UnionType_3.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: UnionType
    path: ../OpenSilverGit/src/Runtime/Runtime/TypeScriptDefinitionsSupportFiles/UnionType_3.cs
    startLine: 20
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: 'public class UnionType<T0, T1, T2> : UnionType, IJSObject'
    typeParameters:
    - id: T0
    - id: T1
    - id: T2
    content.vb: >-
      Public Class UnionType(Of T0, T1, T2)
          Inherits UnionType
          Implements IJSObject
  inheritance:
  - System.Object
  - TypeScriptDefinitionsSupport.JSObject
  - TypeScriptDefinitionsSupport.UnionType
  implements:
  - TypeScriptDefinitionsSupport.IJSObject
  inheritedMembers:
  - TypeScriptDefinitionsSupport.UnionType._Type
  - TypeScriptDefinitionsSupport.UnionType.instanceof(System.String)
  - TypeScriptDefinitionsSupport.UnionType.CreateInstance``1
  - TypeScriptDefinitionsSupport.JSObject.Undefined
  - TypeScriptDefinitionsSupport.JSObject.Null
  - TypeScriptDefinitionsSupport.JSObject.UnderlyingJSInstance
  - TypeScriptDefinitionsSupport.JSObject.FromJavaScriptInstance``1(System.Object)
  - TypeScriptDefinitionsSupport.JSObject.CreateFrom(System.Object)
  - TypeScriptDefinitionsSupport.JSObject.Equals(System.Object)
  - TypeScriptDefinitionsSupport.JSObject.Helper_IsBuiltInType``1
  - TypeScriptDefinitionsSupport.JSObject.Helper_ConvertTo``1(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - TypeScriptDefinitionsSupport.IJSObject.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  nameWithType.vb: UnionType(Of T0, T1, T2)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: TypeScriptDefinitionsSupport.UnionType(Of T0, T1, T2)
  name.vb: UnionType(Of T0, T1, T2)
- uid: TypeScriptDefinitionsSupport.UnionType`3.FromJavaScriptInstance(System.Object)
  commentId: M:TypeScriptDefinitionsSupport.UnionType`3.FromJavaScriptInstance(System.Object)
  id: FromJavaScriptInstance(System.Object)
  parent: TypeScriptDefinitionsSupport.UnionType`3
  langs:
  - csharp
  - vb
  name: FromJavaScriptInstance(Object)
  nameWithType: UnionType<T0, T1, T2>.FromJavaScriptInstance(Object)
  fullName: TypeScriptDefinitionsSupport.UnionType<T0, T1, T2>.FromJavaScriptInstance(System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/TypeScriptDefinitionsSupportFiles/UnionType_3.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: FromJavaScriptInstance
    path: ../OpenSilverGit/src/Runtime/Runtime/TypeScriptDefinitionsSupportFiles/UnionType_3.cs
    startLine: 27
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public static UnionType<T0, T1, T2> FromJavaScriptInstance(object jsObj)
    parameters:
    - id: jsObj
      type: System.Object
    return:
      type: TypeScriptDefinitionsSupport.UnionType`3
    content.vb: Public Shared Function FromJavaScriptInstance(jsObj As Object) As UnionType(Of T0, T1, T2)
  overload: TypeScriptDefinitionsSupport.UnionType`3.FromJavaScriptInstance*
  nameWithType.vb: UnionType(Of T0, T1, T2).FromJavaScriptInstance(Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TypeScriptDefinitionsSupport.UnionType(Of T0, T1, T2).FromJavaScriptInstance(System.Object)
- uid: TypeScriptDefinitionsSupport.UnionType`3.#ctor(`0)
  commentId: M:TypeScriptDefinitionsSupport.UnionType`3.#ctor(`0)
  id: '#ctor(`0)'
  parent: TypeScriptDefinitionsSupport.UnionType`3
  langs:
  - csharp
  - vb
  name: UnionType(T0)
  nameWithType: UnionType<T0, T1, T2>.UnionType(T0)
  fullName: TypeScriptDefinitionsSupport.UnionType<T0, T1, T2>.UnionType(T0)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/TypeScriptDefinitionsSupportFiles/UnionType_3.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/TypeScriptDefinitionsSupportFiles/UnionType_3.cs
    startLine: 33
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public UnionType(T0 t)
    parameters:
    - id: t
      type: '{T0}'
    content.vb: Public Sub New(t As T0)
  overload: TypeScriptDefinitionsSupport.UnionType`3.#ctor*
  nameWithType.vb: UnionType(Of T0, T1, T2).UnionType(T0)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TypeScriptDefinitionsSupport.UnionType(Of T0, T1, T2).UnionType(T0)
- uid: TypeScriptDefinitionsSupport.UnionType`3.op_Implicit(`0)~TypeScriptDefinitionsSupport.UnionType{`0,`1,`2}
  commentId: M:TypeScriptDefinitionsSupport.UnionType`3.op_Implicit(`0)~TypeScriptDefinitionsSupport.UnionType{`0,`1,`2}
  id: op_Implicit(`0)~TypeScriptDefinitionsSupport.UnionType{`0,`1,`2}
  parent: TypeScriptDefinitionsSupport.UnionType`3
  langs:
  - csharp
  - vb
  name: Implicit(T0 to UnionType<T0, T1, T2>)
  nameWithType: UnionType<T0, T1, T2>.Implicit(T0 to UnionType<T0, T1, T2>)
  fullName: TypeScriptDefinitionsSupport.UnionType<T0, T1, T2>.Implicit(T0 to TypeScriptDefinitionsSupport.UnionType<T0, T1, T2>)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/TypeScriptDefinitionsSupportFiles/UnionType_3.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Implicit
    path: ../OpenSilverGit/src/Runtime/Runtime/TypeScriptDefinitionsSupportFiles/UnionType_3.cs
    startLine: 41
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public static implicit operator UnionType<T0, T1, T2>(T0 t)
    parameters:
    - id: t
      type: '{T0}'
    return:
      type: TypeScriptDefinitionsSupport.UnionType`3
    content.vb: Public Shared Widening Operator CType(t As T0) As UnionType(Of T0, T1, T2)
  overload: TypeScriptDefinitionsSupport.UnionType`3.op_Implicit*
  nameWithType.vb: UnionType(Of T0, T1, T2).Widening(T0 to UnionType(Of T0, T1, T2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TypeScriptDefinitionsSupport.UnionType(Of T0, T1, T2).Widening(T0 to TypeScriptDefinitionsSupport.UnionType(Of T0, T1, T2))
  name.vb: Widening(T0 to UnionType(Of T0, T1, T2))
- uid: TypeScriptDefinitionsSupport.UnionType`3.op_Implicit(TypeScriptDefinitionsSupport.UnionType{`0,`1,`2})~`0
  commentId: M:TypeScriptDefinitionsSupport.UnionType`3.op_Implicit(TypeScriptDefinitionsSupport.UnionType{`0,`1,`2})~`0
  id: op_Implicit(TypeScriptDefinitionsSupport.UnionType{`0,`1,`2})~`0
  parent: TypeScriptDefinitionsSupport.UnionType`3
  langs:
  - csharp
  - vb
  name: Implicit(UnionType<T0, T1, T2> to T0)
  nameWithType: UnionType<T0, T1, T2>.Implicit(UnionType<T0, T1, T2> to T0)
  fullName: TypeScriptDefinitionsSupport.UnionType<T0, T1, T2>.Implicit(TypeScriptDefinitionsSupport.UnionType<T0, T1, T2> to T0)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/TypeScriptDefinitionsSupportFiles/UnionType_3.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Implicit
    path: ../OpenSilverGit/src/Runtime/Runtime/TypeScriptDefinitionsSupportFiles/UnionType_3.cs
    startLine: 46
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public static implicit operator T0(UnionType<T0, T1, T2> value)
    parameters:
    - id: value
      type: TypeScriptDefinitionsSupport.UnionType`3
    return:
      type: '{T0}'
    content.vb: Public Shared Widening Operator CType(value As UnionType(Of T0, T1, T2)) As T0
  overload: TypeScriptDefinitionsSupport.UnionType`3.op_Implicit*
  nameWithType.vb: UnionType(Of T0, T1, T2).Widening(UnionType(Of T0, T1, T2) to T0)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TypeScriptDefinitionsSupport.UnionType(Of T0, T1, T2).Widening(TypeScriptDefinitionsSupport.UnionType(Of T0, T1, T2) to T0)
  name.vb: Widening(UnionType(Of T0, T1, T2) to T0)
- uid: TypeScriptDefinitionsSupport.UnionType`3.#ctor(`1)
  commentId: M:TypeScriptDefinitionsSupport.UnionType`3.#ctor(`1)
  id: '#ctor(`1)'
  parent: TypeScriptDefinitionsSupport.UnionType`3
  langs:
  - csharp
  - vb
  name: UnionType(T1)
  nameWithType: UnionType<T0, T1, T2>.UnionType(T1)
  fullName: TypeScriptDefinitionsSupport.UnionType<T0, T1, T2>.UnionType(T1)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/TypeScriptDefinitionsSupportFiles/UnionType_3.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/TypeScriptDefinitionsSupportFiles/UnionType_3.cs
    startLine: 61
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public UnionType(T1 t)
    parameters:
    - id: t
      type: '{T1}'
    content.vb: Public Sub New(t As T1)
  overload: TypeScriptDefinitionsSupport.UnionType`3.#ctor*
  nameWithType.vb: UnionType(Of T0, T1, T2).UnionType(T1)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TypeScriptDefinitionsSupport.UnionType(Of T0, T1, T2).UnionType(T1)
- uid: TypeScriptDefinitionsSupport.UnionType`3.op_Implicit(`1)~TypeScriptDefinitionsSupport.UnionType{`0,`1,`2}
  commentId: M:TypeScriptDefinitionsSupport.UnionType`3.op_Implicit(`1)~TypeScriptDefinitionsSupport.UnionType{`0,`1,`2}
  id: op_Implicit(`1)~TypeScriptDefinitionsSupport.UnionType{`0,`1,`2}
  parent: TypeScriptDefinitionsSupport.UnionType`3
  langs:
  - csharp
  - vb
  name: Implicit(T1 to UnionType<T0, T1, T2>)
  nameWithType: UnionType<T0, T1, T2>.Implicit(T1 to UnionType<T0, T1, T2>)
  fullName: TypeScriptDefinitionsSupport.UnionType<T0, T1, T2>.Implicit(T1 to TypeScriptDefinitionsSupport.UnionType<T0, T1, T2>)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/TypeScriptDefinitionsSupportFiles/UnionType_3.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Implicit
    path: ../OpenSilverGit/src/Runtime/Runtime/TypeScriptDefinitionsSupportFiles/UnionType_3.cs
    startLine: 69
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public static implicit operator UnionType<T0, T1, T2>(T1 t)
    parameters:
    - id: t
      type: '{T1}'
    return:
      type: TypeScriptDefinitionsSupport.UnionType`3
    content.vb: Public Shared Widening Operator CType(t As T1) As UnionType(Of T0, T1, T2)
  overload: TypeScriptDefinitionsSupport.UnionType`3.op_Implicit*
  nameWithType.vb: UnionType(Of T0, T1, T2).Widening(T1 to UnionType(Of T0, T1, T2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TypeScriptDefinitionsSupport.UnionType(Of T0, T1, T2).Widening(T1 to TypeScriptDefinitionsSupport.UnionType(Of T0, T1, T2))
  name.vb: Widening(T1 to UnionType(Of T0, T1, T2))
- uid: TypeScriptDefinitionsSupport.UnionType`3.op_Implicit(TypeScriptDefinitionsSupport.UnionType{`0,`1,`2})~`1
  commentId: M:TypeScriptDefinitionsSupport.UnionType`3.op_Implicit(TypeScriptDefinitionsSupport.UnionType{`0,`1,`2})~`1
  id: op_Implicit(TypeScriptDefinitionsSupport.UnionType{`0,`1,`2})~`1
  parent: TypeScriptDefinitionsSupport.UnionType`3
  langs:
  - csharp
  - vb
  name: Implicit(UnionType<T0, T1, T2> to T1)
  nameWithType: UnionType<T0, T1, T2>.Implicit(UnionType<T0, T1, T2> to T1)
  fullName: TypeScriptDefinitionsSupport.UnionType<T0, T1, T2>.Implicit(TypeScriptDefinitionsSupport.UnionType<T0, T1, T2> to T1)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/TypeScriptDefinitionsSupportFiles/UnionType_3.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Implicit
    path: ../OpenSilverGit/src/Runtime/Runtime/TypeScriptDefinitionsSupportFiles/UnionType_3.cs
    startLine: 74
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public static implicit operator T1(UnionType<T0, T1, T2> value)
    parameters:
    - id: value
      type: TypeScriptDefinitionsSupport.UnionType`3
    return:
      type: '{T1}'
    content.vb: Public Shared Widening Operator CType(value As UnionType(Of T0, T1, T2)) As T1
  overload: TypeScriptDefinitionsSupport.UnionType`3.op_Implicit*
  nameWithType.vb: UnionType(Of T0, T1, T2).Widening(UnionType(Of T0, T1, T2) to T1)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TypeScriptDefinitionsSupport.UnionType(Of T0, T1, T2).Widening(TypeScriptDefinitionsSupport.UnionType(Of T0, T1, T2) to T1)
  name.vb: Widening(UnionType(Of T0, T1, T2) to T1)
- uid: TypeScriptDefinitionsSupport.UnionType`3.#ctor(`2)
  commentId: M:TypeScriptDefinitionsSupport.UnionType`3.#ctor(`2)
  id: '#ctor(`2)'
  parent: TypeScriptDefinitionsSupport.UnionType`3
  langs:
  - csharp
  - vb
  name: UnionType(T2)
  nameWithType: UnionType<T0, T1, T2>.UnionType(T2)
  fullName: TypeScriptDefinitionsSupport.UnionType<T0, T1, T2>.UnionType(T2)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/TypeScriptDefinitionsSupportFiles/UnionType_3.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/TypeScriptDefinitionsSupportFiles/UnionType_3.cs
    startLine: 89
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public UnionType(T2 t)
    parameters:
    - id: t
      type: '{T2}'
    content.vb: Public Sub New(t As T2)
  overload: TypeScriptDefinitionsSupport.UnionType`3.#ctor*
  nameWithType.vb: UnionType(Of T0, T1, T2).UnionType(T2)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TypeScriptDefinitionsSupport.UnionType(Of T0, T1, T2).UnionType(T2)
- uid: TypeScriptDefinitionsSupport.UnionType`3.op_Implicit(`2)~TypeScriptDefinitionsSupport.UnionType{`0,`1,`2}
  commentId: M:TypeScriptDefinitionsSupport.UnionType`3.op_Implicit(`2)~TypeScriptDefinitionsSupport.UnionType{`0,`1,`2}
  id: op_Implicit(`2)~TypeScriptDefinitionsSupport.UnionType{`0,`1,`2}
  parent: TypeScriptDefinitionsSupport.UnionType`3
  langs:
  - csharp
  - vb
  name: Implicit(T2 to UnionType<T0, T1, T2>)
  nameWithType: UnionType<T0, T1, T2>.Implicit(T2 to UnionType<T0, T1, T2>)
  fullName: TypeScriptDefinitionsSupport.UnionType<T0, T1, T2>.Implicit(T2 to TypeScriptDefinitionsSupport.UnionType<T0, T1, T2>)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/TypeScriptDefinitionsSupportFiles/UnionType_3.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Implicit
    path: ../OpenSilverGit/src/Runtime/Runtime/TypeScriptDefinitionsSupportFiles/UnionType_3.cs
    startLine: 97
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public static implicit operator UnionType<T0, T1, T2>(T2 t)
    parameters:
    - id: t
      type: '{T2}'
    return:
      type: TypeScriptDefinitionsSupport.UnionType`3
    content.vb: Public Shared Widening Operator CType(t As T2) As UnionType(Of T0, T1, T2)
  overload: TypeScriptDefinitionsSupport.UnionType`3.op_Implicit*
  nameWithType.vb: UnionType(Of T0, T1, T2).Widening(T2 to UnionType(Of T0, T1, T2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TypeScriptDefinitionsSupport.UnionType(Of T0, T1, T2).Widening(T2 to TypeScriptDefinitionsSupport.UnionType(Of T0, T1, T2))
  name.vb: Widening(T2 to UnionType(Of T0, T1, T2))
- uid: TypeScriptDefinitionsSupport.UnionType`3.op_Implicit(TypeScriptDefinitionsSupport.UnionType{`0,`1,`2})~`2
  commentId: M:TypeScriptDefinitionsSupport.UnionType`3.op_Implicit(TypeScriptDefinitionsSupport.UnionType{`0,`1,`2})~`2
  id: op_Implicit(TypeScriptDefinitionsSupport.UnionType{`0,`1,`2})~`2
  parent: TypeScriptDefinitionsSupport.UnionType`3
  langs:
  - csharp
  - vb
  name: Implicit(UnionType<T0, T1, T2> to T2)
  nameWithType: UnionType<T0, T1, T2>.Implicit(UnionType<T0, T1, T2> to T2)
  fullName: TypeScriptDefinitionsSupport.UnionType<T0, T1, T2>.Implicit(TypeScriptDefinitionsSupport.UnionType<T0, T1, T2> to T2)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/TypeScriptDefinitionsSupportFiles/UnionType_3.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Implicit
    path: ../OpenSilverGit/src/Runtime/Runtime/TypeScriptDefinitionsSupportFiles/UnionType_3.cs
    startLine: 102
  assemblies:
  - OpenSilver
  namespace: TypeScriptDefinitionsSupport
  syntax:
    content: public static implicit operator T2(UnionType<T0, T1, T2> value)
    parameters:
    - id: value
      type: TypeScriptDefinitionsSupport.UnionType`3
    return:
      type: '{T2}'
    content.vb: Public Shared Widening Operator CType(value As UnionType(Of T0, T1, T2)) As T2
  overload: TypeScriptDefinitionsSupport.UnionType`3.op_Implicit*
  nameWithType.vb: UnionType(Of T0, T1, T2).Widening(UnionType(Of T0, T1, T2) to T2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TypeScriptDefinitionsSupport.UnionType(Of T0, T1, T2).Widening(TypeScriptDefinitionsSupport.UnionType(Of T0, T1, T2) to T2)
  name.vb: Widening(UnionType(Of T0, T1, T2) to T2)
references:
- uid: TypeScriptDefinitionsSupport
  commentId: N:TypeScriptDefinitionsSupport
  name: TypeScriptDefinitionsSupport
  nameWithType: TypeScriptDefinitionsSupport
  fullName: TypeScriptDefinitionsSupport
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TypeScriptDefinitionsSupport.JSObject
  commentId: T:TypeScriptDefinitionsSupport.JSObject
  parent: TypeScriptDefinitionsSupport
  name: JSObject
  nameWithType: JSObject
  fullName: TypeScriptDefinitionsSupport.JSObject
- uid: TypeScriptDefinitionsSupport.UnionType
  commentId: T:TypeScriptDefinitionsSupport.UnionType
  parent: TypeScriptDefinitionsSupport
  name: UnionType
  nameWithType: UnionType
  fullName: TypeScriptDefinitionsSupport.UnionType
- uid: TypeScriptDefinitionsSupport.IJSObject
  commentId: T:TypeScriptDefinitionsSupport.IJSObject
  parent: TypeScriptDefinitionsSupport
  name: IJSObject
  nameWithType: IJSObject
  fullName: TypeScriptDefinitionsSupport.IJSObject
- uid: TypeScriptDefinitionsSupport.UnionType._Type
  commentId: P:TypeScriptDefinitionsSupport.UnionType._Type
  parent: TypeScriptDefinitionsSupport.UnionType
  name: _Type
  nameWithType: UnionType._Type
  fullName: TypeScriptDefinitionsSupport.UnionType._Type
- uid: TypeScriptDefinitionsSupport.UnionType.instanceof(System.String)
  commentId: M:TypeScriptDefinitionsSupport.UnionType.instanceof(System.String)
  parent: TypeScriptDefinitionsSupport.UnionType
  isExternal: true
  name: instanceof(String)
  nameWithType: UnionType.instanceof(String)
  fullName: TypeScriptDefinitionsSupport.UnionType.instanceof(System.String)
  spec.csharp:
  - uid: TypeScriptDefinitionsSupport.UnionType.instanceof(System.String)
    name: instanceof
    nameWithType: UnionType.instanceof
    fullName: TypeScriptDefinitionsSupport.UnionType.instanceof
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefinitionsSupport.UnionType.instanceof(System.String)
    name: instanceof
    nameWithType: UnionType.instanceof
    fullName: TypeScriptDefinitionsSupport.UnionType.instanceof
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefinitionsSupport.UnionType.CreateInstance``1
  commentId: M:TypeScriptDefinitionsSupport.UnionType.CreateInstance``1
  parent: TypeScriptDefinitionsSupport.UnionType
  name: CreateInstance<T>()
  nameWithType: UnionType.CreateInstance<T>()
  fullName: TypeScriptDefinitionsSupport.UnionType.CreateInstance<T>()
  nameWithType.vb: UnionType.CreateInstance(Of T)()
  fullName.vb: TypeScriptDefinitionsSupport.UnionType.CreateInstance(Of T)()
  name.vb: CreateInstance(Of T)()
  spec.csharp:
  - uid: TypeScriptDefinitionsSupport.UnionType.CreateInstance``1
    name: CreateInstance<T>
    nameWithType: UnionType.CreateInstance<T>
    fullName: TypeScriptDefinitionsSupport.UnionType.CreateInstance<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefinitionsSupport.UnionType.CreateInstance``1
    name: CreateInstance(Of T)
    nameWithType: UnionType.CreateInstance(Of T)
    fullName: TypeScriptDefinitionsSupport.UnionType.CreateInstance(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefinitionsSupport.JSObject.Undefined
  commentId: F:TypeScriptDefinitionsSupport.JSObject.Undefined
  parent: TypeScriptDefinitionsSupport.JSObject
  name: Undefined
  nameWithType: JSObject.Undefined
  fullName: TypeScriptDefinitionsSupport.JSObject.Undefined
- uid: TypeScriptDefinitionsSupport.JSObject.Null
  commentId: F:TypeScriptDefinitionsSupport.JSObject.Null
  parent: TypeScriptDefinitionsSupport.JSObject
  name: "Null"
  nameWithType: JSObject.Null
  fullName: TypeScriptDefinitionsSupport.JSObject.Null
- uid: TypeScriptDefinitionsSupport.JSObject.UnderlyingJSInstance
  commentId: P:TypeScriptDefinitionsSupport.JSObject.UnderlyingJSInstance
  parent: TypeScriptDefinitionsSupport.JSObject
  name: UnderlyingJSInstance
  nameWithType: JSObject.UnderlyingJSInstance
  fullName: TypeScriptDefinitionsSupport.JSObject.UnderlyingJSInstance
- uid: TypeScriptDefinitionsSupport.JSObject.FromJavaScriptInstance``1(System.Object)
  commentId: M:TypeScriptDefinitionsSupport.JSObject.FromJavaScriptInstance``1(System.Object)
  parent: TypeScriptDefinitionsSupport.JSObject
  isExternal: true
  name: FromJavaScriptInstance<T>(Object)
  nameWithType: JSObject.FromJavaScriptInstance<T>(Object)
  fullName: TypeScriptDefinitionsSupport.JSObject.FromJavaScriptInstance<T>(System.Object)
  nameWithType.vb: JSObject.FromJavaScriptInstance(Of T)(Object)
  fullName.vb: TypeScriptDefinitionsSupport.JSObject.FromJavaScriptInstance(Of T)(System.Object)
  name.vb: FromJavaScriptInstance(Of T)(Object)
  spec.csharp:
  - uid: TypeScriptDefinitionsSupport.JSObject.FromJavaScriptInstance``1(System.Object)
    name: FromJavaScriptInstance<T>
    nameWithType: JSObject.FromJavaScriptInstance<T>
    fullName: TypeScriptDefinitionsSupport.JSObject.FromJavaScriptInstance<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefinitionsSupport.JSObject.FromJavaScriptInstance``1(System.Object)
    name: FromJavaScriptInstance(Of T)
    nameWithType: JSObject.FromJavaScriptInstance(Of T)
    fullName: TypeScriptDefinitionsSupport.JSObject.FromJavaScriptInstance(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefinitionsSupport.JSObject.CreateFrom(System.Object)
  commentId: M:TypeScriptDefinitionsSupport.JSObject.CreateFrom(System.Object)
  parent: TypeScriptDefinitionsSupport.JSObject
  isExternal: true
  name: CreateFrom(Object)
  nameWithType: JSObject.CreateFrom(Object)
  fullName: TypeScriptDefinitionsSupport.JSObject.CreateFrom(System.Object)
  spec.csharp:
  - uid: TypeScriptDefinitionsSupport.JSObject.CreateFrom(System.Object)
    name: CreateFrom
    nameWithType: JSObject.CreateFrom
    fullName: TypeScriptDefinitionsSupport.JSObject.CreateFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefinitionsSupport.JSObject.CreateFrom(System.Object)
    name: CreateFrom
    nameWithType: JSObject.CreateFrom
    fullName: TypeScriptDefinitionsSupport.JSObject.CreateFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefinitionsSupport.JSObject.Equals(System.Object)
  commentId: M:TypeScriptDefinitionsSupport.JSObject.Equals(System.Object)
  parent: TypeScriptDefinitionsSupport.JSObject
  isExternal: true
  name: Equals(Object)
  nameWithType: JSObject.Equals(Object)
  fullName: TypeScriptDefinitionsSupport.JSObject.Equals(System.Object)
  spec.csharp:
  - uid: TypeScriptDefinitionsSupport.JSObject.Equals(System.Object)
    name: Equals
    nameWithType: JSObject.Equals
    fullName: TypeScriptDefinitionsSupport.JSObject.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefinitionsSupport.JSObject.Equals(System.Object)
    name: Equals
    nameWithType: JSObject.Equals
    fullName: TypeScriptDefinitionsSupport.JSObject.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefinitionsSupport.JSObject.Helper_IsBuiltInType``1
  commentId: M:TypeScriptDefinitionsSupport.JSObject.Helper_IsBuiltInType``1
  parent: TypeScriptDefinitionsSupport.JSObject
  name: Helper_IsBuiltInType<T>()
  nameWithType: JSObject.Helper_IsBuiltInType<T>()
  fullName: TypeScriptDefinitionsSupport.JSObject.Helper_IsBuiltInType<T>()
  nameWithType.vb: JSObject.Helper_IsBuiltInType(Of T)()
  fullName.vb: TypeScriptDefinitionsSupport.JSObject.Helper_IsBuiltInType(Of T)()
  name.vb: Helper_IsBuiltInType(Of T)()
  spec.csharp:
  - uid: TypeScriptDefinitionsSupport.JSObject.Helper_IsBuiltInType``1
    name: Helper_IsBuiltInType<T>
    nameWithType: JSObject.Helper_IsBuiltInType<T>
    fullName: TypeScriptDefinitionsSupport.JSObject.Helper_IsBuiltInType<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefinitionsSupport.JSObject.Helper_IsBuiltInType``1
    name: Helper_IsBuiltInType(Of T)
    nameWithType: JSObject.Helper_IsBuiltInType(Of T)
    fullName: TypeScriptDefinitionsSupport.JSObject.Helper_IsBuiltInType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefinitionsSupport.JSObject.Helper_ConvertTo``1(System.Object)
  commentId: M:TypeScriptDefinitionsSupport.JSObject.Helper_ConvertTo``1(System.Object)
  parent: TypeScriptDefinitionsSupport.JSObject
  isExternal: true
  name: Helper_ConvertTo<T>(Object)
  nameWithType: JSObject.Helper_ConvertTo<T>(Object)
  fullName: TypeScriptDefinitionsSupport.JSObject.Helper_ConvertTo<T>(System.Object)
  nameWithType.vb: JSObject.Helper_ConvertTo(Of T)(Object)
  fullName.vb: TypeScriptDefinitionsSupport.JSObject.Helper_ConvertTo(Of T)(System.Object)
  name.vb: Helper_ConvertTo(Of T)(Object)
  spec.csharp:
  - uid: TypeScriptDefinitionsSupport.JSObject.Helper_ConvertTo``1(System.Object)
    name: Helper_ConvertTo<T>
    nameWithType: JSObject.Helper_ConvertTo<T>
    fullName: TypeScriptDefinitionsSupport.JSObject.Helper_ConvertTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TypeScriptDefinitionsSupport.JSObject.Helper_ConvertTo``1(System.Object)
    name: Helper_ConvertTo(Of T)
    nameWithType: JSObject.Helper_ConvertTo(Of T)
    fullName: TypeScriptDefinitionsSupport.JSObject.Helper_ConvertTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefinitionsSupport.IJSObject.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(TypeScriptDefinitionsSupport.IJSObject)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(TypeScriptDefinitionsSupport.IJSObject)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(TypeScriptDefinitionsSupport.IJSObject)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(TypeScriptDefinitionsSupport.IJSObject)
  name: ToJavaScriptObject(IJSObject)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(IJSObject)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(TypeScriptDefinitionsSupport.IJSObject)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(TypeScriptDefinitionsSupport.IJSObject)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: TypeScriptDefinitionsSupport.IJSObject
    name: IJSObject
    nameWithType: IJSObject
    fullName: TypeScriptDefinitionsSupport.IJSObject
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(TypeScriptDefinitionsSupport.IJSObject)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: TypeScriptDefinitionsSupport.IJSObject
    name: IJSObject
    nameWithType: IJSObject
    fullName: TypeScriptDefinitionsSupport.IJSObject
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: TypeScriptDefinitionsSupport.UnionType`3.FromJavaScriptInstance*
  commentId: Overload:TypeScriptDefinitionsSupport.UnionType`3.FromJavaScriptInstance
  name: FromJavaScriptInstance
  nameWithType: UnionType<T0, T1, T2>.FromJavaScriptInstance
  fullName: TypeScriptDefinitionsSupport.UnionType<T0, T1, T2>.FromJavaScriptInstance
  nameWithType.vb: UnionType(Of T0, T1, T2).FromJavaScriptInstance
  fullName.vb: TypeScriptDefinitionsSupport.UnionType(Of T0, T1, T2).FromJavaScriptInstance
- uid: TypeScriptDefinitionsSupport.UnionType`3
  commentId: T:TypeScriptDefinitionsSupport.UnionType`3
  parent: TypeScriptDefinitionsSupport
  name: UnionType<T0, T1, T2>
  nameWithType: UnionType<T0, T1, T2>
  fullName: TypeScriptDefinitionsSupport.UnionType<T0, T1, T2>
  nameWithType.vb: UnionType(Of T0, T1, T2)
  fullName.vb: TypeScriptDefinitionsSupport.UnionType(Of T0, T1, T2)
  name.vb: UnionType(Of T0, T1, T2)
  spec.csharp:
  - uid: TypeScriptDefinitionsSupport.UnionType`3
    name: UnionType
    nameWithType: UnionType
    fullName: TypeScriptDefinitionsSupport.UnionType
  - name: <
    nameWithType: <
    fullName: <
  - name: T0
    nameWithType: T0
    fullName: T0
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TypeScriptDefinitionsSupport.UnionType`3
    name: UnionType
    nameWithType: UnionType
    fullName: TypeScriptDefinitionsSupport.UnionType
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T0
    nameWithType: T0
    fullName: T0
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: TypeScriptDefinitionsSupport.UnionType`3.#ctor*
  commentId: Overload:TypeScriptDefinitionsSupport.UnionType`3.#ctor
  name: UnionType
  nameWithType: UnionType<T0, T1, T2>.UnionType
  fullName: TypeScriptDefinitionsSupport.UnionType<T0, T1, T2>.UnionType
  nameWithType.vb: UnionType(Of T0, T1, T2).UnionType
  fullName.vb: TypeScriptDefinitionsSupport.UnionType(Of T0, T1, T2).UnionType
- uid: '{T0}'
  commentId: '!:T0'
  definition: T0
  name: T0
  nameWithType: T0
  fullName: T0
- uid: T0
  name: T0
  nameWithType: T0
  fullName: T0
- uid: TypeScriptDefinitionsSupport.UnionType`3.op_Implicit*
  commentId: Overload:TypeScriptDefinitionsSupport.UnionType`3.op_Implicit
  name: Implicit
  nameWithType: UnionType<T0, T1, T2>.Implicit
  fullName: TypeScriptDefinitionsSupport.UnionType<T0, T1, T2>.Implicit
  nameWithType.vb: UnionType(Of T0, T1, T2).Widening
  fullName.vb: TypeScriptDefinitionsSupport.UnionType(Of T0, T1, T2).Widening
  name.vb: Widening
- uid: '{T1}'
  commentId: '!:T1'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: '{T2}'
  commentId: '!:T2'
  definition: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: T2
  name: T2
  nameWithType: T2
  fullName: T2
