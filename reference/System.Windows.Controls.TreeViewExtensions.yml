### YamlMime:ManagedReference
items:
- uid: System.Windows.Controls.TreeViewExtensions
  commentId: T:System.Windows.Controls.TreeViewExtensions
  id: TreeViewExtensions
  parent: System.Windows.Controls
  children:
  - System.Windows.Controls.TreeViewExtensions.ClearSelection(System.Windows.Controls.TreeView)
  - System.Windows.Controls.TreeViewExtensions.CollapseAll(System.Windows.Controls.TreeView)
  - System.Windows.Controls.TreeViewExtensions.CollapseAllButSelectedPath(System.Windows.Controls.TreeView)
  - System.Windows.Controls.TreeViewExtensions.ExpandAll(System.Windows.Controls.TreeView)
  - System.Windows.Controls.TreeViewExtensions.ExpandPath(System.Windows.Controls.TreeView,System.Object[])
  - System.Windows.Controls.TreeViewExtensions.ExpandPath(System.Windows.Controls.TreeViewItem)
  - System.Windows.Controls.TreeViewExtensions.ExpandPath``1(System.Windows.Controls.TreeView,System.Collections.Generic.IEnumerable{``0})
  - System.Windows.Controls.TreeViewExtensions.ExpandPath``1(System.Windows.Controls.TreeView,System.Func{System.Object,``0},``0[])
  - System.Windows.Controls.TreeViewExtensions.ExpandPath``1(System.Windows.Controls.TreeView,System.Func{System.Object,``0},System.Collections.Generic.IEnumerable{``0})
  - System.Windows.Controls.TreeViewExtensions.ExpandSelectedPath(System.Windows.Controls.TreeView)
  - System.Windows.Controls.TreeViewExtensions.ExpandToDepth(System.Windows.Controls.TreeView,System.Int32)
  - System.Windows.Controls.TreeViewExtensions.GetCheckedItemsAndContainers(System.Windows.Controls.TreeView)
  - System.Windows.Controls.TreeViewExtensions.GetCheckedItemsAndContainers(System.Windows.Controls.TreeView,System.Boolean)
  - System.Windows.Controls.TreeViewExtensions.GetContainerFromItem(System.Windows.Controls.TreeView,System.Object)
  - System.Windows.Controls.TreeViewExtensions.GetContainers(System.Windows.Controls.TreeView)
  - System.Windows.Controls.TreeViewExtensions.GetContainers(System.Windows.Controls.TreeViewItem)
  - System.Windows.Controls.TreeViewExtensions.GetContainersFromItem(System.Windows.Controls.TreeView,System.Object)
  - System.Windows.Controls.TreeViewExtensions.GetDepth(System.Windows.Controls.TreeViewItem)
  - System.Windows.Controls.TreeViewExtensions.GetDescendantContainers(System.Windows.Controls.TreeView)
  - System.Windows.Controls.TreeViewExtensions.GetDescendantContainers(System.Windows.Controls.TreeViewItem)
  - System.Windows.Controls.TreeViewExtensions.GetDescendantItemsAndContainers(System.Windows.Controls.TreeView)
  - System.Windows.Controls.TreeViewExtensions.GetDescendantItemsAndContainers(System.Windows.Controls.TreeViewItem)
  - System.Windows.Controls.TreeViewExtensions.GetIsChecked(System.Windows.Controls.TreeViewItem)
  - System.Windows.Controls.TreeViewExtensions.GetIsLeaf(System.Windows.Controls.TreeViewItem)
  - System.Windows.Controls.TreeViewExtensions.GetIsRoot(System.Windows.Controls.TreeViewItem)
  - System.Windows.Controls.TreeViewExtensions.GetItem(System.Windows.Controls.TreeViewItem)
  - System.Windows.Controls.TreeViewExtensions.GetItemsAndContainers(System.Windows.Controls.TreeView)
  - System.Windows.Controls.TreeViewExtensions.GetItemsAndContainers(System.Windows.Controls.TreeViewItem)
  - System.Windows.Controls.TreeViewExtensions.GetParentItem(System.Windows.Controls.TreeView,System.Object)
  - System.Windows.Controls.TreeViewExtensions.GetParentTreeView(System.Windows.Controls.TreeViewItem)
  - System.Windows.Controls.TreeViewExtensions.GetParentTreeViewItem(System.Windows.Controls.TreeViewItem)
  - System.Windows.Controls.TreeViewExtensions.GetPath(System.Windows.Controls.TreeViewItem)
  - System.Windows.Controls.TreeViewExtensions.GetSelectedContainer(System.Windows.Controls.TreeView)
  - System.Windows.Controls.TreeViewExtensions.GetSelectedPath(System.Windows.Controls.TreeView)
  - System.Windows.Controls.TreeViewExtensions.GetSiblingItemsAndContainers(System.Windows.Controls.TreeViewItem)
  - System.Windows.Controls.TreeViewExtensions.IsCheckedProperty
  - System.Windows.Controls.TreeViewExtensions.SelectItem(System.Windows.Controls.TreeView,System.Object)
  - System.Windows.Controls.TreeViewExtensions.SetIsChecked(System.Windows.Controls.TreeViewItem,System.Nullable{System.Boolean})
  - System.Windows.Controls.TreeViewExtensions.SetSelectedContainer(System.Windows.Controls.TreeView,System.Windows.Controls.TreeViewItem)
  langs:
  - csharp
  - vb
  name: TreeViewExtensions
  nameWithType: TreeViewExtensions
  fullName: System.Windows.Controls.TreeViewExtensions
  type: Class
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: TreeViewExtensions
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 29
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nProvides useful extensions to TreeView and TreeViewItem instances.\n"
  example: []
  syntax:
    content: public static class TreeViewExtensions
    content.vb: Public Module TreeViewExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: System.Windows.Controls.TreeViewExtensions.GetParentTreeViewItem(System.Windows.Controls.TreeViewItem)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetParentTreeViewItem(System.Windows.Controls.TreeViewItem)
  id: GetParentTreeViewItem(System.Windows.Controls.TreeViewItem)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetParentTreeViewItem(TreeViewItem)
  nameWithType: TreeViewExtensions.GetParentTreeViewItem(TreeViewItem)
  fullName: System.Windows.Controls.TreeViewExtensions.GetParentTreeViewItem(System.Windows.Controls.TreeViewItem)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetParentTreeViewItem
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 85
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGet the parent TreeViewItem of a TreeViewItem.\n"
  example: []
  syntax:
    content: public static TreeViewItem GetParentTreeViewItem(this TreeViewItem item)
    parameters:
    - id: item
      type: System.Windows.Controls.TreeViewItem
      description: The TreeViewItem.
    return:
      type: System.Windows.Controls.TreeViewItem
      description: "\nThe parent TreeViewItem if found, otherwise null.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetParentTreeViewItem(item As TreeViewItem) As TreeViewItem
  overload: System.Windows.Controls.TreeViewExtensions.GetParentTreeViewItem*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.GetParentTreeView(System.Windows.Controls.TreeViewItem)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetParentTreeView(System.Windows.Controls.TreeViewItem)
  id: GetParentTreeView(System.Windows.Controls.TreeViewItem)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetParentTreeView(TreeViewItem)
  nameWithType: TreeViewExtensions.GetParentTreeView(TreeViewItem)
  fullName: System.Windows.Controls.TreeViewExtensions.GetParentTreeView(System.Windows.Controls.TreeViewItem)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetParentTreeView
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 108
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGet the parent TreeView of a TreeViewItem.\n"
  example: []
  syntax:
    content: public static TreeView GetParentTreeView(this TreeViewItem item)
    parameters:
    - id: item
      type: System.Windows.Controls.TreeViewItem
      description: The TreeViewItem.
    return:
      type: System.Windows.Controls.TreeView
      description: The parent TreeView if found, otherwise null.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetParentTreeView(item As TreeViewItem) As TreeView
  overload: System.Windows.Controls.TreeViewExtensions.GetParentTreeView*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.GetContainers(System.Windows.Controls.TreeView)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetContainers(System.Windows.Controls.TreeView)
  id: GetContainers(System.Windows.Controls.TreeView)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetContainers(TreeView)
  nameWithType: TreeViewExtensions.GetContainers(TreeView)
  fullName: System.Windows.Controls.TreeViewExtensions.GetContainers(System.Windows.Controls.TreeView)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetContainers
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 132
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGet the TreeViewItem containers of a TreeView.\n"
  example: []
  syntax:
    content: public static IEnumerable<TreeViewItem> GetContainers(this TreeView view)
    parameters:
    - id: view
      type: System.Windows.Controls.TreeView
      description: The TreeView.
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Controls.TreeViewItem}
      description: The TreeViewItem containers of a TreeView.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetContainers(view As TreeView) As IEnumerable(Of TreeViewItem)
  overload: System.Windows.Controls.TreeViewExtensions.GetContainers*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">view</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.GetContainers(System.Windows.Controls.TreeViewItem)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetContainers(System.Windows.Controls.TreeViewItem)
  id: GetContainers(System.Windows.Controls.TreeViewItem)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetContainers(TreeViewItem)
  nameWithType: TreeViewExtensions.GetContainers(TreeViewItem)
  fullName: System.Windows.Controls.TreeViewExtensions.GetContainers(System.Windows.Controls.TreeViewItem)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetContainers
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 153
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGet the child TreeViewItem containers of a TreeViewItem.\n"
  example: []
  syntax:
    content: public static IEnumerable<TreeViewItem> GetContainers(this TreeViewItem item)
    parameters:
    - id: item
      type: System.Windows.Controls.TreeViewItem
      description: The TreeViewItem.
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Controls.TreeViewItem}
      description: "\nThe child TreeViewItem containers of a TreeViewItem.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetContainers(item As TreeViewItem) As IEnumerable(Of TreeViewItem)
  overload: System.Windows.Controls.TreeViewExtensions.GetContainers*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.GetItemsAndContainers(System.Windows.Controls.TreeView)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetItemsAndContainers(System.Windows.Controls.TreeView)
  id: GetItemsAndContainers(System.Windows.Controls.TreeView)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetItemsAndContainers(TreeView)
  nameWithType: TreeViewExtensions.GetItemsAndContainers(TreeView)
  fullName: System.Windows.Controls.TreeViewExtensions.GetItemsAndContainers(System.Windows.Controls.TreeView)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetItemsAndContainers
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 174
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGet the items and TreeViewItem containers of a TreeView.\n"
  example: []
  syntax:
    content: public static IEnumerable<KeyValuePair<object, TreeViewItem>> GetItemsAndContainers(this TreeView view)
    parameters:
    - id: view
      type: System.Windows.Controls.TreeView
      description: The TreeView.
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Windows.Controls.TreeViewItem}}
      description: "\nThe items and TreeViewItem containers of a TreeView.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetItemsAndContainers(view As TreeView) As IEnumerable(Of KeyValuePair(Of Object, TreeViewItem))
  overload: System.Windows.Controls.TreeViewExtensions.GetItemsAndContainers*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">view</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.GetItemsAndContainers(System.Windows.Controls.TreeViewItem)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetItemsAndContainers(System.Windows.Controls.TreeViewItem)
  id: GetItemsAndContainers(System.Windows.Controls.TreeViewItem)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetItemsAndContainers(TreeViewItem)
  nameWithType: TreeViewExtensions.GetItemsAndContainers(TreeViewItem)
  fullName: System.Windows.Controls.TreeViewExtensions.GetItemsAndContainers(System.Windows.Controls.TreeViewItem)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetItemsAndContainers
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 196
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGet the items and TreeViewItem containers of a TreeViewItem.\n"
  example: []
  syntax:
    content: public static IEnumerable<KeyValuePair<object, TreeViewItem>> GetItemsAndContainers(this TreeViewItem item)
    parameters:
    - id: item
      type: System.Windows.Controls.TreeViewItem
      description: The TreeViewItem.
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Windows.Controls.TreeViewItem}}
      description: "\nThe items and TreeViewItem containers of a TreeViewItem.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetItemsAndContainers(item As TreeViewItem) As IEnumerable(Of KeyValuePair(Of Object, TreeViewItem))
  overload: System.Windows.Controls.TreeViewExtensions.GetItemsAndContainers*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.GetDescendantContainers(System.Windows.Controls.TreeView)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetDescendantContainers(System.Windows.Controls.TreeView)
  id: GetDescendantContainers(System.Windows.Controls.TreeView)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetDescendantContainers(TreeView)
  nameWithType: TreeViewExtensions.GetDescendantContainers(TreeView)
  fullName: System.Windows.Controls.TreeViewExtensions.GetDescendantContainers(System.Windows.Controls.TreeView)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetDescendantContainers
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 218
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGet the TreeViewItem containers of a TreeView.\n"
  example: []
  syntax:
    content: public static IEnumerable<TreeViewItem> GetDescendantContainers(this TreeView view)
    parameters:
    - id: view
      type: System.Windows.Controls.TreeView
      description: The TreeView.
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Controls.TreeViewItem}
      description: The TreeViewItem containers of a TreeView.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDescendantContainers(view As TreeView) As IEnumerable(Of TreeViewItem)
  overload: System.Windows.Controls.TreeViewExtensions.GetDescendantContainers*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">view</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.GetDescendantContainers(System.Windows.Controls.TreeViewItem)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetDescendantContainers(System.Windows.Controls.TreeViewItem)
  id: GetDescendantContainers(System.Windows.Controls.TreeViewItem)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetDescendantContainers(TreeViewItem)
  nameWithType: TreeViewExtensions.GetDescendantContainers(TreeViewItem)
  fullName: System.Windows.Controls.TreeViewExtensions.GetDescendantContainers(System.Windows.Controls.TreeViewItem)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetDescendantContainers
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 239
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGet the descendant TreeViewItem containers of a TreeViewItem.\n"
  example: []
  syntax:
    content: public static IEnumerable<TreeViewItem> GetDescendantContainers(this TreeViewItem item)
    parameters:
    - id: item
      type: System.Windows.Controls.TreeViewItem
      description: The TreeViewItem.
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Controls.TreeViewItem}
      description: "\nThe descendant TreeViewItem containers of a TreeViewItem.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDescendantContainers(item As TreeViewItem) As IEnumerable(Of TreeViewItem)
  overload: System.Windows.Controls.TreeViewExtensions.GetDescendantContainers*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.GetDescendantItemsAndContainers(System.Windows.Controls.TreeView)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetDescendantItemsAndContainers(System.Windows.Controls.TreeView)
  id: GetDescendantItemsAndContainers(System.Windows.Controls.TreeView)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetDescendantItemsAndContainers(TreeView)
  nameWithType: TreeViewExtensions.GetDescendantItemsAndContainers(TreeView)
  fullName: System.Windows.Controls.TreeViewExtensions.GetDescendantItemsAndContainers(System.Windows.Controls.TreeView)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetDescendantItemsAndContainers
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 260
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGet the descendant items and TreeViewItem containers of a TreeView.\n"
  example: []
  syntax:
    content: public static IEnumerable<KeyValuePair<object, TreeViewItem>> GetDescendantItemsAndContainers(this TreeView view)
    parameters:
    - id: view
      type: System.Windows.Controls.TreeView
      description: The TreeView.
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Windows.Controls.TreeViewItem}}
      description: "\nThe descendant items and TreeViewItem containers of a TreeView.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDescendantItemsAndContainers(view As TreeView) As IEnumerable(Of KeyValuePair(Of Object, TreeViewItem))
  overload: System.Windows.Controls.TreeViewExtensions.GetDescendantItemsAndContainers*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">view</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.GetDescendantItemsAndContainers(System.Windows.Controls.TreeViewItem)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetDescendantItemsAndContainers(System.Windows.Controls.TreeViewItem)
  id: GetDescendantItemsAndContainers(System.Windows.Controls.TreeViewItem)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetDescendantItemsAndContainers(TreeViewItem)
  nameWithType: TreeViewExtensions.GetDescendantItemsAndContainers(TreeViewItem)
  fullName: System.Windows.Controls.TreeViewExtensions.GetDescendantItemsAndContainers(System.Windows.Controls.TreeViewItem)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetDescendantItemsAndContainers
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 283
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGet the descendant items and TreeViewItem containers of a\nTreeViewItem.\n"
  example: []
  syntax:
    content: public static IEnumerable<KeyValuePair<object, TreeViewItem>> GetDescendantItemsAndContainers(this TreeViewItem item)
    parameters:
    - id: item
      type: System.Windows.Controls.TreeViewItem
      description: The TreeViewItem.
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Windows.Controls.TreeViewItem}}
      description: "\nThe descendant items and TreeViewItem containers of a TreeViewItem.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDescendantItemsAndContainers(item As TreeViewItem) As IEnumerable(Of KeyValuePair(Of Object, TreeViewItem))
  overload: System.Windows.Controls.TreeViewExtensions.GetDescendantItemsAndContainers*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.GetSiblingItemsAndContainers(System.Windows.Controls.TreeViewItem)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetSiblingItemsAndContainers(System.Windows.Controls.TreeViewItem)
  id: GetSiblingItemsAndContainers(System.Windows.Controls.TreeViewItem)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetSiblingItemsAndContainers(TreeViewItem)
  nameWithType: TreeViewExtensions.GetSiblingItemsAndContainers(TreeViewItem)
  fullName: System.Windows.Controls.TreeViewExtensions.GetSiblingItemsAndContainers(System.Windows.Controls.TreeViewItem)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetSiblingItemsAndContainers
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 326
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGet the sibling items and containers of the item.\n"
  example: []
  syntax:
    content: public static IEnumerable<KeyValuePair<object, TreeViewItem>> GetSiblingItemsAndContainers(this TreeViewItem item)
    parameters:
    - id: item
      type: System.Windows.Controls.TreeViewItem
      description: The TreeViewItem.
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Windows.Controls.TreeViewItem}}
      description: The sibling items and containers of the item.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetSiblingItemsAndContainers(item As TreeViewItem) As IEnumerable(Of KeyValuePair(Of Object, TreeViewItem))
  overload: System.Windows.Controls.TreeViewExtensions.GetSiblingItemsAndContainers*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.GetContainersFromItem(System.Windows.Controls.TreeView,System.Object)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetContainersFromItem(System.Windows.Controls.TreeView,System.Object)
  id: GetContainersFromItem(System.Windows.Controls.TreeView,System.Object)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetContainersFromItem(TreeView, Object)
  nameWithType: TreeViewExtensions.GetContainersFromItem(TreeView, Object)
  fullName: System.Windows.Controls.TreeViewExtensions.GetContainersFromItem(System.Windows.Controls.TreeView, System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetContainersFromItem
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 360
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGet the TreeViewItems already created that are used to represent the\ngiven item.\n"
  example: []
  syntax:
    content: public static IEnumerable<TreeViewItem> GetContainersFromItem(this TreeView view, object item)
    parameters:
    - id: view
      type: System.Windows.Controls.TreeView
      description: The TreeView.
    - id: item
      type: System.Object
      description: The item being represented.
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Controls.TreeViewItem}
      description: "\nA sequence of TreeViewItems that represent the given item, or an\nempty sequence if none were found.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetContainersFromItem(view As TreeView, item As Object) As IEnumerable(Of TreeViewItem)
  overload: System.Windows.Controls.TreeViewExtensions.GetContainersFromItem*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">view</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.GetContainerFromItem(System.Windows.Controls.TreeView,System.Object)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetContainerFromItem(System.Windows.Controls.TreeView,System.Object)
  id: GetContainerFromItem(System.Windows.Controls.TreeView,System.Object)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetContainerFromItem(TreeView, Object)
  nameWithType: TreeViewExtensions.GetContainerFromItem(TreeView, Object)
  fullName: System.Windows.Controls.TreeViewExtensions.GetContainerFromItem(System.Windows.Controls.TreeView, System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetContainerFromItem
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 390
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGet the TreeViewItem already created that is used to represent the\ngiven item.\n"
  remarks: "\nIf multiple TreeViewItems represent the same item, the first item\nfound via a breadth-first search will be used.\n"
  example: []
  syntax:
    content: public static TreeViewItem GetContainerFromItem(this TreeView view, object item)
    parameters:
    - id: view
      type: System.Windows.Controls.TreeView
      description: The TreeView.
    - id: item
      type: System.Object
      description: The item being represented.
    return:
      type: System.Windows.Controls.TreeViewItem
      description: "\nThe TreeViewItems that represents the given item, or null if no\ncontainer was found.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetContainerFromItem(view As TreeView, item As Object) As TreeViewItem
  overload: System.Windows.Controls.TreeViewExtensions.GetContainerFromItem*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">view</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.GetPath(System.Windows.Controls.TreeViewItem)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetPath(System.Windows.Controls.TreeViewItem)
  id: GetPath(System.Windows.Controls.TreeViewItem)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetPath(TreeViewItem)
  nameWithType: TreeViewExtensions.GetPath(TreeViewItem)
  fullName: System.Windows.Controls.TreeViewExtensions.GetPath(System.Windows.Controls.TreeViewItem)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetPath
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 409
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGets a path of items and TreeViewItem containers from the\nTreeViewItem to the root of the TreeView.\n"
  example: []
  syntax:
    content: public static IEnumerable<KeyValuePair<object, TreeViewItem>> GetPath(this TreeViewItem item)
    parameters:
    - id: item
      type: System.Windows.Controls.TreeViewItem
      description: The TreeViewItem.
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Windows.Controls.TreeViewItem}}
      description: "\nA path of items and TreeViewItem containers from the TreeViewItem to\nthe root of the TreeView.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetPath(item As TreeViewItem) As IEnumerable(Of KeyValuePair(Of Object, TreeViewItem))
  overload: System.Windows.Controls.TreeViewExtensions.GetPath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.GetItem(System.Windows.Controls.TreeViewItem)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetItem(System.Windows.Controls.TreeViewItem)
  id: GetItem(System.Windows.Controls.TreeViewItem)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetItem(TreeViewItem)
  nameWithType: TreeViewExtensions.GetItem(TreeViewItem)
  fullName: System.Windows.Controls.TreeViewExtensions.GetItem(System.Windows.Controls.TreeViewItem)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetItem
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 456
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGet the item wrapped by this container.\n"
  example: []
  syntax:
    content: public static object GetItem(this TreeViewItem item)
    parameters:
    - id: item
      type: System.Windows.Controls.TreeViewItem
      description: The TreeViewItem.
    return:
      type: System.Object
      description: "\nThe item wrapped by the container, or null if not found.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetItem(item As TreeViewItem) As Object
  overload: System.Windows.Controls.TreeViewExtensions.GetItem*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.GetParentItem(System.Windows.Controls.TreeView,System.Object)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetParentItem(System.Windows.Controls.TreeView,System.Object)
  id: GetParentItem(System.Windows.Controls.TreeView,System.Object)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetParentItem(TreeView, Object)
  nameWithType: TreeViewExtensions.GetParentItem(TreeView, Object)
  fullName: System.Windows.Controls.TreeViewExtensions.GetParentItem(System.Windows.Controls.TreeView, System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetParentItem
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 485
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGet the item of the parent container for a specified\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code>.\n"
  example: []
  syntax:
    content: public static object GetParentItem(this TreeView view, object item)
    parameters:
    - id: view
      type: System.Windows.Controls.TreeView
      description: "\nThe TreeView containing the <code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code>.\n"
    - id: item
      type: System.Object
      description: The child item.
    return:
      type: System.Object
      description: "\nThe item of the parent container for the specified\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code>, or null if not found.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetParentItem(view As TreeView, item As Object) As Object
  overload: System.Windows.Controls.TreeViewExtensions.GetParentItem*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.GetIsRoot(System.Windows.Controls.TreeViewItem)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetIsRoot(System.Windows.Controls.TreeViewItem)
  id: GetIsRoot(System.Windows.Controls.TreeViewItem)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetIsRoot(TreeViewItem)
  nameWithType: TreeViewExtensions.GetIsRoot(TreeViewItem)
  fullName: System.Windows.Controls.TreeViewExtensions.GetIsRoot(System.Windows.Controls.TreeViewItem)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetIsRoot
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 519
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGets a value indicating whether the TreeViewItem is a root of its\nTreeView.\n"
  example: []
  syntax:
    content: public static bool GetIsRoot(this TreeViewItem item)
    parameters:
    - id: item
      type: System.Windows.Controls.TreeViewItem
      description: The TreeViewItem.
    return:
      type: System.Boolean
      description: "\nA value indicating whether the TreeViewItem is a root of its\nTreeView.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetIsRoot(item As TreeViewItem) As Boolean
  overload: System.Windows.Controls.TreeViewExtensions.GetIsRoot*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.GetIsLeaf(System.Windows.Controls.TreeViewItem)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetIsLeaf(System.Windows.Controls.TreeViewItem)
  id: GetIsLeaf(System.Windows.Controls.TreeViewItem)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetIsLeaf(TreeViewItem)
  nameWithType: TreeViewExtensions.GetIsLeaf(TreeViewItem)
  fullName: System.Windows.Controls.TreeViewExtensions.GetIsLeaf(System.Windows.Controls.TreeViewItem)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetIsLeaf
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 542
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGets a value indicating whether the TreeViewItem is a leaf in its\nTreeView.\n"
  example: []
  syntax:
    content: public static bool GetIsLeaf(this TreeViewItem item)
    parameters:
    - id: item
      type: System.Windows.Controls.TreeViewItem
      description: The TreeViewItem.
    return:
      type: System.Boolean
      description: "\nA value indicating whether the TreeViewItem is a leaf in its\nTreeView.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetIsLeaf(item As TreeViewItem) As Boolean
  overload: System.Windows.Controls.TreeViewExtensions.GetIsLeaf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.GetDepth(System.Windows.Controls.TreeViewItem)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetDepth(System.Windows.Controls.TreeViewItem)
  id: GetDepth(System.Windows.Controls.TreeViewItem)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetDepth(TreeViewItem)
  nameWithType: TreeViewExtensions.GetDepth(TreeViewItem)
  fullName: System.Windows.Controls.TreeViewExtensions.GetDepth(System.Windows.Controls.TreeViewItem)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetDepth
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 567
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGets the depth of a TreeViewItem in its TreeView (using a zero-based\nindex).\n"
  example: []
  syntax:
    content: public static int GetDepth(this TreeViewItem item)
    parameters:
    - id: item
      type: System.Windows.Controls.TreeViewItem
      description: The TreeViewItem.
    return:
      type: System.Int32
      description: "\nThe depth of a TreeViewItem in its TreeView (using a zero-based\nindex).\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDepth(item As TreeViewItem) As Integer
  overload: System.Windows.Controls.TreeViewExtensions.GetDepth*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> is null.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> is not in a TreeView.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.GetSelectedContainer(System.Windows.Controls.TreeView)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetSelectedContainer(System.Windows.Controls.TreeView)
  id: GetSelectedContainer(System.Windows.Controls.TreeView)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetSelectedContainer(TreeView)
  nameWithType: TreeViewExtensions.GetSelectedContainer(TreeView)
  fullName: System.Windows.Controls.TreeViewExtensions.GetSelectedContainer(System.Windows.Controls.TreeView)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetSelectedContainer
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 603
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGet the selected TreeViewItem in a TreeView.\n"
  example: []
  syntax:
    content: public static TreeViewItem GetSelectedContainer(this TreeView view)
    parameters:
    - id: view
      type: System.Windows.Controls.TreeView
      description: The TreeView.
    return:
      type: System.Windows.Controls.TreeViewItem
      description: "\nThe selected TreeViewItem, or null if no selected item found.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetSelectedContainer(view As TreeView) As TreeViewItem
  overload: System.Windows.Controls.TreeViewExtensions.GetSelectedContainer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">view</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.SetSelectedContainer(System.Windows.Controls.TreeView,System.Windows.Controls.TreeViewItem)
  commentId: M:System.Windows.Controls.TreeViewExtensions.SetSelectedContainer(System.Windows.Controls.TreeView,System.Windows.Controls.TreeViewItem)
  id: SetSelectedContainer(System.Windows.Controls.TreeView,System.Windows.Controls.TreeViewItem)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: SetSelectedContainer(TreeView, TreeViewItem)
  nameWithType: TreeViewExtensions.SetSelectedContainer(TreeView, TreeViewItem)
  fullName: System.Windows.Controls.TreeViewExtensions.SetSelectedContainer(System.Windows.Controls.TreeView, System.Windows.Controls.TreeViewItem)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: SetSelectedContainer
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 624
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nSets the selected TreeViewItem of a TreeView.\n"
  example: []
  syntax:
    content: public static void SetSelectedContainer(this TreeView view, TreeViewItem item)
    parameters:
    - id: view
      type: System.Windows.Controls.TreeView
      description: The TreeView.
    - id: item
      type: System.Windows.Controls.TreeViewItem
      description: The TreeViewItem to select.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetSelectedContainer(view As TreeView, item As TreeViewItem)
  overload: System.Windows.Controls.TreeViewExtensions.SetSelectedContainer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">view</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.ClearSelection(System.Windows.Controls.TreeView)
  commentId: M:System.Windows.Controls.TreeViewExtensions.ClearSelection(System.Windows.Controls.TreeView)
  id: ClearSelection(System.Windows.Controls.TreeView)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: ClearSelection(TreeView)
  nameWithType: TreeViewExtensions.ClearSelection(TreeView)
  fullName: System.Windows.Controls.TreeViewExtensions.ClearSelection(System.Windows.Controls.TreeView)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ClearSelection
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 648
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nClear the selection of the TreeView.\n"
  example: []
  syntax:
    content: public static void ClearSelection(this TreeView view)
    parameters:
    - id: view
      type: System.Windows.Controls.TreeView
      description: The TreeView.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ClearSelection(view As TreeView)
  overload: System.Windows.Controls.TreeViewExtensions.ClearSelection*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">view</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.SelectItem(System.Windows.Controls.TreeView,System.Object)
  commentId: M:System.Windows.Controls.TreeViewExtensions.SelectItem(System.Windows.Controls.TreeView,System.Object)
  id: SelectItem(System.Windows.Controls.TreeView,System.Object)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: SelectItem(TreeView, Object)
  nameWithType: TreeViewExtensions.SelectItem(TreeView, Object)
  fullName: System.Windows.Controls.TreeViewExtensions.SelectItem(System.Windows.Controls.TreeView, System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: SelectItem
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 674
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nSelect an item in the TreeView.\n"
  example: []
  syntax:
    content: public static bool SelectItem(this TreeView view, object item)
    parameters:
    - id: view
      type: System.Windows.Controls.TreeView
      description: The TreeView.
    - id: item
      type: System.Object
      description: The item to select.
    return:
      type: System.Boolean
      description: "\nA value indicating whether the item was successfully set as the\nTreeView&apos;s SelectedItem.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectItem(view As TreeView, item As Object) As Boolean
  overload: System.Windows.Controls.TreeViewExtensions.SelectItem*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">view</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.GetSelectedPath(System.Windows.Controls.TreeView)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetSelectedPath(System.Windows.Controls.TreeView)
  id: GetSelectedPath(System.Windows.Controls.TreeView)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetSelectedPath(TreeView)
  nameWithType: TreeViewExtensions.GetSelectedPath(TreeView)
  fullName: System.Windows.Controls.TreeViewExtensions.GetSelectedPath(System.Windows.Controls.TreeView)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetSelectedPath
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 699
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGets the path to the TreeView&apos;s selected item.\n"
  example: []
  syntax:
    content: public static IEnumerable<KeyValuePair<object, TreeViewItem>> GetSelectedPath(this TreeView view)
    parameters:
    - id: view
      type: System.Windows.Controls.TreeView
      description: The TreeView.
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Windows.Controls.TreeViewItem}}
      description: The path to the TreeView&apos;s selected item.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetSelectedPath(view As TreeView) As IEnumerable(Of KeyValuePair(Of Object, TreeViewItem))
  overload: System.Windows.Controls.TreeViewExtensions.GetSelectedPath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">view</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.ExpandAll(System.Windows.Controls.TreeView)
  commentId: M:System.Windows.Controls.TreeViewExtensions.ExpandAll(System.Windows.Controls.TreeView)
  id: ExpandAll(System.Windows.Controls.TreeView)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: ExpandAll(TreeView)
  nameWithType: TreeViewExtensions.ExpandAll(TreeView)
  fullName: System.Windows.Controls.TreeViewExtensions.ExpandAll(System.Windows.Controls.TreeView)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ExpandAll
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 798
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nExpand all of the items in a TreeView.\n"
  example: []
  syntax:
    content: public static void ExpandAll(this TreeView view)
    parameters:
    - id: view
      type: System.Windows.Controls.TreeView
      description: The TreeView.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ExpandAll(view As TreeView)
  overload: System.Windows.Controls.TreeViewExtensions.ExpandAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">view</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.CollapseAll(System.Windows.Controls.TreeView)
  commentId: M:System.Windows.Controls.TreeViewExtensions.CollapseAll(System.Windows.Controls.TreeView)
  id: CollapseAll(System.Windows.Controls.TreeView)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: CollapseAll(TreeView)
  nameWithType: TreeViewExtensions.CollapseAll(TreeView)
  fullName: System.Windows.Controls.TreeViewExtensions.CollapseAll(System.Windows.Controls.TreeView)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CollapseAll
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 815
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nCollapse all of the items in a TreeView.\n"
  example: []
  syntax:
    content: public static void CollapseAll(this TreeView view)
    parameters:
    - id: view
      type: System.Windows.Controls.TreeView
      description: The TreeView.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CollapseAll(view As TreeView)
  overload: System.Windows.Controls.TreeViewExtensions.CollapseAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">view</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.ExpandToDepth(System.Windows.Controls.TreeView,System.Int32)
  commentId: M:System.Windows.Controls.TreeViewExtensions.ExpandToDepth(System.Windows.Controls.TreeView,System.Int32)
  id: ExpandToDepth(System.Windows.Controls.TreeView,System.Int32)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: ExpandToDepth(TreeView, Int32)
  nameWithType: TreeViewExtensions.ExpandToDepth(TreeView, Int32)
  fullName: System.Windows.Controls.TreeViewExtensions.ExpandToDepth(System.Windows.Controls.TreeView, System.Int32)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ExpandToDepth
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 833
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nExpand a specified number of layers in a TreeView.\n"
  example: []
  syntax:
    content: public static void ExpandToDepth(this TreeView view, int depth)
    parameters:
    - id: view
      type: System.Windows.Controls.TreeView
      description: The TreeView.
    - id: depth
      type: System.Int32
      description: The number of layers to expand.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ExpandToDepth(view As TreeView, depth As Integer)
  overload: System.Windows.Controls.TreeViewExtensions.ExpandToDepth*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">view</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.ExpandPath(System.Windows.Controls.TreeViewItem)
  commentId: M:System.Windows.Controls.TreeViewExtensions.ExpandPath(System.Windows.Controls.TreeViewItem)
  id: ExpandPath(System.Windows.Controls.TreeViewItem)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: ExpandPath(TreeViewItem)
  nameWithType: TreeViewExtensions.ExpandPath(TreeViewItem)
  fullName: System.Windows.Controls.TreeViewExtensions.ExpandPath(System.Windows.Controls.TreeViewItem)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ExpandPath
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 895
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nExpand a path from the TreeViewItem to the root of the TreeView.\n"
  example: []
  syntax:
    content: public static void ExpandPath(this TreeViewItem item)
    parameters:
    - id: item
      type: System.Windows.Controls.TreeViewItem
      description: The TreeViewItem.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ExpandPath(item As TreeViewItem)
  overload: System.Windows.Controls.TreeViewExtensions.ExpandPath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.ExpandSelectedPath(System.Windows.Controls.TreeView)
  commentId: M:System.Windows.Controls.TreeViewExtensions.ExpandSelectedPath(System.Windows.Controls.TreeView)
  id: ExpandSelectedPath(System.Windows.Controls.TreeView)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: ExpandSelectedPath(TreeView)
  nameWithType: TreeViewExtensions.ExpandSelectedPath(TreeView)
  fullName: System.Windows.Controls.TreeViewExtensions.ExpandSelectedPath(System.Windows.Controls.TreeView)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ExpandSelectedPath
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 912
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nExpand the path from the SelectedItem to the root of the TreeView.\n"
  example: []
  syntax:
    content: public static void ExpandSelectedPath(this TreeView view)
    parameters:
    - id: view
      type: System.Windows.Controls.TreeView
      description: The TreeView.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ExpandSelectedPath(view As TreeView)
  overload: System.Windows.Controls.TreeViewExtensions.ExpandSelectedPath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">view</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.CollapseAllButSelectedPath(System.Windows.Controls.TreeView)
  commentId: M:System.Windows.Controls.TreeViewExtensions.CollapseAllButSelectedPath(System.Windows.Controls.TreeView)
  id: CollapseAllButSelectedPath(System.Windows.Controls.TreeView)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: CollapseAllButSelectedPath(TreeView)
  nameWithType: TreeViewExtensions.CollapseAllButSelectedPath(TreeView)
  fullName: System.Windows.Controls.TreeViewExtensions.CollapseAllButSelectedPath(System.Windows.Controls.TreeView)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CollapseAllButSelectedPath
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 934
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nCollapse all TreeViewItems except those along the path from the\nTreeView&apos;s SelectedItem to the root of the TreeView.\n"
  example: []
  syntax:
    content: public static void CollapseAllButSelectedPath(this TreeView view)
    parameters:
    - id: view
      type: System.Windows.Controls.TreeView
      description: The TreeView.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CollapseAllButSelectedPath(view As TreeView)
  overload: System.Windows.Controls.TreeViewExtensions.CollapseAllButSelectedPath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">view</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.ExpandPath(System.Windows.Controls.TreeView,System.Object[])
  commentId: M:System.Windows.Controls.TreeViewExtensions.ExpandPath(System.Windows.Controls.TreeView,System.Object[])
  id: ExpandPath(System.Windows.Controls.TreeView,System.Object[])
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: ExpandPath(TreeView, Object[])
  nameWithType: TreeViewExtensions.ExpandPath(TreeView, Object[])
  fullName: System.Windows.Controls.TreeViewExtensions.ExpandPath(System.Windows.Controls.TreeView, System.Object[])
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ExpandPath
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 965
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nExpand the given path of items starting from the TreeView&apos;s root.\n"
  example: []
  syntax:
    content: public static void ExpandPath(this TreeView view, params object[] items)
    parameters:
    - id: view
      type: System.Windows.Controls.TreeView
      description: The TreeView.
    - id: items
      type: System.Object[]
      description: "\nThe sequence of items corresponding to the path to expand.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ExpandPath(view As TreeView, ParamArray items As Object())
  overload: System.Windows.Controls.TreeViewExtensions.ExpandPath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">view</code> is null.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">items</code> is null.\n"
  nameWithType.vb: TreeViewExtensions.ExpandPath(TreeView, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Windows.Controls.TreeViewExtensions.ExpandPath(System.Windows.Controls.TreeView, System.Object())
  name.vb: ExpandPath(TreeView, Object())
- uid: System.Windows.Controls.TreeViewExtensions.ExpandPath``1(System.Windows.Controls.TreeView,System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Windows.Controls.TreeViewExtensions.ExpandPath``1(System.Windows.Controls.TreeView,System.Collections.Generic.IEnumerable{``0})
  id: ExpandPath``1(System.Windows.Controls.TreeView,System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: ExpandPath<T>(TreeView, IEnumerable<T>)
  nameWithType: TreeViewExtensions.ExpandPath<T>(TreeView, IEnumerable<T>)
  fullName: System.Windows.Controls.TreeViewExtensions.ExpandPath<T>(System.Windows.Controls.TreeView, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ExpandPath
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 986
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nExpand the given path of items starting from the TreeView&apos;s root.\n"
  example: []
  syntax:
    content: public static void ExpandPath<T>(this TreeView view, IEnumerable<T> items)
    parameters:
    - id: view
      type: System.Windows.Controls.TreeView
      description: The TreeView.
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\nThe sequence of items corresponding to the path to expand.\n"
    typeParameters:
    - id: T
      description: "\nThe type of items provided in <code data-dev-comment-type=\"paramref\" class=\"paramref\">items</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ExpandPath(Of T)(view As TreeView, items As IEnumerable(Of T))
  overload: System.Windows.Controls.TreeViewExtensions.ExpandPath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">view</code> is null.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">items</code> is null.\n"
  nameWithType.vb: TreeViewExtensions.ExpandPath(Of T)(TreeView, IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Windows.Controls.TreeViewExtensions.ExpandPath(Of T)(System.Windows.Controls.TreeView, System.Collections.Generic.IEnumerable(Of T))
  name.vb: ExpandPath(Of T)(TreeView, IEnumerable(Of T))
- uid: System.Windows.Controls.TreeViewExtensions.ExpandPath``1(System.Windows.Controls.TreeView,System.Func{System.Object,``0},``0[])
  commentId: M:System.Windows.Controls.TreeViewExtensions.ExpandPath``1(System.Windows.Controls.TreeView,System.Func{System.Object,``0},``0[])
  id: ExpandPath``1(System.Windows.Controls.TreeView,System.Func{System.Object,``0},``0[])
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: ExpandPath<T>(TreeView, Func<Object, T>, T[])
  nameWithType: TreeViewExtensions.ExpandPath<T>(TreeView, Func<Object, T>, T[])
  fullName: System.Windows.Controls.TreeViewExtensions.ExpandPath<T>(System.Windows.Controls.TreeView, System.Func<System.Object, T>, T[])
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ExpandPath
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 1013
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nExpand the given path of items starting from the TreeView&apos;s root.\n"
  example: []
  syntax:
    content: public static void ExpandPath<T>(this TreeView view, Func<object, T> comparisonSelector, params T[] items)
    parameters:
    - id: view
      type: System.Windows.Controls.TreeView
      description: The TreeView.
    - id: comparisonSelector
      type: System.Func{System.Object,{T}}
      description: "\nA function that takes a TreeViewItem&apos;s item and returns a value to\ncompare against elements of the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">items</code>.\nThe item itself will be used if \n<code data-dev-comment-type=\"paramref\" class=\"paramref\">comparisonSelector</code> is null.\n"
    - id: items
      type: '{T}[]'
      description: "\nThe sequence of items corresponding to the path to expand.\n"
    typeParameters:
    - id: T
      description: "\nThe type of items provided in <code data-dev-comment-type=\"paramref\" class=\"paramref\">items</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ExpandPath(Of T)(view As TreeView, comparisonSelector As Func(Of Object, T), ParamArray items As T())
  overload: System.Windows.Controls.TreeViewExtensions.ExpandPath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">view</code> is null.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">items</code> is null.\n"
  nameWithType.vb: TreeViewExtensions.ExpandPath(Of T)(TreeView, Func(Of Object, T), T())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Windows.Controls.TreeViewExtensions.ExpandPath(Of T)(System.Windows.Controls.TreeView, System.Func(Of System.Object, T), T())
  name.vb: ExpandPath(Of T)(TreeView, Func(Of Object, T), T())
- uid: System.Windows.Controls.TreeViewExtensions.ExpandPath``1(System.Windows.Controls.TreeView,System.Func{System.Object,``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Windows.Controls.TreeViewExtensions.ExpandPath``1(System.Windows.Controls.TreeView,System.Func{System.Object,``0},System.Collections.Generic.IEnumerable{``0})
  id: ExpandPath``1(System.Windows.Controls.TreeView,System.Func{System.Object,``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: ExpandPath<T>(TreeView, Func<Object, T>, IEnumerable<T>)
  nameWithType: TreeViewExtensions.ExpandPath<T>(TreeView, Func<Object, T>, IEnumerable<T>)
  fullName: System.Windows.Controls.TreeViewExtensions.ExpandPath<T>(System.Windows.Controls.TreeView, System.Func<System.Object, T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ExpandPath
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 1040
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nExpand the given path of items starting from the TreeView&apos;s root.\n"
  example: []
  syntax:
    content: public static void ExpandPath<T>(this TreeView view, Func<object, T> comparisonSelector, IEnumerable<T> items)
    parameters:
    - id: view
      type: System.Windows.Controls.TreeView
      description: The TreeView.
    - id: comparisonSelector
      type: System.Func{System.Object,{T}}
      description: "\nA function that takes a TreeViewItem&apos;s item and returns a value to\ncompare against elements of the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">items</code>.\nThe item itself will be used if \n<code data-dev-comment-type=\"paramref\" class=\"paramref\">comparisonSelector</code> is null.\n"
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\nThe sequence of items corresponding to the path to expand.\n"
    typeParameters:
    - id: T
      description: "\nThe type of items provided in <code data-dev-comment-type=\"paramref\" class=\"paramref\">items</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ExpandPath(Of T)(view As TreeView, comparisonSelector As Func(Of Object, T), items As IEnumerable(Of T))
  overload: System.Windows.Controls.TreeViewExtensions.ExpandPath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">view</code> is null.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">items</code> is null.\n"
  nameWithType.vb: TreeViewExtensions.ExpandPath(Of T)(TreeView, Func(Of Object, T), IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Windows.Controls.TreeViewExtensions.ExpandPath(Of T)(System.Windows.Controls.TreeView, System.Func(Of System.Object, T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: ExpandPath(Of T)(TreeView, Func(Of Object, T), IEnumerable(Of T))
- uid: System.Windows.Controls.TreeViewExtensions.GetIsChecked(System.Windows.Controls.TreeViewItem)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetIsChecked(System.Windows.Controls.TreeViewItem)
  id: GetIsChecked(System.Windows.Controls.TreeViewItem)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetIsChecked(TreeViewItem)
  nameWithType: TreeViewExtensions.GetIsChecked(TreeViewItem)
  fullName: System.Windows.Controls.TreeViewExtensions.GetIsChecked(System.Windows.Controls.TreeViewItem)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetIsChecked
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 1112
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGets the value of the IsChecked attached property for a specified\nTreeViewItem.\n"
  example: []
  syntax:
    content: public static bool? GetIsChecked(this TreeViewItem element)
    parameters:
    - id: element
      type: System.Windows.Controls.TreeViewItem
      description: "\nThe TreeViewItem from which the property value is read.\n"
    return:
      type: System.Nullable{System.Boolean}
      description: "\nThe IsChecked property value for the TreeViewItem.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetIsChecked(element As TreeViewItem) As Boolean?
  overload: System.Windows.Controls.TreeViewExtensions.GetIsChecked*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.SetIsChecked(System.Windows.Controls.TreeViewItem,System.Nullable{System.Boolean})
  commentId: M:System.Windows.Controls.TreeViewExtensions.SetIsChecked(System.Windows.Controls.TreeViewItem,System.Nullable{System.Boolean})
  id: SetIsChecked(System.Windows.Controls.TreeViewItem,System.Nullable{System.Boolean})
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: SetIsChecked(TreeViewItem, Nullable<Boolean>)
  nameWithType: TreeViewExtensions.SetIsChecked(TreeViewItem, Nullable<Boolean>)
  fullName: System.Windows.Controls.TreeViewExtensions.SetIsChecked(System.Windows.Controls.TreeViewItem, System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: SetIsChecked
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 1130
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nSets the value of the IsChecked attached property to a specified\nTreeViewItem.\n"
  example: []
  syntax:
    content: public static void SetIsChecked(this TreeViewItem element, bool? value)
    parameters:
    - id: element
      type: System.Windows.Controls.TreeViewItem
      description: "\nThe TreeViewItem to which the attached property is written.\n"
    - id: value
      type: System.Nullable{System.Boolean}
      description: The needed IsChecked value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetIsChecked(element As TreeViewItem, value As Boolean?)
  overload: System.Windows.Controls.TreeViewExtensions.SetIsChecked*
  nameWithType.vb: TreeViewExtensions.SetIsChecked(TreeViewItem, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Windows.Controls.TreeViewExtensions.SetIsChecked(System.Windows.Controls.TreeViewItem, System.Nullable(Of System.Boolean))
  name.vb: SetIsChecked(TreeViewItem, Nullable(Of Boolean))
- uid: System.Windows.Controls.TreeViewExtensions.IsCheckedProperty
  commentId: F:System.Windows.Controls.TreeViewExtensions.IsCheckedProperty
  id: IsCheckedProperty
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: IsCheckedProperty
  nameWithType: TreeViewExtensions.IsCheckedProperty
  fullName: System.Windows.Controls.TreeViewExtensions.IsCheckedProperty
  type: Field
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IsCheckedProperty
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 1143
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nIdentifies the IsChecked dependency property.\n"
  example: []
  syntax:
    content: public static readonly DependencyProperty IsCheckedProperty
    return:
      type: System.Windows.DependencyProperty
    content.vb: Public Shared ReadOnly IsCheckedProperty As DependencyProperty
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Windows.Controls.TreeViewExtensions.GetCheckedItemsAndContainers(System.Windows.Controls.TreeView)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetCheckedItemsAndContainers(System.Windows.Controls.TreeView)
  id: GetCheckedItemsAndContainers(System.Windows.Controls.TreeView)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetCheckedItemsAndContainers(TreeView)
  nameWithType: TreeViewExtensions.GetCheckedItemsAndContainers(TreeView)
  fullName: System.Windows.Controls.TreeViewExtensions.GetCheckedItemsAndContainers(System.Windows.Controls.TreeView)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetCheckedItemsAndContainers
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 1370
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGet the sequence of items and containers with their IsChecked\nproperty set to True.\n"
  example: []
  syntax:
    content: public static IEnumerable<KeyValuePair<object, TreeViewItem>> GetCheckedItemsAndContainers(this TreeView view)
    parameters:
    - id: view
      type: System.Windows.Controls.TreeView
      description: The TreeView.
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Windows.Controls.TreeViewItem}}
      description: "\nThe sequence of items and containers with their IsChecked property\nset to True.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCheckedItemsAndContainers(view As TreeView) As IEnumerable(Of KeyValuePair(Of Object, TreeViewItem))
  overload: System.Windows.Controls.TreeViewExtensions.GetCheckedItemsAndContainers*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">view</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Controls.TreeViewExtensions.GetCheckedItemsAndContainers(System.Windows.Controls.TreeView,System.Boolean)
  commentId: M:System.Windows.Controls.TreeViewExtensions.GetCheckedItemsAndContainers(System.Windows.Controls.TreeView,System.Boolean)
  id: GetCheckedItemsAndContainers(System.Windows.Controls.TreeView,System.Boolean)
  isExtensionMethod: true
  parent: System.Windows.Controls.TreeViewExtensions
  langs:
  - csharp
  - vb
  name: GetCheckedItemsAndContainers(TreeView, Boolean)
  nameWithType: TreeViewExtensions.GetCheckedItemsAndContainers(TreeView, Boolean)
  fullName: System.Windows.Controls.TreeViewExtensions.GetCheckedItemsAndContainers(System.Windows.Controls.TreeView, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetCheckedItemsAndContainers
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows.Controls/TreeViewExtensions.cs
    startLine: 1393
  assemblies:
  - OpenSilver
  namespace: System.Windows.Controls
  summary: "\nGet the sequence of items and containers with their IsChecked\nproperty set to True.\n"
  example: []
  syntax:
    content: public static IEnumerable<KeyValuePair<object, TreeViewItem>> GetCheckedItemsAndContainers(this TreeView view, bool includeIndeterminate)
    parameters:
    - id: view
      type: System.Windows.Controls.TreeView
      description: The TreeView.
    - id: includeIndeterminate
      type: System.Boolean
      description: "\nA value indicating whether to include TreeViewItems with an\nindeterminate IsChecked value.\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Windows.Controls.TreeViewItem}}
      description: "\nThe sequence of items and containers with their IsChecked property\nset to True or also set to null if indeterminate values are\nincluded.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCheckedItemsAndContainers(view As TreeView, includeIndeterminate As Boolean) As IEnumerable(Of KeyValuePair(Of Object, TreeViewItem))
  overload: System.Windows.Controls.TreeViewExtensions.GetCheckedItemsAndContainers*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">view</code> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Windows.Controls
  commentId: N:System.Windows.Controls
  name: System.Windows.Controls
  nameWithType: System.Windows.Controls
  fullName: System.Windows.Controls
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.Windows.Controls.TreeViewExtensions.GetParentTreeViewItem*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.GetParentTreeViewItem
  name: GetParentTreeViewItem
  nameWithType: TreeViewExtensions.GetParentTreeViewItem
  fullName: System.Windows.Controls.TreeViewExtensions.GetParentTreeViewItem
- uid: System.Windows.Controls.TreeViewItem
  commentId: T:System.Windows.Controls.TreeViewItem
  parent: System.Windows.Controls
  name: TreeViewItem
  nameWithType: TreeViewItem
  fullName: System.Windows.Controls.TreeViewItem
- uid: System.Windows.Controls.TreeViewExtensions.GetParentTreeView*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.GetParentTreeView
  name: GetParentTreeView
  nameWithType: TreeViewExtensions.GetParentTreeView
  fullName: System.Windows.Controls.TreeViewExtensions.GetParentTreeView
- uid: System.Windows.Controls.TreeView
  commentId: T:System.Windows.Controls.TreeView
  parent: System.Windows.Controls
  name: TreeView
  nameWithType: TreeView
  fullName: System.Windows.Controls.TreeView
- uid: System.Windows.Controls.TreeViewExtensions.GetContainers*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.GetContainers
  name: GetContainers
  nameWithType: TreeViewExtensions.GetContainers
  fullName: System.Windows.Controls.TreeViewExtensions.GetContainers
- uid: System.Collections.Generic.IEnumerable{System.Windows.Controls.TreeViewItem}
  commentId: T:System.Collections.Generic.IEnumerable{System.Windows.Controls.TreeViewItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TreeViewItem>
  nameWithType: IEnumerable<TreeViewItem>
  fullName: System.Collections.Generic.IEnumerable<System.Windows.Controls.TreeViewItem>
  nameWithType.vb: IEnumerable(Of TreeViewItem)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Windows.Controls.TreeViewItem)
  name.vb: IEnumerable(Of TreeViewItem)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Controls.TreeViewItem
    name: TreeViewItem
    nameWithType: TreeViewItem
    fullName: System.Windows.Controls.TreeViewItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Controls.TreeViewItem
    name: TreeViewItem
    nameWithType: TreeViewItem
    fullName: System.Windows.Controls.TreeViewItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Windows.Controls.TreeViewExtensions.GetItemsAndContainers*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.GetItemsAndContainers
  name: GetItemsAndContainers
  nameWithType: TreeViewExtensions.GetItemsAndContainers
  fullName: System.Windows.Controls.TreeViewExtensions.GetItemsAndContainers
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Windows.Controls.TreeViewItem}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Windows.Controls.TreeViewItem}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<Object, TreeViewItem>>
  nameWithType: IEnumerable<KeyValuePair<Object, TreeViewItem>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Object, System.Windows.Controls.TreeViewItem>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of Object, TreeViewItem))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Windows.Controls.TreeViewItem))
  name.vb: IEnumerable(Of KeyValuePair(Of Object, TreeViewItem))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Windows.Controls.TreeViewItem
    name: TreeViewItem
    nameWithType: TreeViewItem
    fullName: System.Windows.Controls.TreeViewItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Windows.Controls.TreeViewItem
    name: TreeViewItem
    nameWithType: TreeViewItem
    fullName: System.Windows.Controls.TreeViewItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Controls.TreeViewExtensions.GetDescendantContainers*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.GetDescendantContainers
  name: GetDescendantContainers
  nameWithType: TreeViewExtensions.GetDescendantContainers
  fullName: System.Windows.Controls.TreeViewExtensions.GetDescendantContainers
- uid: System.Windows.Controls.TreeViewExtensions.GetDescendantItemsAndContainers*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.GetDescendantItemsAndContainers
  name: GetDescendantItemsAndContainers
  nameWithType: TreeViewExtensions.GetDescendantItemsAndContainers
  fullName: System.Windows.Controls.TreeViewExtensions.GetDescendantItemsAndContainers
- uid: System.Windows.Controls.TreeViewExtensions.GetSiblingItemsAndContainers*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.GetSiblingItemsAndContainers
  name: GetSiblingItemsAndContainers
  nameWithType: TreeViewExtensions.GetSiblingItemsAndContainers
  fullName: System.Windows.Controls.TreeViewExtensions.GetSiblingItemsAndContainers
- uid: System.Windows.Controls.TreeViewExtensions.GetContainersFromItem*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.GetContainersFromItem
  name: GetContainersFromItem
  nameWithType: TreeViewExtensions.GetContainersFromItem
  fullName: System.Windows.Controls.TreeViewExtensions.GetContainersFromItem
- uid: System.Windows.Controls.TreeViewExtensions.GetContainerFromItem*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.GetContainerFromItem
  name: GetContainerFromItem
  nameWithType: TreeViewExtensions.GetContainerFromItem
  fullName: System.Windows.Controls.TreeViewExtensions.GetContainerFromItem
- uid: System.Windows.Controls.TreeViewExtensions.GetPath*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.GetPath
  name: GetPath
  nameWithType: TreeViewExtensions.GetPath
  fullName: System.Windows.Controls.TreeViewExtensions.GetPath
- uid: System.Windows.Controls.TreeViewExtensions.GetItem*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.GetItem
  name: GetItem
  nameWithType: TreeViewExtensions.GetItem
  fullName: System.Windows.Controls.TreeViewExtensions.GetItem
- uid: System.Windows.Controls.TreeViewExtensions.GetParentItem*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.GetParentItem
  name: GetParentItem
  nameWithType: TreeViewExtensions.GetParentItem
  fullName: System.Windows.Controls.TreeViewExtensions.GetParentItem
- uid: System.Windows.Controls.TreeViewExtensions.GetIsRoot*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.GetIsRoot
  name: GetIsRoot
  nameWithType: TreeViewExtensions.GetIsRoot
  fullName: System.Windows.Controls.TreeViewExtensions.GetIsRoot
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Controls.TreeViewExtensions.GetIsLeaf*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.GetIsLeaf
  name: GetIsLeaf
  nameWithType: TreeViewExtensions.GetIsLeaf
  fullName: System.Windows.Controls.TreeViewExtensions.GetIsLeaf
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: System.Windows.Controls.TreeViewExtensions.GetDepth*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.GetDepth
  name: GetDepth
  nameWithType: TreeViewExtensions.GetDepth
  fullName: System.Windows.Controls.TreeViewExtensions.GetDepth
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Controls.TreeViewExtensions.GetSelectedContainer*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.GetSelectedContainer
  name: GetSelectedContainer
  nameWithType: TreeViewExtensions.GetSelectedContainer
  fullName: System.Windows.Controls.TreeViewExtensions.GetSelectedContainer
- uid: System.Windows.Controls.TreeViewExtensions.SetSelectedContainer*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.SetSelectedContainer
  name: SetSelectedContainer
  nameWithType: TreeViewExtensions.SetSelectedContainer
  fullName: System.Windows.Controls.TreeViewExtensions.SetSelectedContainer
- uid: System.Windows.Controls.TreeViewExtensions.ClearSelection*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.ClearSelection
  name: ClearSelection
  nameWithType: TreeViewExtensions.ClearSelection
  fullName: System.Windows.Controls.TreeViewExtensions.ClearSelection
- uid: System.Windows.Controls.TreeViewExtensions.SelectItem*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.SelectItem
  name: SelectItem
  nameWithType: TreeViewExtensions.SelectItem
  fullName: System.Windows.Controls.TreeViewExtensions.SelectItem
- uid: System.Windows.Controls.TreeViewExtensions.GetSelectedPath*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.GetSelectedPath
  name: GetSelectedPath
  nameWithType: TreeViewExtensions.GetSelectedPath
  fullName: System.Windows.Controls.TreeViewExtensions.GetSelectedPath
- uid: System.Windows.Controls.TreeViewExtensions.ExpandAll*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.ExpandAll
  name: ExpandAll
  nameWithType: TreeViewExtensions.ExpandAll
  fullName: System.Windows.Controls.TreeViewExtensions.ExpandAll
- uid: System.Windows.Controls.TreeViewExtensions.CollapseAll*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.CollapseAll
  name: CollapseAll
  nameWithType: TreeViewExtensions.CollapseAll
  fullName: System.Windows.Controls.TreeViewExtensions.CollapseAll
- uid: System.Windows.Controls.TreeViewExtensions.ExpandToDepth*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.ExpandToDepth
  name: ExpandToDepth
  nameWithType: TreeViewExtensions.ExpandToDepth
  fullName: System.Windows.Controls.TreeViewExtensions.ExpandToDepth
- uid: System.Windows.Controls.TreeViewExtensions.ExpandPath*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.ExpandPath
  name: ExpandPath
  nameWithType: TreeViewExtensions.ExpandPath
  fullName: System.Windows.Controls.TreeViewExtensions.ExpandPath
- uid: System.Windows.Controls.TreeViewExtensions.ExpandSelectedPath*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.ExpandSelectedPath
  name: ExpandSelectedPath
  nameWithType: TreeViewExtensions.ExpandSelectedPath
  fullName: System.Windows.Controls.TreeViewExtensions.ExpandSelectedPath
- uid: System.Windows.Controls.TreeViewExtensions.CollapseAllButSelectedPath*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.CollapseAllButSelectedPath
  name: CollapseAllButSelectedPath
  nameWithType: TreeViewExtensions.CollapseAllButSelectedPath
  fullName: System.Windows.Controls.TreeViewExtensions.CollapseAllButSelectedPath
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Object,{T}}
  commentId: T:System.Func{System.Object,``0}
  parent: System
  definition: System.Func`2
  name: Func<Object, T>
  nameWithType: Func<Object, T>
  fullName: System.Func<System.Object, T>
  nameWithType.vb: Func(Of Object, T)
  fullName.vb: System.Func(Of System.Object, T)
  name.vb: Func(Of Object, T)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Controls.TreeViewExtensions.GetIsChecked*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.GetIsChecked
  name: GetIsChecked
  nameWithType: TreeViewExtensions.GetIsChecked
  fullName: System.Windows.Controls.TreeViewExtensions.GetIsChecked
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Controls.TreeViewExtensions.SetIsChecked*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.SetIsChecked
  name: SetIsChecked
  nameWithType: TreeViewExtensions.SetIsChecked
  fullName: System.Windows.Controls.TreeViewExtensions.SetIsChecked
- uid: System.Windows.DependencyProperty
  commentId: T:System.Windows.DependencyProperty
  parent: System.Windows
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows
  commentId: N:System.Windows
  name: System.Windows
  nameWithType: System.Windows
  fullName: System.Windows
- uid: System.Windows.Controls.TreeViewExtensions.GetCheckedItemsAndContainers*
  commentId: Overload:System.Windows.Controls.TreeViewExtensions.GetCheckedItemsAndContainers
  name: GetCheckedItemsAndContainers
  nameWithType: TreeViewExtensions.GetCheckedItemsAndContainers
  fullName: System.Windows.Controls.TreeViewExtensions.GetCheckedItemsAndContainers
