### YamlMime:ManagedReference
items:
- uid: System.Tuple2`2
  commentId: T:System.Tuple2`2
  id: Tuple2`2
  parent: System
  children:
  - System.Tuple2`2.#ctor(`0,`1)
  - System.Tuple2`2.Equals(System.Object)
  - System.Tuple2`2.Equals(System.Tuple2{`0,`1})
  - System.Tuple2`2.GetHashCode
  - System.Tuple2`2.Item1
  - System.Tuple2`2.Item2
  - System.Tuple2`2.op_Equality(System.Tuple2{`0,`1},System.Tuple2{`0,`1})
  - System.Tuple2`2.op_Inequality(System.Tuple2{`0,`1},System.Tuple2{`0,`1})
  - System.Tuple2`2.ToString
  langs:
  - csharp
  - vb
  name: Tuple2<T1, T2>
  nameWithType: Tuple2<T1, T2>
  fullName: System.Tuple2<T1, T2>
  type: Class
  source:
    remote:
      path: src/Runtime/Runtime/Core/Other/Tuple2_2.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Tuple2
    path: ../OpenSilverGit/src/Runtime/Runtime/Core/Other/Tuple2_2.cs
    startLine: 28
  assemblies:
  - OpenSilver
  namespace: System
  summary: "\nRepresents a functional tuple that can be used to store\ntwo values of different types inside one object.\n"
  example: []
  syntax:
    content: >-
      [Obsolete]

      public sealed class Tuple2<T1, T2>
    typeParameters:
    - id: T1
      description: The type of the first element
    - id: T2
      description: The type of the second element
    content.vb: >-
      <Obsolete>

      Public NotInheritable Class Tuple2(Of T1, T2)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor
    arguments: []
  nameWithType.vb: Tuple2(Of T1, T2)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: System.Tuple2(Of T1, T2)
  name.vb: Tuple2(Of T1, T2)
- uid: System.Tuple2`2.Item1
  commentId: P:System.Tuple2`2.Item1
  id: Item1
  parent: System.Tuple2`2
  langs:
  - csharp
  - vb
  name: Item1
  nameWithType: Tuple2<T1, T2>.Item1
  fullName: System.Tuple2<T1, T2>.Item1
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/Core/Other/Tuple2_2.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Item1
    path: ../OpenSilverGit/src/Runtime/Runtime/Core/Other/Tuple2_2.cs
    startLine: 37
  assemblies:
  - OpenSilver
  namespace: System
  summary: "\nRetyurns the first element of the tuple\n"
  example: []
  syntax:
    content: public T1 Item1 { get; }
    parameters: []
    return:
      type: '{T1}'
    content.vb: Public ReadOnly Property Item1 As T1
  overload: System.Tuple2`2.Item1*
  nameWithType.vb: Tuple2(Of T1, T2).Item1
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Tuple2(Of T1, T2).Item1
- uid: System.Tuple2`2.Item2
  commentId: P:System.Tuple2`2.Item2
  id: Item2
  parent: System.Tuple2`2
  langs:
  - csharp
  - vb
  name: Item2
  nameWithType: Tuple2<T1, T2>.Item2
  fullName: System.Tuple2<T1, T2>.Item2
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/Core/Other/Tuple2_2.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Item2
    path: ../OpenSilverGit/src/Runtime/Runtime/Core/Other/Tuple2_2.cs
    startLine: 45
  assemblies:
  - OpenSilver
  namespace: System
  summary: "\nReturns the second element of the tuple\n"
  example: []
  syntax:
    content: public T2 Item2 { get; }
    parameters: []
    return:
      type: '{T2}'
    content.vb: Public ReadOnly Property Item2 As T2
  overload: System.Tuple2`2.Item2*
  nameWithType.vb: Tuple2(Of T1, T2).Item2
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Tuple2(Of T1, T2).Item2
- uid: System.Tuple2`2.#ctor(`0,`1)
  commentId: M:System.Tuple2`2.#ctor(`0,`1)
  id: '#ctor(`0,`1)'
  parent: System.Tuple2`2
  langs:
  - csharp
  - vb
  name: Tuple2(T1, T2)
  nameWithType: Tuple2<T1, T2>.Tuple2(T1, T2)
  fullName: System.Tuple2<T1, T2>.Tuple2(T1, T2)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/Core/Other/Tuple2_2.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/Core/Other/Tuple2_2.cs
    startLine: 55
  assemblies:
  - OpenSilver
  namespace: System
  summary: "\nCreate a new tuple value\n"
  example: []
  syntax:
    content: public Tuple2(T1 item1, T2 item2)
    parameters:
    - id: item1
      type: '{T1}'
      description: First element of the tuple
    - id: item2
      type: '{T2}'
      description: Second element of the tuple
    content.vb: Public Sub New(item1 As T1, item2 As T2)
  overload: System.Tuple2`2.#ctor*
  nameWithType.vb: Tuple2(Of T1, T2).Tuple2(T1, T2)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Tuple2(Of T1, T2).Tuple2(T1, T2)
- uid: System.Tuple2`2.ToString
  commentId: M:System.Tuple2`2.ToString
  id: ToString
  parent: System.Tuple2`2
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Tuple2<T1, T2>.ToString()
  fullName: System.Tuple2<T1, T2>.ToString()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/Core/Other/Tuple2_2.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ToString
    path: ../OpenSilverGit/src/Runtime/Runtime/Core/Other/Tuple2_2.cs
    startLine: 61
  assemblies:
  - OpenSilver
  namespace: System
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: System.Tuple2`2.ToString*
  nameWithType.vb: Tuple2(Of T1, T2).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Tuple2(Of T1, T2).ToString()
- uid: System.Tuple2`2.GetHashCode
  commentId: M:System.Tuple2`2.GetHashCode
  id: GetHashCode
  parent: System.Tuple2`2
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Tuple2<T1, T2>.GetHashCode()
  fullName: System.Tuple2<T1, T2>.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/Core/Other/Tuple2_2.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetHashCode
    path: ../OpenSilverGit/src/Runtime/Runtime/Core/Other/Tuple2_2.cs
    startLine: 66
  assemblies:
  - OpenSilver
  namespace: System
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: System.Tuple2`2.GetHashCode*
  nameWithType.vb: Tuple2(Of T1, T2).GetHashCode()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Tuple2(Of T1, T2).GetHashCode()
- uid: System.Tuple2`2.Equals(System.Object)
  commentId: M:System.Tuple2`2.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Tuple2`2
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Tuple2<T1, T2>.Equals(Object)
  fullName: System.Tuple2<T1, T2>.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/Core/Other/Tuple2_2.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Equals
    path: ../OpenSilverGit/src/Runtime/Runtime/Core/Other/Tuple2_2.cs
    startLine: 74
  assemblies:
  - OpenSilver
  namespace: System
  syntax:
    content: public override bool Equals(object o)
    parameters:
    - id: o
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(o As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: System.Tuple2`2.Equals*
  nameWithType.vb: Tuple2(Of T1, T2).Equals(Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Tuple2(Of T1, T2).Equals(System.Object)
- uid: System.Tuple2`2.Equals(System.Tuple2{`0,`1})
  commentId: M:System.Tuple2`2.Equals(System.Tuple2{`0,`1})
  id: Equals(System.Tuple2{`0,`1})
  parent: System.Tuple2`2
  langs:
  - csharp
  - vb
  name: Equals(Tuple2<T1, T2>)
  nameWithType: Tuple2<T1, T2>.Equals(Tuple2<T1, T2>)
  fullName: System.Tuple2<T1, T2>.Equals(System.Tuple2<T1, T2>)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/Core/Other/Tuple2_2.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Equals
    path: ../OpenSilverGit/src/Runtime/Runtime/Core/Other/Tuple2_2.cs
    startLine: 85
  assemblies:
  - OpenSilver
  namespace: System
  syntax:
    content: public bool Equals(Tuple2<T1, T2> other)
    parameters:
    - id: other
      type: System.Tuple2`2
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As Tuple2(Of T1, T2)) As Boolean
  overload: System.Tuple2`2.Equals*
  nameWithType.vb: Tuple2(Of T1, T2).Equals(Tuple2(Of T1, T2))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Tuple2(Of T1, T2).Equals(System.Tuple2(Of T1, T2))
  name.vb: Equals(Tuple2(Of T1, T2))
- uid: System.Tuple2`2.op_Equality(System.Tuple2{`0,`1},System.Tuple2{`0,`1})
  commentId: M:System.Tuple2`2.op_Equality(System.Tuple2{`0,`1},System.Tuple2{`0,`1})
  id: op_Equality(System.Tuple2{`0,`1},System.Tuple2{`0,`1})
  parent: System.Tuple2`2
  langs:
  - csharp
  - vb
  name: Equality(Tuple2<T1, T2>, Tuple2<T1, T2>)
  nameWithType: Tuple2<T1, T2>.Equality(Tuple2<T1, T2>, Tuple2<T1, T2>)
  fullName: System.Tuple2<T1, T2>.Equality(System.Tuple2<T1, T2>, System.Tuple2<T1, T2>)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/Core/Other/Tuple2_2.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Equality
    path: ../OpenSilverGit/src/Runtime/Runtime/Core/Other/Tuple2_2.cs
    startLine: 90
  assemblies:
  - OpenSilver
  namespace: System
  syntax:
    content: public static bool operator ==(Tuple2<T1, T2> a, Tuple2<T1, T2> b)
    parameters:
    - id: a
      type: System.Tuple2`2
    - id: b
      type: System.Tuple2`2
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(a As Tuple2(Of T1, T2), b As Tuple2(Of T1, T2)) As Boolean
  overload: System.Tuple2`2.op_Equality*
  nameWithType.vb: Tuple2(Of T1, T2).Equality(Tuple2(Of T1, T2), Tuple2(Of T1, T2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Tuple2(Of T1, T2).Equality(System.Tuple2(Of T1, T2), System.Tuple2(Of T1, T2))
  name.vb: Equality(Tuple2(Of T1, T2), Tuple2(Of T1, T2))
- uid: System.Tuple2`2.op_Inequality(System.Tuple2{`0,`1},System.Tuple2{`0,`1})
  commentId: M:System.Tuple2`2.op_Inequality(System.Tuple2{`0,`1},System.Tuple2{`0,`1})
  id: op_Inequality(System.Tuple2{`0,`1},System.Tuple2{`0,`1})
  parent: System.Tuple2`2
  langs:
  - csharp
  - vb
  name: Inequality(Tuple2<T1, T2>, Tuple2<T1, T2>)
  nameWithType: Tuple2<T1, T2>.Inequality(Tuple2<T1, T2>, Tuple2<T1, T2>)
  fullName: System.Tuple2<T1, T2>.Inequality(System.Tuple2<T1, T2>, System.Tuple2<T1, T2>)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/Core/Other/Tuple2_2.cs
      branch: releases/OpenSilver/1.1.0
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Inequality
    path: ../OpenSilverGit/src/Runtime/Runtime/Core/Other/Tuple2_2.cs
    startLine: 102
  assemblies:
  - OpenSilver
  namespace: System
  syntax:
    content: public static bool operator !=(Tuple2<T1, T2> a, Tuple2<T1, T2> b)
    parameters:
    - id: a
      type: System.Tuple2`2
    - id: b
      type: System.Tuple2`2
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(a As Tuple2(Of T1, T2), b As Tuple2(Of T1, T2)) As Boolean
  overload: System.Tuple2`2.op_Inequality*
  nameWithType.vb: Tuple2(Of T1, T2).Inequality(Tuple2(Of T1, T2), Tuple2(Of T1, T2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Tuple2(Of T1, T2).Inequality(System.Tuple2(Of T1, T2), System.Tuple2(Of T1, T2))
  name.vb: Inequality(Tuple2(Of T1, T2), Tuple2(Of T1, T2))
references:
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  parent: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  definition: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  name: ToJavaScriptObject()
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject()
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject()
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  commentId: M:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  isExternal: true
  name: ToJavaScriptObject(Object)
  nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject(Object)
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
  spec.csharp:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject(System.Object)
    name: ToJavaScriptObject
    nameWithType: ToJavaScriptObjectExtender.ToJavaScriptObject
    fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender.ToJavaScriptObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  commentId: T:ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
  parent: ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender.ToJavaScriptObjectExtender
- uid: ToJavaScriptObjectExtender
  commentId: N:ToJavaScriptObjectExtender
  name: ToJavaScriptObjectExtender
  nameWithType: ToJavaScriptObjectExtender
  fullName: ToJavaScriptObjectExtender
- uid: System.Tuple2`2.Item1*
  commentId: Overload:System.Tuple2`2.Item1
  name: Item1
  nameWithType: Tuple2<T1, T2>.Item1
  fullName: System.Tuple2<T1, T2>.Item1
  nameWithType.vb: Tuple2(Of T1, T2).Item1
  fullName.vb: System.Tuple2(Of T1, T2).Item1
- uid: '{T1}'
  commentId: '!:T1'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: System.Tuple2`2.Item2*
  commentId: Overload:System.Tuple2`2.Item2
  name: Item2
  nameWithType: Tuple2<T1, T2>.Item2
  fullName: System.Tuple2<T1, T2>.Item2
  nameWithType.vb: Tuple2(Of T1, T2).Item2
  fullName.vb: System.Tuple2(Of T1, T2).Item2
- uid: '{T2}'
  commentId: '!:T2'
  definition: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: System.Tuple2`2.#ctor*
  commentId: Overload:System.Tuple2`2.#ctor
  name: Tuple2
  nameWithType: Tuple2<T1, T2>.Tuple2
  fullName: System.Tuple2<T1, T2>.Tuple2
  nameWithType.vb: Tuple2(Of T1, T2).Tuple2
  fullName.vb: System.Tuple2(Of T1, T2).Tuple2
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Tuple2`2.ToString*
  commentId: Overload:System.Tuple2`2.ToString
  name: ToString
  nameWithType: Tuple2<T1, T2>.ToString
  fullName: System.Tuple2<T1, T2>.ToString
  nameWithType.vb: Tuple2(Of T1, T2).ToString
  fullName.vb: System.Tuple2(Of T1, T2).ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Tuple2`2.GetHashCode*
  commentId: Overload:System.Tuple2`2.GetHashCode
  name: GetHashCode
  nameWithType: Tuple2<T1, T2>.GetHashCode
  fullName: System.Tuple2<T1, T2>.GetHashCode
  nameWithType.vb: Tuple2(Of T1, T2).GetHashCode
  fullName.vb: System.Tuple2(Of T1, T2).GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Tuple2`2.Equals*
  commentId: Overload:System.Tuple2`2.Equals
  name: Equals
  nameWithType: Tuple2<T1, T2>.Equals
  fullName: System.Tuple2<T1, T2>.Equals
  nameWithType.vb: Tuple2(Of T1, T2).Equals
  fullName.vb: System.Tuple2(Of T1, T2).Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Tuple2`2
  commentId: T:System.Tuple2`2
  parent: System
  name: Tuple2<T1, T2>
  nameWithType: Tuple2<T1, T2>
  fullName: System.Tuple2<T1, T2>
  nameWithType.vb: Tuple2(Of T1, T2)
  fullName.vb: System.Tuple2(Of T1, T2)
  name.vb: Tuple2(Of T1, T2)
  spec.csharp:
  - uid: System.Tuple2`2
    name: Tuple2
    nameWithType: Tuple2
    fullName: System.Tuple2
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple2`2
    name: Tuple2
    nameWithType: Tuple2
    fullName: System.Tuple2
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Tuple2`2.op_Equality*
  commentId: Overload:System.Tuple2`2.op_Equality
  name: Equality
  nameWithType: Tuple2<T1, T2>.Equality
  fullName: System.Tuple2<T1, T2>.Equality
  nameWithType.vb: Tuple2(Of T1, T2).Equality
  fullName.vb: System.Tuple2(Of T1, T2).Equality
- uid: System.Tuple2`2.op_Inequality*
  commentId: Overload:System.Tuple2`2.op_Inequality
  name: Inequality
  nameWithType: Tuple2<T1, T2>.Inequality
  fullName: System.Tuple2<T1, T2>.Inequality
  nameWithType.vb: Tuple2(Of T1, T2).Inequality
  fullName.vb: System.Tuple2(Of T1, T2).Inequality
