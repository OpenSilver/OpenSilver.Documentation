### YamlMime:ManagedReference
items:
- uid: System.Windows.Vector
  commentId: T:System.Windows.Vector
  id: Vector
  parent: System.Windows
  children:
  - System.Windows.Vector.#ctor(System.Double,System.Double)
  - System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)
  - System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.Divide(System.Windows.Vector,System.Double)
  - System.Windows.Vector.Equals(System.Object)
  - System.Windows.Vector.Equals(System.Windows.Vector)
  - System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.GetHashCode
  - System.Windows.Vector.Length
  - System.Windows.Vector.LengthSquared
  - System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)
  - System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)
  - System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)
  - System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.Negate
  - System.Windows.Vector.Normalize
  - System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)
  - System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)
  - System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point
  - System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size
  - System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)
  - System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)
  - System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)
  - System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)
  - System.Windows.Vector.Parse(System.String)
  - System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)
  - System.Windows.Vector.ToString
  - System.Windows.Vector.ToString(System.IFormatProvider)
  - System.Windows.Vector.X
  - System.Windows.Vector.Y
  langs:
  - csharp
  - vb
  name: Vector
  nameWithType: Vector
  fullName: System.Windows.Vector
  type: Struct
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Vector
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 23
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nRepresents a displacement in 2-D space.\n"
  example: []
  syntax:
    content: >-
      [TypeConverter(typeof(VectorConverter))]

      public struct Vector : IFormattable
    content.vb: >-
      <TypeConverter(GetType(VectorConverter))>

      Public Structure Vector
          Implements IFormattable
  implements:
  - System.IFormattable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.ComponentModel.TypeConverterAttribute
    ctor: System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: System.Windows.VectorConverter
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Windows.Vector.#ctor(System.Double,System.Double)
  commentId: M:System.Windows.Vector.#ctor(System.Double,System.Double)
  id: '#ctor(System.Double,System.Double)'
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Vector(Double, Double)
  nameWithType: Vector.Vector(Double, Double)
  fullName: System.Windows.Vector.Vector(System.Double, System.Double)
  type: Constructor
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: .ctor
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 38
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nInitializes a new instance of the <xref href=\"System.Windows.Vector\" data-throw-if-not-resolved=\"false\"></xref> structure.\n"
  example: []
  syntax:
    content: public Vector(double x, double y)
    parameters:
    - id: x
      type: System.Double
      description: "\nThe <xref href=\"System.Windows.Vector.X\" data-throw-if-not-resolved=\"false\"></xref> offset of the new <xref href=\"System.Windows.Vector\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    - id: y
      type: System.Double
      description: "\nThe <xref href=\"System.Windows.Vector.Y\" data-throw-if-not-resolved=\"false\"></xref> offset of the new <xref href=\"System.Windows.Vector\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public Sub New(x As Double, y As Double)
  overload: System.Windows.Vector.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.Vector.LengthSquared
  commentId: P:System.Windows.Vector.LengthSquared
  id: LengthSquared
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: LengthSquared
  nameWithType: Vector.LengthSquared
  fullName: System.Windows.Vector.LengthSquared
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: LengthSquared
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 50
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets the square of the length of this vector.\n"
  example: []
  syntax:
    content: public readonly double LengthSquared { get; }
    parameters: []
    return:
      type: System.Double
      description: "\nThe square of the <xref href=\"System.Windows.Vector.Length\" data-throw-if-not-resolved=\"false\"></xref> of this vector.\n"
    content.vb: Public ReadOnly Property LengthSquared As Double
  overload: System.Windows.Vector.LengthSquared*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Windows.Vector.Length
  commentId: P:System.Windows.Vector.Length
  id: Length
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: Vector.Length
  fullName: System.Windows.Vector.Length
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Length
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 58
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets the length of this vector.\n"
  example: []
  syntax:
    content: public readonly double Length { get; }
    parameters: []
    return:
      type: System.Double
      description: "\nThe length of this vector.\n"
    content.vb: Public ReadOnly Property Length As Double
  overload: System.Windows.Vector.Length*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Windows.Vector.X
  commentId: P:System.Windows.Vector.X
  id: X
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Vector.X
  fullName: System.Windows.Vector.X
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: X
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 66
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets the <xref href=\"System.Windows.Vector.X\" data-throw-if-not-resolved=\"false\"></xref> component of this vector.\n"
  example: []
  syntax:
    content: public double X { get; set; }
    parameters: []
    return:
      type: System.Double
      description: "\nThe <xref href=\"System.Windows.Vector.X\" data-throw-if-not-resolved=\"false\"></xref> component of this vector. The default value is 0.\n"
    content.vb: Public Property X As Double
  overload: System.Windows.Vector.X*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.Vector.Y
  commentId: P:System.Windows.Vector.Y
  id: Y
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Vector.Y
  fullName: System.Windows.Vector.Y
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Y
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 78
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nGets or sets the <xref href=\"System.Windows.Vector.Y\" data-throw-if-not-resolved=\"false\"></xref> component of this vector.\n"
  example: []
  syntax:
    content: public double Y { get; set; }
    parameters: []
    return:
      type: System.Double
      description: "\nThe <xref href=\"System.Windows.Vector.Y\" data-throw-if-not-resolved=\"false\"></xref> component of this vector. The default value is 0.\n"
    content.vb: Public Property Y As Double
  overload: System.Windows.Vector.Y*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)
  commentId: M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)
  id: Add(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Add(Vector, Vector)
  nameWithType: Vector.Add(Vector, Vector)
  fullName: System.Windows.Vector.Add(System.Windows.Vector, System.Windows.Vector)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Add
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 96
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nAdds two vectors and returns the result as a <xref href=\"System.Windows.Vector\" data-throw-if-not-resolved=\"false\"></xref> structure.\n"
  example: []
  syntax:
    content: public static Vector Add(Vector vector1, Vector vector2)
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "\nThe first vector to add.\n"
    - id: vector2
      type: System.Windows.Vector
      description: "\nThe second vector to add.\n"
    return:
      type: System.Windows.Vector
      description: "\nThe sum of vector1 and vector2.\n"
    content.vb: Public Shared Function Add(vector1 As Vector, vector2 As Vector) As Vector
  overload: System.Windows.Vector.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)
  commentId: M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)
  id: Add(System.Windows.Vector,System.Windows.Point)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Add(Vector, Point)
  nameWithType: Vector.Add(Vector, Point)
  fullName: System.Windows.Vector.Add(System.Windows.Vector, System.Windows.Point)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Add
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 110
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nTranslates the specified point by the specified vector and returns the resulting point.\n"
  example: []
  syntax:
    content: public static Point Add(Vector vector, Point point)
    parameters:
    - id: vector
      type: System.Windows.Vector
      description: "\nThe amount to translate the specified point.\n"
    - id: point
      type: System.Windows.Point
      description: "\nThe point to translate.\n"
    return:
      type: System.Windows.Point
      description: "\nThe result of translating point by vector.\n"
    content.vb: Public Shared Function Add(vector As Vector, point As Point) As Point
  overload: System.Windows.Vector.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)
  commentId: M:System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)
  id: AngleBetween(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: AngleBetween(Vector, Vector)
  nameWithType: Vector.AngleBetween(Vector, Vector)
  fullName: System.Windows.Vector.AngleBetween(System.Windows.Vector, System.Windows.Vector)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: AngleBetween
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 124
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nRetrieves the angle, expressed in degrees, between the two specified vectors.\n"
  example: []
  syntax:
    content: public static double AngleBetween(Vector vector1, Vector vector2)
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "\nThe first vector to evaluate.\n"
    - id: vector2
      type: System.Windows.Vector
      description: "\nThe second vector to evaluate.\n"
    return:
      type: System.Double
      description: "\nThe angle, in degrees, between vector1 and vector2.\n"
    content.vb: Public Shared Function AngleBetween(vector1 As Vector, vector2 As Vector) As Double
  overload: System.Windows.Vector.AngleBetween*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)
  commentId: M:System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)
  id: CrossProduct(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: CrossProduct(Vector, Vector)
  nameWithType: Vector.CrossProduct(Vector, Vector)
  fullName: System.Windows.Vector.CrossProduct(System.Windows.Vector, System.Windows.Vector)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: CrossProduct
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 145
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nCalculates the cross product of two vectors.\n"
  example: []
  syntax:
    content: public static double CrossProduct(Vector vector1, Vector vector2)
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "\nThe first vector to evaluate.\n"
    - id: vector2
      type: System.Windows.Vector
      description: "\nThe second vector to evaluate.\n"
    return:
      type: System.Double
      description: "\nThe cross product of vector1 and vector2. The following formula is used to calculate\nthe cross product: (Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)\n"
    content.vb: Public Shared Function CrossProduct(vector1 As Vector, vector2 As Vector) As Double
  overload: System.Windows.Vector.CrossProduct*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)
  commentId: M:System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)
  id: Determinant(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Determinant(Vector, Vector)
  nameWithType: Vector.Determinant(Vector, Vector)
  fullName: System.Windows.Vector.Determinant(System.Windows.Vector, System.Windows.Vector)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Determinant
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 159
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nCalculates the determinant of two vectors.\n"
  example: []
  syntax:
    content: public static double Determinant(Vector vector1, Vector vector2)
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "\nThe first vector to evaluate.\n"
    - id: vector2
      type: System.Windows.Vector
      description: "\nThe second vector to evaluate.\n"
    return:
      type: System.Double
      description: "\nThe determinant of vector1 and vector2.\n"
    content.vb: Public Shared Function Determinant(vector1 As Vector, vector2 As Vector) As Double
  overload: System.Windows.Vector.Determinant*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.Divide(System.Windows.Vector,System.Double)
  commentId: M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)
  id: Divide(System.Windows.Vector,System.Double)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Divide(Vector, Double)
  nameWithType: Vector.Divide(Vector, Double)
  fullName: System.Windows.Vector.Divide(System.Windows.Vector, System.Double)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Divide
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 173
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nDivides the specified vector by the specified scalar and returns the result as a <xref href=\"System.Windows.Vector\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Vector Divide(Vector vector, double scalar)
    parameters:
    - id: vector
      type: System.Windows.Vector
      description: "\nThe vector structure to divide.\n"
    - id: scalar
      type: System.Double
      description: "\nThe amount by which vector is divided.\n"
    return:
      type: System.Windows.Vector
      description: "\nThe result of dividing vector by scalar.\n"
    content.vb: Public Shared Function Divide(vector As Vector, scalar As Double) As Vector
  overload: System.Windows.Vector.Divide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)
  commentId: M:System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)
  id: Equals(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Equals(Vector, Vector)
  nameWithType: Vector.Equals(Vector, Vector)
  fullName: System.Windows.Vector.Equals(System.Windows.Vector, System.Windows.Vector)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Equals
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 188
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nCompares the two specified vectors for equality.\n"
  example: []
  syntax:
    content: public static bool Equals(Vector vector1, Vector vector2)
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "\nThe first vector to compare.\n"
    - id: vector2
      type: System.Windows.Vector
      description: "\nThe second vector to compare.\n"
    return:
      type: System.Boolean
      description: "\ntrue if the <xref href=\"System.Windows.Vector.X\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Windows.Vector.Y\" data-throw-if-not-resolved=\"false\"></xref> components of\nvector1 and vector2 are equal; otherwise, false.\n"
    content.vb: Public Shared Function Equals(vector1 As Vector, vector2 As Vector) As Boolean
  overload: System.Windows.Vector.Equals*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)
  commentId: M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)
  id: Multiply(System.Windows.Vector,System.Windows.Media.Matrix)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Multiply(Vector, Matrix)
  nameWithType: Vector.Multiply(Vector, Matrix)
  fullName: System.Windows.Vector.Multiply(System.Windows.Vector, System.Windows.Media.Matrix)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Multiply
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 202
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nTransforms the coordinate space of the specified vector using the specified <xref href=\"System.Windows.Media.Matrix\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Vector Multiply(Vector vector, Matrix matrix)
    parameters:
    - id: vector
      type: System.Windows.Vector
      description: "\nThe vector structure to transform.\n"
    - id: matrix
      type: System.Windows.Media.Matrix
      description: "\nThe transformation to apply to vector.\n"
    return:
      type: System.Windows.Vector
      description: "\nThe result of transforming vector by matrix.\n"
    content.vb: Public Shared Function Multiply(vector As Vector, matrix As Matrix) As Vector
  overload: System.Windows.Vector.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)
  commentId: M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)
  id: Multiply(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Multiply(Vector, Vector)
  nameWithType: Vector.Multiply(Vector, Vector)
  fullName: System.Windows.Vector.Multiply(System.Windows.Vector, System.Windows.Vector)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Multiply
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 217
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nCalculates the dot product of the two specified vectors and returns the result as a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static double Multiply(Vector vector1, Vector vector2)
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "\nThe first vector to multiply.\n"
    - id: vector2
      type: System.Windows.Vector
      description: "\nThe second vector structure to multiply.\n"
    return:
      type: System.Double
      description: "\nA <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> containing the scalar dot product of vector1 and vector2, which is calculated using the \nfollowing formula: (vector1.X * vector2.X) + (vector1.Y * vector2.Y)\n"
    content.vb: Public Shared Function Multiply(vector1 As Vector, vector2 As Vector) As Double
  overload: System.Windows.Vector.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)
  commentId: M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)
  id: Multiply(System.Double,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Multiply(Double, Vector)
  nameWithType: Vector.Multiply(Double, Vector)
  fullName: System.Windows.Vector.Multiply(System.Double, System.Windows.Vector)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Multiply
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 231
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nMultiplies the specified scalar by the specified vector and returns the resulting <xref href=\"System.Windows.Vector\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Vector Multiply(double scalar, Vector vector)
    parameters:
    - id: scalar
      type: System.Double
      description: "\nThe scalar to multiply.\n"
    - id: vector
      type: System.Windows.Vector
      description: "\nThe vector to multiply.\n"
    return:
      type: System.Windows.Vector
      description: "\nThe result of multiplying scalar and vector.\n"
    content.vb: Public Shared Function Multiply(scalar As Double, vector As Vector) As Vector
  overload: System.Windows.Vector.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)
  commentId: M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)
  id: Multiply(System.Windows.Vector,System.Double)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Multiply(Vector, Double)
  nameWithType: Vector.Multiply(Vector, Double)
  fullName: System.Windows.Vector.Multiply(System.Windows.Vector, System.Double)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Multiply
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 245
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nMultiplies the specified vector by the specified scalar and returns the resulting <xref href=\"System.Windows.Vector\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Vector Multiply(Vector vector, double scalar)
    parameters:
    - id: vector
      type: System.Windows.Vector
      description: "\nThe vector to multiply.\n"
    - id: scalar
      type: System.Double
      description: "\nThe scalar to multiply.\n"
    return:
      type: System.Windows.Vector
      description: "\nThe result of multiplying vector and scalar.\n"
    content.vb: Public Shared Function Multiply(vector As Vector, scalar As Double) As Vector
  overload: System.Windows.Vector.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.Parse(System.String)
  commentId: M:System.Windows.Vector.Parse(System.String)
  id: Parse(System.String)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Parse(String)
  nameWithType: Vector.Parse(String)
  fullName: System.Windows.Vector.Parse(System.String)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Parse
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 256
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nConverts a string representation of a vector into the equivalent <xref href=\"System.Windows.Vector\" data-throw-if-not-resolved=\"false\"></xref> structure.\n"
  example: []
  syntax:
    content: public static Vector Parse(string source)
    parameters:
    - id: source
      type: System.String
      description: "\nThe string representation of the vector.\n"
    return:
      type: System.Windows.Vector
      description: "\nThe equivalent <xref href=\"System.Windows.Vector\" data-throw-if-not-resolved=\"false\"></xref> structure.\n"
    content.vb: Public Shared Function Parse(source As String) As Vector
  overload: System.Windows.Vector.Parse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)
  commentId: M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)
  id: Subtract(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Subtract(Vector, Vector)
  nameWithType: Vector.Subtract(Vector, Vector)
  fullName: System.Windows.Vector.Subtract(System.Windows.Vector, System.Windows.Vector)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Subtract
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 284
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nSubtracts the specified vector from another specified vector.\n"
  example: []
  syntax:
    content: public static Vector Subtract(Vector vector1, Vector vector2)
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "\nThe vector from which vector2 is subtracted.\n"
    - id: vector2
      type: System.Windows.Vector
      description: "\nThe vector to subtract from vector1.\n"
    return:
      type: System.Windows.Vector
      description: "\nThe difference between vector1 and vector2.\n"
    content.vb: Public Shared Function Subtract(vector1 As Vector, vector2 As Vector) As Vector
  overload: System.Windows.Vector.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.Equals(System.Windows.Vector)
  commentId: M:System.Windows.Vector.Equals(System.Windows.Vector)
  id: Equals(System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Equals(Vector)
  nameWithType: Vector.Equals(Vector)
  fullName: System.Windows.Vector.Equals(System.Windows.Vector)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Equals
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 295
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nCompares two vectors for equality.\n"
  example: []
  syntax:
    content: public bool Equals(Vector value)
    parameters:
    - id: value
      type: System.Windows.Vector
      description: "\nThe vector to compare with this vector.\n"
    return:
      type: System.Boolean
      description: "\ntrue if value has the same <xref href=\"System.Windows.Vector.X\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Windows.Vector.Y\" data-throw-if-not-resolved=\"false\"></xref> values as this vector; otherwise, false.\n"
    content.vb: Public Function Equals(value As Vector) As Boolean
  overload: System.Windows.Vector.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.Vector.Equals(System.Object)
  commentId: M:System.Windows.Vector.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Vector.Equals(Object)
  fullName: System.Windows.Vector.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Equals
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 308
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nDetermines whether the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is a <xref href=\"System.Windows.Vector\" data-throw-if-not-resolved=\"false\"></xref> structure\nand, if it is, whether it has the same <xref href=\"System.Windows.Vector.X\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Windows.Vector.Y\" data-throw-if-not-resolved=\"false\"></xref> values as this vector.\n"
  example: []
  syntax:
    content: public override bool Equals(object o)
    parameters:
    - id: o
      type: System.Object
      description: "\nThe vector to compare.\n"
    return:
      type: System.Boolean
      description: "\ntrue if o is a <xref href=\"System.Windows.Vector\" data-throw-if-not-resolved=\"false\"></xref> and has the same <xref href=\"System.Windows.Vector.X\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Windows.Vector.Y\" data-throw-if-not-resolved=\"false\"></xref> values \nas this vector; otherwise, false.\n"
    content.vb: Public Overrides Function Equals(o As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: System.Windows.Vector.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Windows.Vector.GetHashCode
  commentId: M:System.Windows.Vector.GetHashCode
  id: GetHashCode
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Vector.GetHashCode()
  fullName: System.Windows.Vector.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetHashCode
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 316
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nReturns the hash code for this vector.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: "\nThe hash code for this instance.\n"
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: System.Windows.Vector.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Windows.Vector.Negate
  commentId: M:System.Windows.Vector.Negate
  id: Negate
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Negate()
  nameWithType: Vector.Negate()
  fullName: System.Windows.Vector.Negate()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Negate
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 321
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nNegates this vector. The vector has the same magnitude as before, but its direction is now opposite.\n"
  example: []
  syntax:
    content: public void Negate()
    content.vb: Public Sub Negate
  overload: System.Windows.Vector.Negate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.Vector.Normalize
  commentId: M:System.Windows.Vector.Normalize
  id: Normalize
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Normalize()
  nameWithType: Vector.Normalize()
  fullName: System.Windows.Vector.Normalize()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Normalize
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 330
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nNormalizes this vector.\n"
  example: []
  syntax:
    content: public void Normalize()
    content.vb: Public Sub Normalize
  overload: System.Windows.Vector.Normalize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.Vector.ToString
  commentId: M:System.Windows.Vector.ToString
  id: ToString
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Vector.ToString()
  fullName: System.Windows.Vector.ToString()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ToString
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 343
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nReturns the string representation of this <xref href=\"System.Windows.Vector\" data-throw-if-not-resolved=\"false\"></xref> structure.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nA string that represents the <xref href=\"System.Windows.Vector.X\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Windows.Vector.Y\" data-throw-if-not-resolved=\"false\"></xref> values of this <xref href=\"System.Windows.Vector\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: System.Windows.Vector.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Windows.Vector.ToString(System.IFormatProvider)
  commentId: M:System.Windows.Vector.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: ToString(IFormatProvider)
  nameWithType: Vector.ToString(IFormatProvider)
  fullName: System.Windows.Vector.ToString(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ToString
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 355
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nReturns the string representation of this <xref href=\"System.Windows.Vector\" data-throw-if-not-resolved=\"false\"></xref> structure with the specified \nformatting information.\n"
  example: []
  syntax:
    content: public string ToString(IFormatProvider provider)
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\nThe culture-specific formatting information.\n"
    return:
      type: System.String
      description: "\nA string that represents the <xref href=\"System.Windows.Vector.X\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Windows.Vector.Y\" data-throw-if-not-resolved=\"false\"></xref> values of this <xref href=\"System.Windows.Vector\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public Function ToString(provider As IFormatProvider) As String
  overload: System.Windows.Vector.ToString*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)
  commentId: M:System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)
  id: System#IFormattable#ToString(System.String,System.IFormatProvider)
  isEii: true
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: IFormattable.ToString(String, IFormatProvider)
  nameWithType: Vector.IFormattable.ToString(String, IFormatProvider)
  fullName: System.Windows.Vector.System.IFormattable.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.IFormattable.ToString
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 366
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nCreates a string representation of this object based on the format string\nand IFormatProvider passed in.\nIf the provider is null, the CurrentCulture is used.\nSee the documentation for IFormattable for more information.\n"
  example: []
  syntax:
    content: string IFormattable.ToString(string format, IFormatProvider provider)
    parameters:
    - id: format
      type: System.String
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.String
      description: "\nA string representation of this object.\n"
    content.vb: Function System.IFormattable.ToString(format As String, provider As IFormatProvider) As String Implements IFormattable.ToString
  overload: System.Windows.Vector.System#IFormattable#ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  nameWithType.vb: Vector.System.IFormattable.ToString(String, IFormatProvider)
  name.vb: System.IFormattable.ToString(String, IFormatProvider)
- uid: System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)
  commentId: M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)
  id: op_Addition(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Addition(Vector, Vector)
  nameWithType: Vector.Addition(Vector, Vector)
  fullName: System.Windows.Vector.Addition(System.Windows.Vector, System.Windows.Vector)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Addition
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 400
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nAdds two vectors and returns the result as a vector.\n"
  example: []
  syntax:
    content: public static Vector operator +(Vector vector1, Vector vector2)
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "\nThe first vector to add.\n"
    - id: vector2
      type: System.Windows.Vector
      description: "\nThe second vector to add.\n"
    return:
      type: System.Windows.Vector
      description: "\nThe sum of vector1 and vector2.\n"
    content.vb: Public Shared Operator +(vector1 As Vector, vector2 As Vector) As Vector
  overload: System.Windows.Vector.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)
  commentId: M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)
  id: op_Addition(System.Windows.Vector,System.Windows.Point)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Addition(Vector, Point)
  nameWithType: Vector.Addition(Vector, Point)
  fullName: System.Windows.Vector.Addition(System.Windows.Vector, System.Windows.Point)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Addition
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 414
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nTranslates a point by the specified vector and returns the resulting point.\n"
  example: []
  syntax:
    content: public static Point operator +(Vector vector, Point point)
    parameters:
    - id: vector
      type: System.Windows.Vector
      description: "\n"
    - id: point
      type: System.Windows.Point
      description: "\nThe point to translate.\n"
    return:
      type: System.Windows.Point
      description: "\nThe result of translating point by vector.\n"
    content.vb: Public Shared Operator +(vector As Vector, point As Point) As Point
  overload: System.Windows.Vector.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)
  commentId: M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)
  id: op_UnaryNegation(System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: UnaryNegation(Vector)
  nameWithType: Vector.UnaryNegation(Vector)
  fullName: System.Windows.Vector.UnaryNegation(System.Windows.Vector)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_UnaryNegation
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 426
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nNegates the specified vector.\n"
  example: []
  syntax:
    content: public static Vector operator -(Vector vector)
    parameters:
    - id: vector
      type: System.Windows.Vector
      description: "\nThe vector to negate.\n"
    return:
      type: System.Windows.Vector
      description: "\nA vector with <xref href=\"System.Windows.Vector.X\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Windows.Vector.Y\" data-throw-if-not-resolved=\"false\"></xref> values opposite of the <xref href=\"System.Windows.Vector.X\" data-throw-if-not-resolved=\"false\"></xref> \nand <xref href=\"System.Windows.Vector.Y\" data-throw-if-not-resolved=\"false\"></xref> values of vector.\n"
    content.vb: Public Shared Operator -(vector As Vector) As Vector
  overload: System.Windows.Vector.op_UnaryNegation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)
  commentId: M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)
  id: op_Subtraction(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Subtraction(Vector, Vector)
  nameWithType: Vector.Subtraction(Vector, Vector)
  fullName: System.Windows.Vector.Subtraction(System.Windows.Vector, System.Windows.Vector)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Subtraction
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 440
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nSubtracts one specified vector from another.\n"
  example: []
  syntax:
    content: public static Vector operator -(Vector vector1, Vector vector2)
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "\nThe vector from which vector2 is subtracted.\n"
    - id: vector2
      type: System.Windows.Vector
      description: "\nThe vector to subtract from vector1.\n"
    return:
      type: System.Windows.Vector
      description: "\nThe difference between vector1 and vector2.\n"
    content.vb: Public Shared Operator -(vector1 As Vector, vector2 As Vector) As Vector
  overload: System.Windows.Vector.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)
  commentId: M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)
  id: op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Multiply(Vector, Matrix)
  nameWithType: Vector.Multiply(Vector, Matrix)
  fullName: System.Windows.Vector.Multiply(System.Windows.Vector, System.Windows.Media.Matrix)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Multiply
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 454
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nTransforms the coordinate space of the specified vector using the specified <xref href=\"System.Windows.Media.Matrix\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Vector operator *(Vector vector, Matrix matrix)
    parameters:
    - id: vector
      type: System.Windows.Vector
      description: "\nThe vector to transform.\n"
    - id: matrix
      type: System.Windows.Media.Matrix
      description: "\nThe transformation to apply to vector.\n"
    return:
      type: System.Windows.Vector
      description: "\nThe result of transforming vector by matrix.\n"
    content.vb: Public Shared Operator *(vector As Vector, matrix As Matrix) As Vector
  overload: System.Windows.Vector.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)
  commentId: M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)
  id: op_Multiply(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Multiply(Vector, Vector)
  nameWithType: Vector.Multiply(Vector, Vector)
  fullName: System.Windows.Vector.Multiply(System.Windows.Vector, System.Windows.Vector)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Multiply
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 469
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nCalculates the dot product of the two specified vector structures and returns the result as a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static double operator *(Vector vector1, Vector vector2)
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "\nThe first vector to multiply.\n"
    - id: vector2
      type: System.Windows.Vector
      description: "\nThe second vector to multiply.\n"
    return:
      type: System.Double
      description: "\nReturns a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> containing the scalar dot product of vector1 and vector2, which is calculated using \nthe following formula: vector1.X * vector2.X + vector1.Y * vector2.Y\n"
    content.vb: Public Shared Operator *(vector1 As Vector, vector2 As Vector) As Double
  overload: System.Windows.Vector.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)
  commentId: M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)
  id: op_Multiply(System.Double,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Multiply(Double, Vector)
  nameWithType: Vector.Multiply(Double, Vector)
  fullName: System.Windows.Vector.Multiply(System.Double, System.Windows.Vector)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Multiply
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 483
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nMultiplies the specified scalar by the specified vector and returns the resulting vector.\n"
  example: []
  syntax:
    content: public static Vector operator *(double scalar, Vector vector)
    parameters:
    - id: scalar
      type: System.Double
      description: "\nThe scalar to multiply.\n"
    - id: vector
      type: System.Windows.Vector
      description: "\nThe vector to multiply.\n"
    return:
      type: System.Windows.Vector
      description: "\nThe result of multiplying scalar and vector.\n"
    content.vb: Public Shared Operator *(scalar As Double, vector As Vector) As Vector
  overload: System.Windows.Vector.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)
  commentId: M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)
  id: op_Multiply(System.Windows.Vector,System.Double)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Multiply(Vector, Double)
  nameWithType: Vector.Multiply(Vector, Double)
  fullName: System.Windows.Vector.Multiply(System.Windows.Vector, System.Double)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Multiply
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 497
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nMultiplies the specified vector by the specified scalar and returns the resulting vector.\n"
  example: []
  syntax:
    content: public static Vector operator *(Vector vector, double scalar)
    parameters:
    - id: vector
      type: System.Windows.Vector
      description: "\nThe vector to multiply.\n"
    - id: scalar
      type: System.Double
      description: "\nThe scalar to multiply.\n"
    return:
      type: System.Windows.Vector
      description: "\nThe result of multiplying vector and scalar.\n"
    content.vb: Public Shared Operator *(vector As Vector, scalar As Double) As Vector
  overload: System.Windows.Vector.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)
  commentId: M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)
  id: op_Division(System.Windows.Vector,System.Double)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Division(Vector, Double)
  nameWithType: Vector.Division(Vector, Double)
  fullName: System.Windows.Vector.Division(System.Windows.Vector, System.Double)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Division
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 511
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nDivides the specified vector by the specified scalar and returns the resulting vector.\n"
  example: []
  syntax:
    content: public static Vector operator /(Vector vector, double scalar)
    parameters:
    - id: vector
      type: System.Windows.Vector
      description: "\nThe vector to divide.\n"
    - id: scalar
      type: System.Double
      description: "\nThe scalar by which vector will be divided.\n"
    return:
      type: System.Windows.Vector
      description: "\nThe result of dividing vector by scalar.\n"
    content.vb: Public Shared Operator /(vector As Vector, scalar As Double) As Vector
  overload: System.Windows.Vector.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)
  commentId: M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)
  id: op_Equality(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Equality(Vector, Vector)
  nameWithType: Vector.Equality(Vector, Vector)
  fullName: System.Windows.Vector.Equality(System.Windows.Vector, System.Windows.Vector)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Equality
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 525
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nCompares two vectors for equality.\n"
  example: []
  syntax:
    content: public static bool operator ==(Vector vector1, Vector vector2)
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "\nThe first vector to compare.\n"
    - id: vector2
      type: System.Windows.Vector
      description: "\nThe second vector to compare.\n"
    return:
      type: System.Boolean
      description: "\ntrue if the <xref href=\"System.Windows.Vector.X\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Windows.Vector.Y\" data-throw-if-not-resolved=\"false\"></xref> components of vector1 and vector2 are equal; otherwise, false.\n"
    content.vb: Public Shared Operator =(vector1 As Vector, vector2 As Vector) As Boolean
  overload: System.Windows.Vector.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)
  commentId: M:System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)
  id: op_Inequality(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Inequality(Vector, Vector)
  nameWithType: Vector.Inequality(Vector, Vector)
  fullName: System.Windows.Vector.Inequality(System.Windows.Vector, System.Windows.Vector)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Inequality
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 539
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nCompares two vectors for inequality.\n"
  example: []
  syntax:
    content: public static bool operator !=(Vector vector1, Vector vector2)
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "\nThe first vector to compare.\n"
    - id: vector2
      type: System.Windows.Vector
      description: "\nThe second vector to compare.\n"
    return:
      type: System.Boolean
      description: "\ntrue if the <xref href=\"System.Windows.Vector.X\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Windows.Vector.Y\" data-throw-if-not-resolved=\"false\"></xref> components of vector1 and vector2 are different; otherwise, false.\n"
    content.vb: Public Shared Operator <>(vector1 As Vector, vector2 As Vector) As Boolean
  overload: System.Windows.Vector.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size
  commentId: M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size
  id: op_Explicit(System.Windows.Vector)~System.Windows.Size
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Explicit(Vector to Size)
  nameWithType: Vector.Explicit(Vector to Size)
  fullName: System.Windows.Vector.Explicit(System.Windows.Vector to System.Windows.Size)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Explicit
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 552
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nCreates a <xref href=\"System.Windows.Size\" data-throw-if-not-resolved=\"false\"></xref> from the offsets of this vector.\n"
  example: []
  syntax:
    content: public static explicit operator Size(Vector vector)
    parameters:
    - id: vector
      type: System.Windows.Vector
      description: "\nThe vector to convert.\n"
    return:
      type: System.Windows.Size
      description: "\nA <xref href=\"System.Windows.Size\" data-throw-if-not-resolved=\"false\"></xref> with a <xref href=\"System.Windows.Size.Width\" data-throw-if-not-resolved=\"false\"></xref> equal to the absolute value of this vector&apos;s \n<xref href=\"System.Windows.Vector.X\" data-throw-if-not-resolved=\"false\"></xref> property and a <xref href=\"System.Windows.Size.Height\" data-throw-if-not-resolved=\"false\"></xref> equal to the absolute value of this vector&apos;s \n<xref href=\"System.Windows.Vector.Y\" data-throw-if-not-resolved=\"false\"></xref> property.\n"
    content.vb: Public Shared Narrowing Operator CType(vector As Vector) As Size
  overload: System.Windows.Vector.op_Explicit*
  nameWithType.vb: Vector.Narrowing(Vector to Size)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Windows.Vector.Narrowing(System.Windows.Vector to System.Windows.Size)
  name.vb: Narrowing(Vector to Size)
- uid: System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point
  commentId: M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point
  id: op_Explicit(System.Windows.Vector)~System.Windows.Point
  parent: System.Windows.Vector
  langs:
  - csharp
  - vb
  name: Explicit(Vector to Point)
  nameWithType: Vector.Explicit(Vector to Point)
  fullName: System.Windows.Vector.Explicit(System.Windows.Vector to System.Windows.Point)
  type: Operator
  source:
    remote:
      path: src/Runtime/Runtime/System.Windows/Vector.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: op_Explicit
    path: ../OpenSilverGit/src/Runtime/Runtime/System.Windows/Vector.cs
    startLine: 564
  assemblies:
  - OpenSilver
  namespace: System.Windows
  summary: "\nCreates a <xref href=\"System.Windows.Point\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Windows.Vector.X\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Windows.Vector.Y\" data-throw-if-not-resolved=\"false\"></xref> values of this vector.\n"
  example: []
  syntax:
    content: public static explicit operator Point(Vector vector)
    parameters:
    - id: vector
      type: System.Windows.Vector
      description: "\nThe vector to convert.\n"
    return:
      type: System.Windows.Point
      description: "\nA point with <xref href=\"System.Windows.Point.X\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Windows.Point.Y\" data-throw-if-not-resolved=\"false\"></xref> coordinate values equal to the <xref href=\"System.Windows.Vector.X\" data-throw-if-not-resolved=\"false\"></xref> \nand <xref href=\"System.Windows.Vector.Y\" data-throw-if-not-resolved=\"false\"></xref> offset values of vector.\n"
    content.vb: Public Shared Narrowing Operator CType(vector As Vector) As Point
  overload: System.Windows.Vector.op_Explicit*
  nameWithType.vb: Vector.Narrowing(Vector to Point)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Windows.Vector.Narrowing(System.Windows.Vector to System.Windows.Point)
  name.vb: Narrowing(Vector to Point)
references:
- uid: System.Windows
  commentId: N:System.Windows
  name: System.Windows
  nameWithType: System.Windows
  fullName: System.Windows
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Vector
  commentId: T:System.Windows.Vector
  parent: System.Windows
  name: Vector
  nameWithType: Vector
  fullName: System.Windows.Vector
- uid: System.Windows.Vector.X
  commentId: P:System.Windows.Vector.X
  isExternal: true
- uid: System.Windows.Vector.Y
  commentId: P:System.Windows.Vector.Y
  isExternal: true
- uid: System.Windows.Vector.#ctor*
  commentId: Overload:System.Windows.Vector.#ctor
  name: Vector
  nameWithType: Vector.Vector
  fullName: System.Windows.Vector.Vector
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.Vector.Length
  commentId: P:System.Windows.Vector.Length
  isExternal: true
- uid: System.Windows.Vector.LengthSquared*
  commentId: Overload:System.Windows.Vector.LengthSquared
  name: LengthSquared
  nameWithType: Vector.LengthSquared
  fullName: System.Windows.Vector.LengthSquared
- uid: System.Windows.Vector.Length*
  commentId: Overload:System.Windows.Vector.Length
  name: Length
  nameWithType: Vector.Length
  fullName: System.Windows.Vector.Length
- uid: System.Windows.Vector.X*
  commentId: Overload:System.Windows.Vector.X
  name: X
  nameWithType: Vector.X
  fullName: System.Windows.Vector.X
- uid: System.Windows.Vector.Y*
  commentId: Overload:System.Windows.Vector.Y
  name: Y
  nameWithType: Vector.Y
  fullName: System.Windows.Vector.Y
- uid: System.Windows.Vector.Add*
  commentId: Overload:System.Windows.Vector.Add
  name: Add
  nameWithType: Vector.Add
  fullName: System.Windows.Vector.Add
- uid: System.Windows.Point
  commentId: T:System.Windows.Point
  parent: System.Windows
  name: Point
  nameWithType: Point
  fullName: System.Windows.Point
- uid: System.Windows.Vector.AngleBetween*
  commentId: Overload:System.Windows.Vector.AngleBetween
  name: AngleBetween
  nameWithType: Vector.AngleBetween
  fullName: System.Windows.Vector.AngleBetween
- uid: System.Windows.Vector.CrossProduct*
  commentId: Overload:System.Windows.Vector.CrossProduct
  name: CrossProduct
  nameWithType: Vector.CrossProduct
  fullName: System.Windows.Vector.CrossProduct
- uid: System.Windows.Vector.Determinant*
  commentId: Overload:System.Windows.Vector.Determinant
  name: Determinant
  nameWithType: Vector.Determinant
  fullName: System.Windows.Vector.Determinant
- uid: System.Windows.Vector.Divide*
  commentId: Overload:System.Windows.Vector.Divide
  name: Divide
  nameWithType: Vector.Divide
  fullName: System.Windows.Vector.Divide
- uid: System.Windows.Vector.Equals*
  commentId: Overload:System.Windows.Vector.Equals
  name: Equals
  nameWithType: Vector.Equals
  fullName: System.Windows.Vector.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Media.Matrix
  commentId: T:System.Windows.Media.Matrix
  parent: System.Windows.Media
  name: Matrix
  nameWithType: Matrix
  fullName: System.Windows.Media.Matrix
- uid: System.Windows.Vector.Multiply*
  commentId: Overload:System.Windows.Vector.Multiply
  name: Multiply
  nameWithType: Vector.Multiply
  fullName: System.Windows.Vector.Multiply
- uid: System.Windows.Media
  commentId: N:System.Windows.Media
  name: System.Windows.Media
  nameWithType: System.Windows.Media
  fullName: System.Windows.Media
- uid: System.Windows.Vector.Parse*
  commentId: Overload:System.Windows.Vector.Parse
  name: Parse
  nameWithType: Vector.Parse
  fullName: System.Windows.Vector.Parse
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Vector.Subtract*
  commentId: Overload:System.Windows.Vector.Subtract
  name: Subtract
  nameWithType: Vector.Subtract
  fullName: System.Windows.Vector.Subtract
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Vector.GetHashCode*
  commentId: Overload:System.Windows.Vector.GetHashCode
  name: GetHashCode
  nameWithType: Vector.GetHashCode
  fullName: System.Windows.Vector.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Vector.Negate*
  commentId: Overload:System.Windows.Vector.Negate
  name: Negate
  nameWithType: Vector.Negate
  fullName: System.Windows.Vector.Negate
- uid: System.Windows.Vector.Normalize*
  commentId: Overload:System.Windows.Vector.Normalize
  name: Normalize
  nameWithType: Vector.Normalize
  fullName: System.Windows.Vector.Normalize
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Vector.ToString*
  commentId: Overload:System.Windows.Vector.ToString
  name: ToString
  nameWithType: Vector.ToString
  fullName: System.Windows.Vector.ToString
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Windows.Vector.System#IFormattable#ToString*
  commentId: Overload:System.Windows.Vector.System#IFormattable#ToString
  name: IFormattable.ToString
  nameWithType: Vector.IFormattable.ToString
  fullName: System.Windows.Vector.System.IFormattable.ToString
  nameWithType.vb: Vector.System.IFormattable.ToString
  name.vb: System.IFormattable.ToString
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  nameWithType: IFormattable.ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Vector.op_Addition*
  commentId: Overload:System.Windows.Vector.op_Addition
  name: Addition
  nameWithType: Vector.Addition
  fullName: System.Windows.Vector.Addition
- uid: System.Windows.Vector.op_UnaryNegation*
  commentId: Overload:System.Windows.Vector.op_UnaryNegation
  name: UnaryNegation
  nameWithType: Vector.UnaryNegation
  fullName: System.Windows.Vector.UnaryNegation
- uid: System.Windows.Vector.op_Subtraction*
  commentId: Overload:System.Windows.Vector.op_Subtraction
  name: Subtraction
  nameWithType: Vector.Subtraction
  fullName: System.Windows.Vector.Subtraction
- uid: System.Windows.Vector.op_Multiply*
  commentId: Overload:System.Windows.Vector.op_Multiply
  name: Multiply
  nameWithType: Vector.Multiply
  fullName: System.Windows.Vector.Multiply
- uid: System.Windows.Vector.op_Division*
  commentId: Overload:System.Windows.Vector.op_Division
  name: Division
  nameWithType: Vector.Division
  fullName: System.Windows.Vector.Division
- uid: System.Windows.Vector.op_Equality*
  commentId: Overload:System.Windows.Vector.op_Equality
  name: Equality
  nameWithType: Vector.Equality
  fullName: System.Windows.Vector.Equality
- uid: System.Windows.Vector.op_Inequality*
  commentId: Overload:System.Windows.Vector.op_Inequality
  name: Inequality
  nameWithType: Vector.Inequality
  fullName: System.Windows.Vector.Inequality
- uid: System.Windows.Size
  commentId: T:System.Windows.Size
  parent: System.Windows
  name: Size
  nameWithType: Size
  fullName: System.Windows.Size
- uid: System.Windows.Size.Width
  commentId: P:System.Windows.Size.Width
  isExternal: true
- uid: System.Windows.Size.Height
  commentId: P:System.Windows.Size.Height
  isExternal: true
- uid: System.Windows.Vector.op_Explicit*
  commentId: Overload:System.Windows.Vector.op_Explicit
  name: Explicit
  nameWithType: Vector.Explicit
  fullName: System.Windows.Vector.Explicit
  nameWithType.vb: Vector.Narrowing
  fullName.vb: System.Windows.Vector.Narrowing
  name.vb: Narrowing
- uid: System.Windows.Point.X
  commentId: P:System.Windows.Point.X
  isExternal: true
- uid: System.Windows.Point.Y
  commentId: P:System.Windows.Point.Y
  isExternal: true
