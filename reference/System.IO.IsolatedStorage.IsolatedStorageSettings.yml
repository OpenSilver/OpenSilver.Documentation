### YamlMime:ManagedReference
items:
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings
  commentId: T:System.IO.IsolatedStorage.IsolatedStorageSettings
  id: IsolatedStorageSettings
  parent: System.IO.IsolatedStorage
  children:
  - System.IO.IsolatedStorage.IsolatedStorageSettings.Add(System.String,System.Object)
  - System.IO.IsolatedStorage.IsolatedStorageSettings.ApplicationSettings
  - System.IO.IsolatedStorage.IsolatedStorageSettings.Clear
  - System.IO.IsolatedStorage.IsolatedStorageSettings.Contains(System.String)
  - System.IO.IsolatedStorage.IsolatedStorageSettings.Count
  - System.IO.IsolatedStorage.IsolatedStorageSettings.GetEnumerator
  - System.IO.IsolatedStorage.IsolatedStorageSettings.Item(System.String)
  - System.IO.IsolatedStorage.IsolatedStorageSettings.Keys
  - System.IO.IsolatedStorage.IsolatedStorageSettings.Remove(System.String)
  - System.IO.IsolatedStorage.IsolatedStorageSettings.Save
  - System.IO.IsolatedStorage.IsolatedStorageSettings.SiteSettings
  - System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IEnumerable#GetEnumerator
  - System.IO.IsolatedStorage.IsolatedStorageSettings.TryGetValue``1(System.String,``0@)
  - System.IO.IsolatedStorage.IsolatedStorageSettings.Values
  langs:
  - csharp
  - vb
  name: IsolatedStorageSettings
  nameWithType: IsolatedStorageSettings
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings
  type: Class
  source:
    remote:
      path: src/Runtime/Runtime/System.IO.IsolatedStorage/WORKINPROGRESS/IsolatedStorageSettings.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: IsolatedStorageSettings
    path: ../OpenSilverGit/src/Runtime/Runtime/System.IO.IsolatedStorage/WORKINPROGRESS/IsolatedStorageSettings.cs
    startLine: 17
  assemblies:
  - OpenSilver
  namespace: System.IO.IsolatedStorage
  summary: "\nProvides a <xref href=\"System.Collections.Generic.Dictionary%602\" data-throw-if-not-resolved=\"false\"></xref> that stores key-value pairs in isolated storage.\n"
  example:
  - "\nHere is how to use the IsolatedStorageSettings:\n<pre><code>//Write in the IsolatedStorageSettings:\nIsolatedStorageSettings.ApplicationSettings[&quot;someKey&quot;] = &quot;someValue&quot;;\n//Read from it:\nstring value;\nstring myString = IsolatedStorageSettings.ApplicationSettings.TryGetValue(&quot;someKey&quot;, out value);</code></pre>\n"
  syntax:
    content: 'public sealed class IsolatedStorageSettings : IEnumerable<KeyValuePair<string, object>>, IEnumerable'
    content.vb: >-
      Public NotInheritable Class IsolatedStorageSettings
          Implements IEnumerable(Of KeyValuePair(Of String, Object)), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.ApplicationSettings
  commentId: P:System.IO.IsolatedStorage.IsolatedStorageSettings.ApplicationSettings
  id: ApplicationSettings
  parent: System.IO.IsolatedStorage.IsolatedStorageSettings
  langs:
  - csharp
  - vb
  name: ApplicationSettings
  nameWithType: IsolatedStorageSettings.ApplicationSettings
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.ApplicationSettings
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: ApplicationSettings
    path: ../OpenSilverGit/src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
    startLine: 60
  assemblies:
  - OpenSilver
  namespace: System.IO.IsolatedStorage
  summary: "\nGets an instance of System.IO.IsolatedStorage.IsolatedStorageSettings that\ncontains the contents of the application&apos;s System.IO.IsolatedStorage.IsolatedStorageFile,\nscoped at the application level, or creates a new instance of System.IO.IsolatedStorage.IsolatedStorageSettings\nif one does not exist.\n"
  example: []
  syntax:
    content: public static IsolatedStorageSettings ApplicationSettings { get; }
    parameters: []
    return:
      type: System.IO.IsolatedStorage.IsolatedStorageSettings
    content.vb: Public Shared ReadOnly Property ApplicationSettings As IsolatedStorageSettings
  overload: System.IO.IsolatedStorage.IsolatedStorageSettings.ApplicationSettings*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.Count
  commentId: P:System.IO.IsolatedStorage.IsolatedStorageSettings.Count
  id: Count
  parent: System.IO.IsolatedStorage.IsolatedStorageSettings
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: IsolatedStorageSettings.Count
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.Count
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Count
    path: ../OpenSilverGit/src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
    startLine: 65
  assemblies:
  - OpenSilver
  namespace: System.IO.IsolatedStorage
  summary: "\nGets the number of key-value pairs that are stored in the dictionary.\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: System.IO.IsolatedStorage.IsolatedStorageSettings.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.Keys
  commentId: P:System.IO.IsolatedStorage.IsolatedStorageSettings.Keys
  id: Keys
  parent: System.IO.IsolatedStorage.IsolatedStorageSettings
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: IsolatedStorageSettings.Keys
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.Keys
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Keys
    path: ../OpenSilverGit/src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
    startLine: 86
  assemblies:
  - OpenSilver
  namespace: System.IO.IsolatedStorage
  summary: "\nGets a collection that contains the keys in the dictionary.\n"
  example: []
  syntax:
    content: public ICollection Keys { get; }
    parameters: []
    return:
      type: System.Collections.ICollection
    content.vb: Public ReadOnly Property Keys As ICollection
  overload: System.IO.IsolatedStorage.IsolatedStorageSettings.Keys*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.Values
  commentId: P:System.IO.IsolatedStorage.IsolatedStorageSettings.Values
  id: Values
  parent: System.IO.IsolatedStorage.IsolatedStorageSettings
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: IsolatedStorageSettings.Values
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.Values
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Values
    path: ../OpenSilverGit/src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
    startLine: 123
  assemblies:
  - OpenSilver
  namespace: System.IO.IsolatedStorage
  summary: "\nGets a collection that contains the values in the dictionary.\n"
  example: []
  syntax:
    content: public ICollection Values { get; }
    parameters: []
    return:
      type: System.Collections.ICollection
    content.vb: Public ReadOnly Property Values As ICollection
  overload: System.IO.IsolatedStorage.IsolatedStorageSettings.Values*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.Item(System.String)
  commentId: P:System.IO.IsolatedStorage.IsolatedStorageSettings.Item(System.String)
  id: Item(System.String)
  parent: System.IO.IsolatedStorage.IsolatedStorageSettings
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: IsolatedStorageSettings.Item[String]
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.Item[System.String]
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: this[]
    path: ../OpenSilverGit/src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
    startLine: 150
  assemblies:
  - OpenSilver
  namespace: System.IO.IsolatedStorage
  summary: "\nGets or sets the value associated with the specified key.\n"
  example: []
  syntax:
    content: public object this[string key] { get; set; }
    parameters:
    - id: key
      type: System.String
      description: The key of the item to get or set.
    return:
      type: System.Object
      description: "\nThe value associated with the specified key. If the specified key is not\nfound, a get operation throws a System.Collections.Generic.KeyNotFoundException,\nand a set operation creates a new element that has the specified key.\n"
    content.vb: Public Property Item(key As String) As Object
  overload: System.IO.IsolatedStorage.IsolatedStorageSettings.Item*
  nameWithType.vb: IsolatedStorageSettings.Item(String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.IO.IsolatedStorage.IsolatedStorageSettings.Item(System.String)
  name.vb: Item(String)
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.Add(System.String,System.Object)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageSettings.Add(System.String,System.Object)
  id: Add(System.String,System.Object)
  parent: System.IO.IsolatedStorage.IsolatedStorageSettings
  langs:
  - csharp
  - vb
  name: Add(String, Object)
  nameWithType: IsolatedStorageSettings.Add(String, Object)
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.Add(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Add
    path: ../OpenSilverGit/src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
    startLine: 161
  assemblies:
  - OpenSilver
  namespace: System.IO.IsolatedStorage
  summary: "\nAdds an entry to the dictionary for the key-value pair.\n"
  example: []
  syntax:
    content: public void Add(string key, object value)
    parameters:
    - id: key
      type: System.String
      description: The key for the entry to be stored.
    - id: value
      type: System.Object
      description: The value to be stored.
    content.vb: Public Sub Add(key As String, value As Object)
  overload: System.IO.IsolatedStorage.IsolatedStorageSettings.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.Clear
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageSettings.Clear
  id: Clear
  parent: System.IO.IsolatedStorage.IsolatedStorageSettings
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: IsolatedStorageSettings.Clear()
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.Clear()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Clear
    path: ../OpenSilverGit/src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
    startLine: 179
  assemblies:
  - OpenSilver
  namespace: System.IO.IsolatedStorage
  summary: "\nResets the count of items stored in System.IO.IsolatedStorage.IsolatedStorageSettings\nto zero and releases all references to elements in the collection.\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: System.IO.IsolatedStorage.IsolatedStorageSettings.Clear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.Contains(System.String)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageSettings.Contains(System.String)
  id: Contains(System.String)
  parent: System.IO.IsolatedStorage.IsolatedStorageSettings
  langs:
  - csharp
  - vb
  name: Contains(String)
  nameWithType: IsolatedStorageSettings.Contains(String)
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.Contains(System.String)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Contains
    path: ../OpenSilverGit/src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
    startLine: 194
  assemblies:
  - OpenSilver
  namespace: System.IO.IsolatedStorage
  summary: "\nDetermines if the application settings dictionary contains the specified\nkey.\n"
  example: []
  syntax:
    content: public bool Contains(string key)
    parameters:
    - id: key
      type: System.String
      description: The key for the entry to be located.
    return:
      type: System.Boolean
      description: true if the dictionary contains the specified key; otherwise, false.
    content.vb: Public Function Contains(key As String) As Boolean
  overload: System.IO.IsolatedStorage.IsolatedStorageSettings.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.Remove(System.String)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageSettings.Remove(System.String)
  id: Remove(System.String)
  parent: System.IO.IsolatedStorage.IsolatedStorageSettings
  langs:
  - csharp
  - vb
  name: Remove(String)
  nameWithType: IsolatedStorageSettings.Remove(String)
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.Remove(System.String)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Remove
    path: ../OpenSilverGit/src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
    startLine: 204
  assemblies:
  - OpenSilver
  namespace: System.IO.IsolatedStorage
  summary: "\nRemoves the entry with the specified key.\n"
  example: []
  syntax:
    content: public bool Remove(string key)
    parameters:
    - id: key
      type: System.String
      description: The key for the entry to be deleted.
    return:
      type: System.Boolean
      description: true if the specified key was removed; otherwise, false.
    content.vb: Public Function Remove(key As String) As Boolean
  overload: System.IO.IsolatedStorage.IsolatedStorageSettings.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.TryGetValue``1(System.String,``0@)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageSettings.TryGetValue``1(System.String,``0@)
  id: TryGetValue``1(System.String,``0@)
  parent: System.IO.IsolatedStorage.IsolatedStorageSettings
  langs:
  - csharp
  - vb
  name: TryGetValue<T>(String, out T)
  nameWithType: IsolatedStorageSettings.TryGetValue<T>(String, out T)
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.TryGetValue<T>(System.String, out T)
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: TryGetValue
    path: ../OpenSilverGit/src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
    startLine: 237
  assemblies:
  - OpenSilver
  namespace: System.IO.IsolatedStorage
  summary: "\nGets a value for the specified key.\n"
  example: []
  syntax:
    content: public bool TryGetValue<T>(string key, out T value)
    parameters:
    - id: key
      type: System.String
      description: The key of the value to get.
    - id: value
      type: '{T}'
      description: "\nWhen this method returns, the value associated with the specified key if\nthe key is found; otherwise, the default value for the type of the value\nparameter. This parameter is passed uninitialized.\n"
    typeParameters:
    - id: T
      description: The System.Type of the value parameter.
    return:
      type: System.Boolean
      description: true if the specified key is found; otherwise, false.
    content.vb: Public Function TryGetValue(Of T)(key As String, ByRef value As T) As Boolean
  overload: System.IO.IsolatedStorage.IsolatedStorageSettings.TryGetValue*
  nameWithType.vb: IsolatedStorageSettings.TryGetValue(Of T)(String, ByRef T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.IO.IsolatedStorage.IsolatedStorageSettings.TryGetValue(Of T)(System.String, ByRef T)
  name.vb: TryGetValue(Of T)(String, ByRef T)
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.IO.IsolatedStorage.IsolatedStorageSettings
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: IsolatedStorageSettings.IEnumerable.GetEnumerator()
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../OpenSilverGit/src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
    startLine: 249
  assemblies:
  - OpenSilver
  namespace: System.IO.IsolatedStorage
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: IsolatedStorageSettings.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.GetEnumerator
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageSettings.GetEnumerator
  id: GetEnumerator
  parent: System.IO.IsolatedStorage.IsolatedStorageSettings
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: IsolatedStorageSettings.GetEnumerator()
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: GetEnumerator
    path: ../OpenSilverGit/src/Runtime/Runtime/System.IO.IsolatedStorage/IsolatedStorageSettings.cs
    startLine: 257
  assemblies:
  - OpenSilver
  namespace: System.IO.IsolatedStorage
  syntax:
    content: public IEnumerator<KeyValuePair<string, object>> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
    content.vb: Public Function GetEnumerator As IEnumerator(Of KeyValuePair(Of String, Object))
  overload: System.IO.IsolatedStorage.IsolatedStorageSettings.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.SiteSettings
  commentId: P:System.IO.IsolatedStorage.IsolatedStorageSettings.SiteSettings
  id: SiteSettings
  parent: System.IO.IsolatedStorage.IsolatedStorageSettings
  langs:
  - csharp
  - vb
  name: SiteSettings
  nameWithType: IsolatedStorageSettings.SiteSettings
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.SiteSettings
  type: Property
  source:
    remote:
      path: src/Runtime/Runtime/System.IO.IsolatedStorage/WORKINPROGRESS/IsolatedStorageSettings.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: SiteSettings
    path: ../OpenSilverGit/src/Runtime/Runtime/System.IO.IsolatedStorage/WORKINPROGRESS/IsolatedStorageSettings.cs
    startLine: 19
  assemblies:
  - OpenSilver
  namespace: System.IO.IsolatedStorage
  syntax:
    content: >-
      [NotImplemented]

      public static IsolatedStorageSettings SiteSettings { get; }
    parameters: []
    return:
      type: System.IO.IsolatedStorage.IsolatedStorageSettings
    content.vb: >-
      <NotImplemented>

      Public Shared ReadOnly Property SiteSettings As IsolatedStorageSettings
  overload: System.IO.IsolatedStorage.IsolatedStorageSettings.SiteSettings*
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.Save
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageSettings.Save
  id: Save
  parent: System.IO.IsolatedStorage.IsolatedStorageSettings
  langs:
  - csharp
  - vb
  name: Save()
  nameWithType: IsolatedStorageSettings.Save()
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.Save()
  type: Method
  source:
    remote:
      path: src/Runtime/Runtime/System.IO.IsolatedStorage/WORKINPROGRESS/IsolatedStorageSettings.cs
      branch: develop
      repo: https://github.com/OpenSilver/OpenSilver.git
    id: Save
    path: ../OpenSilverGit/src/Runtime/Runtime/System.IO.IsolatedStorage/WORKINPROGRESS/IsolatedStorageSettings.cs
    startLine: 22
  assemblies:
  - OpenSilver
  namespace: System.IO.IsolatedStorage
  syntax:
    content: >-
      [NotImplemented]

      public void Save()
    content.vb: >-
      <NotImplemented>

      Public Sub Save
  overload: System.IO.IsolatedStorage.IsolatedStorageSettings.Save*
  attributes:
  - type: OpenSilver.NotImplementedAttribute
    ctor: OpenSilver.NotImplementedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.IsolatedStorage
  commentId: N:System.IO.IsolatedStorage
  name: System.IO.IsolatedStorage
  nameWithType: System.IO.IsolatedStorage
  fullName: System.IO.IsolatedStorage
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, Object>>
  nameWithType: IEnumerable<KeyValuePair<String, Object>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: IEnumerable(Of KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.ApplicationSettings*
  commentId: Overload:System.IO.IsolatedStorage.IsolatedStorageSettings.ApplicationSettings
  name: ApplicationSettings
  nameWithType: IsolatedStorageSettings.ApplicationSettings
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.ApplicationSettings
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings
  commentId: T:System.IO.IsolatedStorage.IsolatedStorageSettings
  parent: System.IO.IsolatedStorage
  name: IsolatedStorageSettings
  nameWithType: IsolatedStorageSettings
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.Count*
  commentId: Overload:System.IO.IsolatedStorage.IsolatedStorageSettings.Count
  name: Count
  nameWithType: IsolatedStorageSettings.Count
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.Keys*
  commentId: Overload:System.IO.IsolatedStorage.IsolatedStorageSettings.Keys
  name: Keys
  nameWithType: IsolatedStorageSettings.Keys
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.Keys
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.Values*
  commentId: Overload:System.IO.IsolatedStorage.IsolatedStorageSettings.Values
  name: Values
  nameWithType: IsolatedStorageSettings.Values
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.Values
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.Item*
  commentId: Overload:System.IO.IsolatedStorage.IsolatedStorageSettings.Item
  name: Item
  nameWithType: IsolatedStorageSettings.Item
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.Item
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.Add*
  commentId: Overload:System.IO.IsolatedStorage.IsolatedStorageSettings.Add
  name: Add
  nameWithType: IsolatedStorageSettings.Add
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.Add
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.Clear*
  commentId: Overload:System.IO.IsolatedStorage.IsolatedStorageSettings.Clear
  name: Clear
  nameWithType: IsolatedStorageSettings.Clear
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.Clear
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.Contains*
  commentId: Overload:System.IO.IsolatedStorage.IsolatedStorageSettings.Contains
  name: Contains
  nameWithType: IsolatedStorageSettings.Contains
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.Contains
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.Remove*
  commentId: Overload:System.IO.IsolatedStorage.IsolatedStorageSettings.Remove
  name: Remove
  nameWithType: IsolatedStorageSettings.Remove
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.Remove
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.TryGetValue*
  commentId: Overload:System.IO.IsolatedStorage.IsolatedStorageSettings.TryGetValue
  name: TryGetValue
  nameWithType: IsolatedStorageSettings.TryGetValue
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.TryGetValue
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: IsolatedStorageSettings.IEnumerable.GetEnumerator
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: IsolatedStorageSettings.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.GetEnumerator*
  commentId: Overload:System.IO.IsolatedStorage.IsolatedStorageSettings.GetEnumerator
  name: GetEnumerator
  nameWithType: IsolatedStorageSettings.GetEnumerator
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<KeyValuePair<String, Object>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, Object)).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<KeyValuePair<String, Object>>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of KeyValuePair(Of String, Object)).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<String, Object>>
  nameWithType: IEnumerator<KeyValuePair<String, Object>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: IEnumerator(Of KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.SiteSettings*
  commentId: Overload:System.IO.IsolatedStorage.IsolatedStorageSettings.SiteSettings
  name: SiteSettings
  nameWithType: IsolatedStorageSettings.SiteSettings
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.SiteSettings
- uid: System.IO.IsolatedStorage.IsolatedStorageSettings.Save*
  commentId: Overload:System.IO.IsolatedStorage.IsolatedStorageSettings.Save
  name: Save
  nameWithType: IsolatedStorageSettings.Save
  fullName: System.IO.IsolatedStorage.IsolatedStorageSettings.Save
